<?php
/**
 * StudentEducationOrganizationAssociationsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Resources
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Resources\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Resources\ApiException;
use Resources\Configuration;
use Resources\HeaderSelector;
use Resources\ObjectSerializer;

/**
 * StudentEducationOrganizationAssociationsApi Class Doc Comment
 *
 * @category Class
 * @package  Resources
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class StudentEducationOrganizationAssociationsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'deleteStudentEducationOrganizationAssociationById' => [
            'application/json',
        ],
        'deletesStudentEducationOrganizationAssociations' => [
            'application/json',
        ],
        'getStudentEducationOrganizationAssociations' => [
            'application/json',
        ],
        'getStudentEducationOrganizationAssociationsById' => [
            'application/json',
        ],
        'getStudentEducationOrganizationAssociationsPartitions' => [
            'application/json',
        ],
        'keyChangesStudentEducationOrganizationAssociations' => [
            'application/json',
        ],
        'postStudentEducationOrganizationAssociation' => [
            'application/json',
        ],
        'putStudentEducationOrganizationAssociation' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation deleteStudentEducationOrganizationAssociationById
     *
     * Deletes an existing resource using the resource identifier.
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  string $if_match The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteStudentEducationOrganizationAssociationById'] to see the possible values for this operation
     *
     * @throws \Resources\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteStudentEducationOrganizationAssociationById($id, $if_match = null, string $contentType = self::contentTypes['deleteStudentEducationOrganizationAssociationById'][0])
    {
        $this->deleteStudentEducationOrganizationAssociationByIdWithHttpInfo($id, $if_match, $contentType);
    }

    /**
     * Operation deleteStudentEducationOrganizationAssociationByIdWithHttpInfo
     *
     * Deletes an existing resource using the resource identifier.
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  string $if_match The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteStudentEducationOrganizationAssociationById'] to see the possible values for this operation
     *
     * @throws \Resources\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteStudentEducationOrganizationAssociationByIdWithHttpInfo($id, $if_match = null, string $contentType = self::contentTypes['deleteStudentEducationOrganizationAssociationById'][0])
    {
        $request = $this->deleteStudentEducationOrganizationAssociationByIdRequest($id, $if_match, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteStudentEducationOrganizationAssociationByIdAsync
     *
     * Deletes an existing resource using the resource identifier.
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  string $if_match The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteStudentEducationOrganizationAssociationById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteStudentEducationOrganizationAssociationByIdAsync($id, $if_match = null, string $contentType = self::contentTypes['deleteStudentEducationOrganizationAssociationById'][0])
    {
        return $this->deleteStudentEducationOrganizationAssociationByIdAsyncWithHttpInfo($id, $if_match, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteStudentEducationOrganizationAssociationByIdAsyncWithHttpInfo
     *
     * Deletes an existing resource using the resource identifier.
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  string $if_match The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteStudentEducationOrganizationAssociationById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteStudentEducationOrganizationAssociationByIdAsyncWithHttpInfo($id, $if_match = null, string $contentType = self::contentTypes['deleteStudentEducationOrganizationAssociationById'][0])
    {
        $returnType = '';
        $request = $this->deleteStudentEducationOrganizationAssociationByIdRequest($id, $if_match, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteStudentEducationOrganizationAssociationById'
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  string $if_match The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteStudentEducationOrganizationAssociationById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteStudentEducationOrganizationAssociationByIdRequest($id, $if_match = null, string $contentType = self::contentTypes['deleteStudentEducationOrganizationAssociationById'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteStudentEducationOrganizationAssociationById'
            );
        }



        $resourcePath = '/ed-fi/studentEducationOrganizationAssociations/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($if_match !== null) {
            $headerParams['If-Match'] = ObjectSerializer::toHeaderValue($if_match);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deletesStudentEducationOrganizationAssociations
     *
     * Retrieves deleted resources based on change version.
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletesStudentEducationOrganizationAssociations'] to see the possible values for this operation
     *
     * @throws \Resources\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return |\Resources\Model\TrackedChangesEdFiStudentEducationOrganizationAssociationDelete[]
     */
    public function deletesStudentEducationOrganizationAssociations($offset = null, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $use_snapshot = false, string $contentType = self::contentTypes['deletesStudentEducationOrganizationAssociations'][0])
    {
        list($response) = $this->deletesStudentEducationOrganizationAssociationsWithHttpInfo($offset, $limit, $min_change_version, $max_change_version, $total_count, $use_snapshot, $contentType);
        return $response;
    }

    /**
     * Operation deletesStudentEducationOrganizationAssociationsWithHttpInfo
     *
     * Retrieves deleted resources based on change version.
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletesStudentEducationOrganizationAssociations'] to see the possible values for this operation
     *
     * @throws \Resources\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of |\Resources\Model\TrackedChangesEdFiStudentEducationOrganizationAssociationDelete[], HTTP status code, HTTP response headers (array of strings)
     */
    public function deletesStudentEducationOrganizationAssociationsWithHttpInfo($offset = null, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $use_snapshot = false, string $contentType = self::contentTypes['deletesStudentEducationOrganizationAssociations'][0])
    {
        $request = $this->deletesStudentEducationOrganizationAssociationsRequest($offset, $limit, $min_change_version, $max_change_version, $total_count, $use_snapshot, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Resources\Model\TrackedChangesEdFiStudentEducationOrganizationAssociationDelete[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Resources\Model\TrackedChangesEdFiStudentEducationOrganizationAssociationDelete[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Resources\Model\TrackedChangesEdFiStudentEducationOrganizationAssociationDelete[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Resources\Model\TrackedChangesEdFiStudentEducationOrganizationAssociationDelete[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Resources\Model\TrackedChangesEdFiStudentEducationOrganizationAssociationDelete[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deletesStudentEducationOrganizationAssociationsAsync
     *
     * Retrieves deleted resources based on change version.
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletesStudentEducationOrganizationAssociations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deletesStudentEducationOrganizationAssociationsAsync($offset = null, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $use_snapshot = false, string $contentType = self::contentTypes['deletesStudentEducationOrganizationAssociations'][0])
    {
        return $this->deletesStudentEducationOrganizationAssociationsAsyncWithHttpInfo($offset, $limit, $min_change_version, $max_change_version, $total_count, $use_snapshot, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deletesStudentEducationOrganizationAssociationsAsyncWithHttpInfo
     *
     * Retrieves deleted resources based on change version.
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletesStudentEducationOrganizationAssociations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deletesStudentEducationOrganizationAssociationsAsyncWithHttpInfo($offset = null, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $use_snapshot = false, string $contentType = self::contentTypes['deletesStudentEducationOrganizationAssociations'][0])
    {
        $returnType = '\Resources\Model\TrackedChangesEdFiStudentEducationOrganizationAssociationDelete[]';
        $request = $this->deletesStudentEducationOrganizationAssociationsRequest($offset, $limit, $min_change_version, $max_change_version, $total_count, $use_snapshot, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deletesStudentEducationOrganizationAssociations'
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletesStudentEducationOrganizationAssociations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deletesStudentEducationOrganizationAssociationsRequest($offset = null, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $use_snapshot = false, string $contentType = self::contentTypes['deletesStudentEducationOrganizationAssociations'][0])
    {


        if ($limit !== null && $limit > 500) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling StudentEducationOrganizationAssociationsApi.deletesStudentEducationOrganizationAssociations, must be smaller than or equal to 500.');
        }
        if ($limit !== null && $limit < 0) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling StudentEducationOrganizationAssociationsApi.deletesStudentEducationOrganizationAssociations, must be bigger than or equal to 0.');
        }
        





        $resourcePath = '/ed-fi/studentEducationOrganizationAssociations/deletes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_change_version,
            'minChangeVersion', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_change_version,
            'maxChangeVersion', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $total_count,
            'totalCount', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($use_snapshot !== null) {
            $headerParams['Use-Snapshot'] = ObjectSerializer::toHeaderValue($use_snapshot);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getStudentEducationOrganizationAssociations
     *
     * Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  string $page_token The token of the page to retrieve, obtained either from the \&quot;Next-Page-Token\&quot; header of the previous request, or from the \&quot;partitions\&quot; endpoint for the resource. Cannot be used with limit/offset paging. (optional)
     * @param  int $page_size The maximum number of items to retrieve in the page. For use with pageToken (cursor paging) only. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)
     * @param  int $education_organization_id The identifier assigned to an education organization. (optional)
     * @param  string $student_unique_id A unique alphanumeric code assigned to a student. (optional)
     * @param  string $barrier_to_internet_access_in_residence_descriptor An indication of the barrier to having internet access in the student s primary place of residence. (optional)
     * @param  string $internet_access_type_in_residence_descriptor The primary type of internet service used in the student s primary place of residence. (optional)
     * @param  string $internet_performance_in_residence_descriptor An indication of whether the student can complete the full range of learning activities, including video streaming and assignment upload, without interruptions caused by poor internet performance in their primary place of residence. (optional)
     * @param  string $limited_english_proficiency_descriptor An indication that the student has been identified as limited English proficient by the Language Proficiency Assessment Committee (LPAC), or English proficient. (optional)
     * @param  string $primary_learning_device_access_descriptor An indication of whether the primary learning device is shared or not shared with another individual. (optional)
     * @param  string $primary_learning_device_away_from_school_descriptor The type of device the student uses most often to complete learning activities away from school. (optional)
     * @param  string $primary_learning_device_provider_descriptor The provider of the primary learning device. (optional)
     * @param  string $sex_descriptor The student&#39;s birth sex as reported to the education organization. (optional)
     * @param  string $supporter_military_connection_descriptor Military connection of the person/people whom the student is a dependent of. (optional)
     * @param  string $gender_identity The student&#39;s gender as last reported to the education organization. (optional)
     * @param  bool $hispanic_latino_ethnicity An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race, as last reported to the education organization. The term, \&quot;Spanish origin,\&quot; can be used in addition to \&quot;Hispanic or Latino.\&quot; (optional)
     * @param  string $id  (optional)
     * @param  bool $internet_access_in_residence An indication of whether the student is able to access the internet in their primary place of residence. (optional)
     * @param  string $login_id The login ID for the user; used for security access control interface. (optional)
     * @param  string $profile_thumbnail Locator reference for the student photo. The specification for that reference is left to local definition. (optional)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     * @param  string $student_identification_system_descriptor A coding scheme that is used for identification and record-keeping purposes by schools, social services, or other agencies to refer to a student. (optional)
     * @param  string $assigning_organization_identification_code The organization code or name assigning the StudentIdentificationCode. (optional)
     * @param  string $identification_code A unique number or alphanumeric code assigned to a student by a school, school system, a state, or other agency or entity. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStudentEducationOrganizationAssociations'] to see the possible values for this operation
     *
     * @throws \Resources\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return |\Resources\Model\EdFiStudentEducationOrganizationAssociation[]
     */
    public function getStudentEducationOrganizationAssociations($offset = null, $limit = 25, $page_token = null, $page_size = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $education_organization_id = null, $student_unique_id = null, $barrier_to_internet_access_in_residence_descriptor = null, $internet_access_type_in_residence_descriptor = null, $internet_performance_in_residence_descriptor = null, $limited_english_proficiency_descriptor = null, $primary_learning_device_access_descriptor = null, $primary_learning_device_away_from_school_descriptor = null, $primary_learning_device_provider_descriptor = null, $sex_descriptor = null, $supporter_military_connection_descriptor = null, $gender_identity = null, $hispanic_latino_ethnicity = null, $id = null, $internet_access_in_residence = null, $login_id = null, $profile_thumbnail = null, $use_snapshot = false, $student_identification_system_descriptor = null, $assigning_organization_identification_code = null, $identification_code = null, string $contentType = self::contentTypes['getStudentEducationOrganizationAssociations'][0])
    {
        list($response) = $this->getStudentEducationOrganizationAssociationsWithHttpInfo($offset, $limit, $page_token, $page_size, $min_change_version, $max_change_version, $total_count, $education_organization_id, $student_unique_id, $barrier_to_internet_access_in_residence_descriptor, $internet_access_type_in_residence_descriptor, $internet_performance_in_residence_descriptor, $limited_english_proficiency_descriptor, $primary_learning_device_access_descriptor, $primary_learning_device_away_from_school_descriptor, $primary_learning_device_provider_descriptor, $sex_descriptor, $supporter_military_connection_descriptor, $gender_identity, $hispanic_latino_ethnicity, $id, $internet_access_in_residence, $login_id, $profile_thumbnail, $use_snapshot, $student_identification_system_descriptor, $assigning_organization_identification_code, $identification_code, $contentType);
        return $response;
    }

    /**
     * Operation getStudentEducationOrganizationAssociationsWithHttpInfo
     *
     * Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  string $page_token The token of the page to retrieve, obtained either from the \&quot;Next-Page-Token\&quot; header of the previous request, or from the \&quot;partitions\&quot; endpoint for the resource. Cannot be used with limit/offset paging. (optional)
     * @param  int $page_size The maximum number of items to retrieve in the page. For use with pageToken (cursor paging) only. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)
     * @param  int $education_organization_id The identifier assigned to an education organization. (optional)
     * @param  string $student_unique_id A unique alphanumeric code assigned to a student. (optional)
     * @param  string $barrier_to_internet_access_in_residence_descriptor An indication of the barrier to having internet access in the student s primary place of residence. (optional)
     * @param  string $internet_access_type_in_residence_descriptor The primary type of internet service used in the student s primary place of residence. (optional)
     * @param  string $internet_performance_in_residence_descriptor An indication of whether the student can complete the full range of learning activities, including video streaming and assignment upload, without interruptions caused by poor internet performance in their primary place of residence. (optional)
     * @param  string $limited_english_proficiency_descriptor An indication that the student has been identified as limited English proficient by the Language Proficiency Assessment Committee (LPAC), or English proficient. (optional)
     * @param  string $primary_learning_device_access_descriptor An indication of whether the primary learning device is shared or not shared with another individual. (optional)
     * @param  string $primary_learning_device_away_from_school_descriptor The type of device the student uses most often to complete learning activities away from school. (optional)
     * @param  string $primary_learning_device_provider_descriptor The provider of the primary learning device. (optional)
     * @param  string $sex_descriptor The student&#39;s birth sex as reported to the education organization. (optional)
     * @param  string $supporter_military_connection_descriptor Military connection of the person/people whom the student is a dependent of. (optional)
     * @param  string $gender_identity The student&#39;s gender as last reported to the education organization. (optional)
     * @param  bool $hispanic_latino_ethnicity An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race, as last reported to the education organization. The term, \&quot;Spanish origin,\&quot; can be used in addition to \&quot;Hispanic or Latino.\&quot; (optional)
     * @param  string $id  (optional)
     * @param  bool $internet_access_in_residence An indication of whether the student is able to access the internet in their primary place of residence. (optional)
     * @param  string $login_id The login ID for the user; used for security access control interface. (optional)
     * @param  string $profile_thumbnail Locator reference for the student photo. The specification for that reference is left to local definition. (optional)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     * @param  string $student_identification_system_descriptor A coding scheme that is used for identification and record-keeping purposes by schools, social services, or other agencies to refer to a student. (optional)
     * @param  string $assigning_organization_identification_code The organization code or name assigning the StudentIdentificationCode. (optional)
     * @param  string $identification_code A unique number or alphanumeric code assigned to a student by a school, school system, a state, or other agency or entity. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStudentEducationOrganizationAssociations'] to see the possible values for this operation
     *
     * @throws \Resources\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of |\Resources\Model\EdFiStudentEducationOrganizationAssociation[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getStudentEducationOrganizationAssociationsWithHttpInfo($offset = null, $limit = 25, $page_token = null, $page_size = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $education_organization_id = null, $student_unique_id = null, $barrier_to_internet_access_in_residence_descriptor = null, $internet_access_type_in_residence_descriptor = null, $internet_performance_in_residence_descriptor = null, $limited_english_proficiency_descriptor = null, $primary_learning_device_access_descriptor = null, $primary_learning_device_away_from_school_descriptor = null, $primary_learning_device_provider_descriptor = null, $sex_descriptor = null, $supporter_military_connection_descriptor = null, $gender_identity = null, $hispanic_latino_ethnicity = null, $id = null, $internet_access_in_residence = null, $login_id = null, $profile_thumbnail = null, $use_snapshot = false, $student_identification_system_descriptor = null, $assigning_organization_identification_code = null, $identification_code = null, string $contentType = self::contentTypes['getStudentEducationOrganizationAssociations'][0])
    {
        $request = $this->getStudentEducationOrganizationAssociationsRequest($offset, $limit, $page_token, $page_size, $min_change_version, $max_change_version, $total_count, $education_organization_id, $student_unique_id, $barrier_to_internet_access_in_residence_descriptor, $internet_access_type_in_residence_descriptor, $internet_performance_in_residence_descriptor, $limited_english_proficiency_descriptor, $primary_learning_device_access_descriptor, $primary_learning_device_away_from_school_descriptor, $primary_learning_device_provider_descriptor, $sex_descriptor, $supporter_military_connection_descriptor, $gender_identity, $hispanic_latino_ethnicity, $id, $internet_access_in_residence, $login_id, $profile_thumbnail, $use_snapshot, $student_identification_system_descriptor, $assigning_organization_identification_code, $identification_code, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Resources\Model\EdFiStudentEducationOrganizationAssociation[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Resources\Model\EdFiStudentEducationOrganizationAssociation[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Resources\Model\EdFiStudentEducationOrganizationAssociation[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Resources\Model\EdFiStudentEducationOrganizationAssociation[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Resources\Model\EdFiStudentEducationOrganizationAssociation[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getStudentEducationOrganizationAssociationsAsync
     *
     * Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  string $page_token The token of the page to retrieve, obtained either from the \&quot;Next-Page-Token\&quot; header of the previous request, or from the \&quot;partitions\&quot; endpoint for the resource. Cannot be used with limit/offset paging. (optional)
     * @param  int $page_size The maximum number of items to retrieve in the page. For use with pageToken (cursor paging) only. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)
     * @param  int $education_organization_id The identifier assigned to an education organization. (optional)
     * @param  string $student_unique_id A unique alphanumeric code assigned to a student. (optional)
     * @param  string $barrier_to_internet_access_in_residence_descriptor An indication of the barrier to having internet access in the student s primary place of residence. (optional)
     * @param  string $internet_access_type_in_residence_descriptor The primary type of internet service used in the student s primary place of residence. (optional)
     * @param  string $internet_performance_in_residence_descriptor An indication of whether the student can complete the full range of learning activities, including video streaming and assignment upload, without interruptions caused by poor internet performance in their primary place of residence. (optional)
     * @param  string $limited_english_proficiency_descriptor An indication that the student has been identified as limited English proficient by the Language Proficiency Assessment Committee (LPAC), or English proficient. (optional)
     * @param  string $primary_learning_device_access_descriptor An indication of whether the primary learning device is shared or not shared with another individual. (optional)
     * @param  string $primary_learning_device_away_from_school_descriptor The type of device the student uses most often to complete learning activities away from school. (optional)
     * @param  string $primary_learning_device_provider_descriptor The provider of the primary learning device. (optional)
     * @param  string $sex_descriptor The student&#39;s birth sex as reported to the education organization. (optional)
     * @param  string $supporter_military_connection_descriptor Military connection of the person/people whom the student is a dependent of. (optional)
     * @param  string $gender_identity The student&#39;s gender as last reported to the education organization. (optional)
     * @param  bool $hispanic_latino_ethnicity An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race, as last reported to the education organization. The term, \&quot;Spanish origin,\&quot; can be used in addition to \&quot;Hispanic or Latino.\&quot; (optional)
     * @param  string $id  (optional)
     * @param  bool $internet_access_in_residence An indication of whether the student is able to access the internet in their primary place of residence. (optional)
     * @param  string $login_id The login ID for the user; used for security access control interface. (optional)
     * @param  string $profile_thumbnail Locator reference for the student photo. The specification for that reference is left to local definition. (optional)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     * @param  string $student_identification_system_descriptor A coding scheme that is used for identification and record-keeping purposes by schools, social services, or other agencies to refer to a student. (optional)
     * @param  string $assigning_organization_identification_code The organization code or name assigning the StudentIdentificationCode. (optional)
     * @param  string $identification_code A unique number or alphanumeric code assigned to a student by a school, school system, a state, or other agency or entity. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStudentEducationOrganizationAssociations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getStudentEducationOrganizationAssociationsAsync($offset = null, $limit = 25, $page_token = null, $page_size = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $education_organization_id = null, $student_unique_id = null, $barrier_to_internet_access_in_residence_descriptor = null, $internet_access_type_in_residence_descriptor = null, $internet_performance_in_residence_descriptor = null, $limited_english_proficiency_descriptor = null, $primary_learning_device_access_descriptor = null, $primary_learning_device_away_from_school_descriptor = null, $primary_learning_device_provider_descriptor = null, $sex_descriptor = null, $supporter_military_connection_descriptor = null, $gender_identity = null, $hispanic_latino_ethnicity = null, $id = null, $internet_access_in_residence = null, $login_id = null, $profile_thumbnail = null, $use_snapshot = false, $student_identification_system_descriptor = null, $assigning_organization_identification_code = null, $identification_code = null, string $contentType = self::contentTypes['getStudentEducationOrganizationAssociations'][0])
    {
        return $this->getStudentEducationOrganizationAssociationsAsyncWithHttpInfo($offset, $limit, $page_token, $page_size, $min_change_version, $max_change_version, $total_count, $education_organization_id, $student_unique_id, $barrier_to_internet_access_in_residence_descriptor, $internet_access_type_in_residence_descriptor, $internet_performance_in_residence_descriptor, $limited_english_proficiency_descriptor, $primary_learning_device_access_descriptor, $primary_learning_device_away_from_school_descriptor, $primary_learning_device_provider_descriptor, $sex_descriptor, $supporter_military_connection_descriptor, $gender_identity, $hispanic_latino_ethnicity, $id, $internet_access_in_residence, $login_id, $profile_thumbnail, $use_snapshot, $student_identification_system_descriptor, $assigning_organization_identification_code, $identification_code, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getStudentEducationOrganizationAssociationsAsyncWithHttpInfo
     *
     * Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  string $page_token The token of the page to retrieve, obtained either from the \&quot;Next-Page-Token\&quot; header of the previous request, or from the \&quot;partitions\&quot; endpoint for the resource. Cannot be used with limit/offset paging. (optional)
     * @param  int $page_size The maximum number of items to retrieve in the page. For use with pageToken (cursor paging) only. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)
     * @param  int $education_organization_id The identifier assigned to an education organization. (optional)
     * @param  string $student_unique_id A unique alphanumeric code assigned to a student. (optional)
     * @param  string $barrier_to_internet_access_in_residence_descriptor An indication of the barrier to having internet access in the student s primary place of residence. (optional)
     * @param  string $internet_access_type_in_residence_descriptor The primary type of internet service used in the student s primary place of residence. (optional)
     * @param  string $internet_performance_in_residence_descriptor An indication of whether the student can complete the full range of learning activities, including video streaming and assignment upload, without interruptions caused by poor internet performance in their primary place of residence. (optional)
     * @param  string $limited_english_proficiency_descriptor An indication that the student has been identified as limited English proficient by the Language Proficiency Assessment Committee (LPAC), or English proficient. (optional)
     * @param  string $primary_learning_device_access_descriptor An indication of whether the primary learning device is shared or not shared with another individual. (optional)
     * @param  string $primary_learning_device_away_from_school_descriptor The type of device the student uses most often to complete learning activities away from school. (optional)
     * @param  string $primary_learning_device_provider_descriptor The provider of the primary learning device. (optional)
     * @param  string $sex_descriptor The student&#39;s birth sex as reported to the education organization. (optional)
     * @param  string $supporter_military_connection_descriptor Military connection of the person/people whom the student is a dependent of. (optional)
     * @param  string $gender_identity The student&#39;s gender as last reported to the education organization. (optional)
     * @param  bool $hispanic_latino_ethnicity An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race, as last reported to the education organization. The term, \&quot;Spanish origin,\&quot; can be used in addition to \&quot;Hispanic or Latino.\&quot; (optional)
     * @param  string $id  (optional)
     * @param  bool $internet_access_in_residence An indication of whether the student is able to access the internet in their primary place of residence. (optional)
     * @param  string $login_id The login ID for the user; used for security access control interface. (optional)
     * @param  string $profile_thumbnail Locator reference for the student photo. The specification for that reference is left to local definition. (optional)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     * @param  string $student_identification_system_descriptor A coding scheme that is used for identification and record-keeping purposes by schools, social services, or other agencies to refer to a student. (optional)
     * @param  string $assigning_organization_identification_code The organization code or name assigning the StudentIdentificationCode. (optional)
     * @param  string $identification_code A unique number or alphanumeric code assigned to a student by a school, school system, a state, or other agency or entity. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStudentEducationOrganizationAssociations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getStudentEducationOrganizationAssociationsAsyncWithHttpInfo($offset = null, $limit = 25, $page_token = null, $page_size = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $education_organization_id = null, $student_unique_id = null, $barrier_to_internet_access_in_residence_descriptor = null, $internet_access_type_in_residence_descriptor = null, $internet_performance_in_residence_descriptor = null, $limited_english_proficiency_descriptor = null, $primary_learning_device_access_descriptor = null, $primary_learning_device_away_from_school_descriptor = null, $primary_learning_device_provider_descriptor = null, $sex_descriptor = null, $supporter_military_connection_descriptor = null, $gender_identity = null, $hispanic_latino_ethnicity = null, $id = null, $internet_access_in_residence = null, $login_id = null, $profile_thumbnail = null, $use_snapshot = false, $student_identification_system_descriptor = null, $assigning_organization_identification_code = null, $identification_code = null, string $contentType = self::contentTypes['getStudentEducationOrganizationAssociations'][0])
    {
        $returnType = '\Resources\Model\EdFiStudentEducationOrganizationAssociation[]';
        $request = $this->getStudentEducationOrganizationAssociationsRequest($offset, $limit, $page_token, $page_size, $min_change_version, $max_change_version, $total_count, $education_organization_id, $student_unique_id, $barrier_to_internet_access_in_residence_descriptor, $internet_access_type_in_residence_descriptor, $internet_performance_in_residence_descriptor, $limited_english_proficiency_descriptor, $primary_learning_device_access_descriptor, $primary_learning_device_away_from_school_descriptor, $primary_learning_device_provider_descriptor, $sex_descriptor, $supporter_military_connection_descriptor, $gender_identity, $hispanic_latino_ethnicity, $id, $internet_access_in_residence, $login_id, $profile_thumbnail, $use_snapshot, $student_identification_system_descriptor, $assigning_organization_identification_code, $identification_code, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getStudentEducationOrganizationAssociations'
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  string $page_token The token of the page to retrieve, obtained either from the \&quot;Next-Page-Token\&quot; header of the previous request, or from the \&quot;partitions\&quot; endpoint for the resource. Cannot be used with limit/offset paging. (optional)
     * @param  int $page_size The maximum number of items to retrieve in the page. For use with pageToken (cursor paging) only. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)
     * @param  int $education_organization_id The identifier assigned to an education organization. (optional)
     * @param  string $student_unique_id A unique alphanumeric code assigned to a student. (optional)
     * @param  string $barrier_to_internet_access_in_residence_descriptor An indication of the barrier to having internet access in the student s primary place of residence. (optional)
     * @param  string $internet_access_type_in_residence_descriptor The primary type of internet service used in the student s primary place of residence. (optional)
     * @param  string $internet_performance_in_residence_descriptor An indication of whether the student can complete the full range of learning activities, including video streaming and assignment upload, without interruptions caused by poor internet performance in their primary place of residence. (optional)
     * @param  string $limited_english_proficiency_descriptor An indication that the student has been identified as limited English proficient by the Language Proficiency Assessment Committee (LPAC), or English proficient. (optional)
     * @param  string $primary_learning_device_access_descriptor An indication of whether the primary learning device is shared or not shared with another individual. (optional)
     * @param  string $primary_learning_device_away_from_school_descriptor The type of device the student uses most often to complete learning activities away from school. (optional)
     * @param  string $primary_learning_device_provider_descriptor The provider of the primary learning device. (optional)
     * @param  string $sex_descriptor The student&#39;s birth sex as reported to the education organization. (optional)
     * @param  string $supporter_military_connection_descriptor Military connection of the person/people whom the student is a dependent of. (optional)
     * @param  string $gender_identity The student&#39;s gender as last reported to the education organization. (optional)
     * @param  bool $hispanic_latino_ethnicity An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race, as last reported to the education organization. The term, \&quot;Spanish origin,\&quot; can be used in addition to \&quot;Hispanic or Latino.\&quot; (optional)
     * @param  string $id  (optional)
     * @param  bool $internet_access_in_residence An indication of whether the student is able to access the internet in their primary place of residence. (optional)
     * @param  string $login_id The login ID for the user; used for security access control interface. (optional)
     * @param  string $profile_thumbnail Locator reference for the student photo. The specification for that reference is left to local definition. (optional)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     * @param  string $student_identification_system_descriptor A coding scheme that is used for identification and record-keeping purposes by schools, social services, or other agencies to refer to a student. (optional)
     * @param  string $assigning_organization_identification_code The organization code or name assigning the StudentIdentificationCode. (optional)
     * @param  string $identification_code A unique number or alphanumeric code assigned to a student by a school, school system, a state, or other agency or entity. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStudentEducationOrganizationAssociations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getStudentEducationOrganizationAssociationsRequest($offset = null, $limit = 25, $page_token = null, $page_size = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $education_organization_id = null, $student_unique_id = null, $barrier_to_internet_access_in_residence_descriptor = null, $internet_access_type_in_residence_descriptor = null, $internet_performance_in_residence_descriptor = null, $limited_english_proficiency_descriptor = null, $primary_learning_device_access_descriptor = null, $primary_learning_device_away_from_school_descriptor = null, $primary_learning_device_provider_descriptor = null, $sex_descriptor = null, $supporter_military_connection_descriptor = null, $gender_identity = null, $hispanic_latino_ethnicity = null, $id = null, $internet_access_in_residence = null, $login_id = null, $profile_thumbnail = null, $use_snapshot = false, $student_identification_system_descriptor = null, $assigning_organization_identification_code = null, $identification_code = null, string $contentType = self::contentTypes['getStudentEducationOrganizationAssociations'][0])
    {


        if ($limit !== null && $limit > 500) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling StudentEducationOrganizationAssociationsApi.getStudentEducationOrganizationAssociations, must be smaller than or equal to 500.');
        }
        if ($limit !== null && $limit < 0) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling StudentEducationOrganizationAssociationsApi.getStudentEducationOrganizationAssociations, must be bigger than or equal to 0.');
        }
        

        if ($page_size !== null && $page_size < 0) {
            throw new \InvalidArgumentException('invalid value for "$page_size" when calling StudentEducationOrganizationAssociationsApi.getStudentEducationOrganizationAssociations, must be bigger than or equal to 0.');
        }
        




        if ($student_unique_id !== null && strlen($student_unique_id) > 32) {
            throw new \InvalidArgumentException('invalid length for "$student_unique_id" when calling StudentEducationOrganizationAssociationsApi.getStudentEducationOrganizationAssociations, must be smaller than or equal to 32.');
        }
        
        if ($barrier_to_internet_access_in_residence_descriptor !== null && strlen($barrier_to_internet_access_in_residence_descriptor) > 306) {
            throw new \InvalidArgumentException('invalid length for "$barrier_to_internet_access_in_residence_descriptor" when calling StudentEducationOrganizationAssociationsApi.getStudentEducationOrganizationAssociations, must be smaller than or equal to 306.');
        }
        
        if ($internet_access_type_in_residence_descriptor !== null && strlen($internet_access_type_in_residence_descriptor) > 306) {
            throw new \InvalidArgumentException('invalid length for "$internet_access_type_in_residence_descriptor" when calling StudentEducationOrganizationAssociationsApi.getStudentEducationOrganizationAssociations, must be smaller than or equal to 306.');
        }
        
        if ($internet_performance_in_residence_descriptor !== null && strlen($internet_performance_in_residence_descriptor) > 306) {
            throw new \InvalidArgumentException('invalid length for "$internet_performance_in_residence_descriptor" when calling StudentEducationOrganizationAssociationsApi.getStudentEducationOrganizationAssociations, must be smaller than or equal to 306.');
        }
        
        if ($limited_english_proficiency_descriptor !== null && strlen($limited_english_proficiency_descriptor) > 306) {
            throw new \InvalidArgumentException('invalid length for "$limited_english_proficiency_descriptor" when calling StudentEducationOrganizationAssociationsApi.getStudentEducationOrganizationAssociations, must be smaller than or equal to 306.');
        }
        
        if ($primary_learning_device_access_descriptor !== null && strlen($primary_learning_device_access_descriptor) > 306) {
            throw new \InvalidArgumentException('invalid length for "$primary_learning_device_access_descriptor" when calling StudentEducationOrganizationAssociationsApi.getStudentEducationOrganizationAssociations, must be smaller than or equal to 306.');
        }
        
        if ($primary_learning_device_away_from_school_descriptor !== null && strlen($primary_learning_device_away_from_school_descriptor) > 306) {
            throw new \InvalidArgumentException('invalid length for "$primary_learning_device_away_from_school_descriptor" when calling StudentEducationOrganizationAssociationsApi.getStudentEducationOrganizationAssociations, must be smaller than or equal to 306.');
        }
        
        if ($primary_learning_device_provider_descriptor !== null && strlen($primary_learning_device_provider_descriptor) > 306) {
            throw new \InvalidArgumentException('invalid length for "$primary_learning_device_provider_descriptor" when calling StudentEducationOrganizationAssociationsApi.getStudentEducationOrganizationAssociations, must be smaller than or equal to 306.');
        }
        
        if ($sex_descriptor !== null && strlen($sex_descriptor) > 306) {
            throw new \InvalidArgumentException('invalid length for "$sex_descriptor" when calling StudentEducationOrganizationAssociationsApi.getStudentEducationOrganizationAssociations, must be smaller than or equal to 306.');
        }
        
        if ($supporter_military_connection_descriptor !== null && strlen($supporter_military_connection_descriptor) > 306) {
            throw new \InvalidArgumentException('invalid length for "$supporter_military_connection_descriptor" when calling StudentEducationOrganizationAssociationsApi.getStudentEducationOrganizationAssociations, must be smaller than or equal to 306.');
        }
        
        if ($gender_identity !== null && strlen($gender_identity) > 60) {
            throw new \InvalidArgumentException('invalid length for "$gender_identity" when calling StudentEducationOrganizationAssociationsApi.getStudentEducationOrganizationAssociations, must be smaller than or equal to 60.');
        }
        



        if ($login_id !== null && strlen($login_id) > 60) {
            throw new \InvalidArgumentException('invalid length for "$login_id" when calling StudentEducationOrganizationAssociationsApi.getStudentEducationOrganizationAssociations, must be smaller than or equal to 60.');
        }
        
        if ($profile_thumbnail !== null && strlen($profile_thumbnail) > 255) {
            throw new \InvalidArgumentException('invalid length for "$profile_thumbnail" when calling StudentEducationOrganizationAssociationsApi.getStudentEducationOrganizationAssociations, must be smaller than or equal to 255.');
        }
        

        if ($student_identification_system_descriptor !== null && strlen($student_identification_system_descriptor) > 306) {
            throw new \InvalidArgumentException('invalid length for "$student_identification_system_descriptor" when calling StudentEducationOrganizationAssociationsApi.getStudentEducationOrganizationAssociations, must be smaller than or equal to 306.');
        }
        
        if ($assigning_organization_identification_code !== null && strlen($assigning_organization_identification_code) > 60) {
            throw new \InvalidArgumentException('invalid length for "$assigning_organization_identification_code" when calling StudentEducationOrganizationAssociationsApi.getStudentEducationOrganizationAssociations, must be smaller than or equal to 60.');
        }
        
        if ($identification_code !== null && strlen($identification_code) > 60) {
            throw new \InvalidArgumentException('invalid length for "$identification_code" when calling StudentEducationOrganizationAssociationsApi.getStudentEducationOrganizationAssociations, must be smaller than or equal to 60.');
        }
        

        $resourcePath = '/ed-fi/studentEducationOrganizationAssociations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_token,
            'pageToken', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'pageSize', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_change_version,
            'minChangeVersion', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_change_version,
            'maxChangeVersion', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $total_count,
            'totalCount', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $education_organization_id,
            'educationOrganizationId', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $student_unique_id,
            'studentUniqueId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $barrier_to_internet_access_in_residence_descriptor,
            'barrierToInternetAccessInResidenceDescriptor', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $internet_access_type_in_residence_descriptor,
            'internetAccessTypeInResidenceDescriptor', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $internet_performance_in_residence_descriptor,
            'internetPerformanceInResidenceDescriptor', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limited_english_proficiency_descriptor,
            'limitedEnglishProficiencyDescriptor', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $primary_learning_device_access_descriptor,
            'primaryLearningDeviceAccessDescriptor', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $primary_learning_device_away_from_school_descriptor,
            'primaryLearningDeviceAwayFromSchoolDescriptor', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $primary_learning_device_provider_descriptor,
            'primaryLearningDeviceProviderDescriptor', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sex_descriptor,
            'sexDescriptor', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $supporter_military_connection_descriptor,
            'supporterMilitaryConnectionDescriptor', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $gender_identity,
            'genderIdentity', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $hispanic_latino_ethnicity,
            'hispanicLatinoEthnicity', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id,
            'id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $internet_access_in_residence,
            'internetAccessInResidence', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $login_id,
            'loginId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $profile_thumbnail,
            'profileThumbnail', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $student_identification_system_descriptor,
            'studentIdentificationSystemDescriptor', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $assigning_organization_identification_code,
            'assigningOrganizationIdentificationCode', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $identification_code,
            'identificationCode', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($use_snapshot !== null) {
            $headerParams['Use-Snapshot'] = ObjectSerializer::toHeaderValue($use_snapshot);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getStudentEducationOrganizationAssociationsById
     *
     * Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  string $if_none_match The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStudentEducationOrganizationAssociationsById'] to see the possible values for this operation
     *
     * @throws \Resources\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return |\Resources\Model\EdFiStudentEducationOrganizationAssociation
     */
    public function getStudentEducationOrganizationAssociationsById($id, $if_none_match = null, $use_snapshot = false, string $contentType = self::contentTypes['getStudentEducationOrganizationAssociationsById'][0])
    {
        list($response) = $this->getStudentEducationOrganizationAssociationsByIdWithHttpInfo($id, $if_none_match, $use_snapshot, $contentType);
        return $response;
    }

    /**
     * Operation getStudentEducationOrganizationAssociationsByIdWithHttpInfo
     *
     * Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  string $if_none_match The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStudentEducationOrganizationAssociationsById'] to see the possible values for this operation
     *
     * @throws \Resources\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of |\Resources\Model\EdFiStudentEducationOrganizationAssociation, HTTP status code, HTTP response headers (array of strings)
     */
    public function getStudentEducationOrganizationAssociationsByIdWithHttpInfo($id, $if_none_match = null, $use_snapshot = false, string $contentType = self::contentTypes['getStudentEducationOrganizationAssociationsById'][0])
    {
        $request = $this->getStudentEducationOrganizationAssociationsByIdRequest($id, $if_none_match, $use_snapshot, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Resources\Model\EdFiStudentEducationOrganizationAssociation' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Resources\Model\EdFiStudentEducationOrganizationAssociation' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Resources\Model\EdFiStudentEducationOrganizationAssociation', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Resources\Model\EdFiStudentEducationOrganizationAssociation';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Resources\Model\EdFiStudentEducationOrganizationAssociation',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getStudentEducationOrganizationAssociationsByIdAsync
     *
     * Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  string $if_none_match The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStudentEducationOrganizationAssociationsById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getStudentEducationOrganizationAssociationsByIdAsync($id, $if_none_match = null, $use_snapshot = false, string $contentType = self::contentTypes['getStudentEducationOrganizationAssociationsById'][0])
    {
        return $this->getStudentEducationOrganizationAssociationsByIdAsyncWithHttpInfo($id, $if_none_match, $use_snapshot, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getStudentEducationOrganizationAssociationsByIdAsyncWithHttpInfo
     *
     * Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  string $if_none_match The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStudentEducationOrganizationAssociationsById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getStudentEducationOrganizationAssociationsByIdAsyncWithHttpInfo($id, $if_none_match = null, $use_snapshot = false, string $contentType = self::contentTypes['getStudentEducationOrganizationAssociationsById'][0])
    {
        $returnType = '\Resources\Model\EdFiStudentEducationOrganizationAssociation';
        $request = $this->getStudentEducationOrganizationAssociationsByIdRequest($id, $if_none_match, $use_snapshot, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getStudentEducationOrganizationAssociationsById'
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  string $if_none_match The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStudentEducationOrganizationAssociationsById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getStudentEducationOrganizationAssociationsByIdRequest($id, $if_none_match = null, $use_snapshot = false, string $contentType = self::contentTypes['getStudentEducationOrganizationAssociationsById'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getStudentEducationOrganizationAssociationsById'
            );
        }




        $resourcePath = '/ed-fi/studentEducationOrganizationAssociations/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }
        // header params
        if ($use_snapshot !== null) {
            $headerParams['Use-Snapshot'] = ObjectSerializer::toHeaderValue($use_snapshot);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getStudentEducationOrganizationAssociationsPartitions
     *
     * Retrieves a set of page tokens to be used for efficient client-side parallel processing.
     *
     * @param  int $number The number of evenly distributed partitions to provide for client-side parallel processing. If unspecified, a reasonable set of partitions will be determined based on the total number of accessible items. (optional)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  int $education_organization_id The identifier assigned to an education organization. (optional)
     * @param  string $student_unique_id A unique alphanumeric code assigned to a student. (optional)
     * @param  string $barrier_to_internet_access_in_residence_descriptor An indication of the barrier to having internet access in the student s primary place of residence. (optional)
     * @param  string $internet_access_type_in_residence_descriptor The primary type of internet service used in the student s primary place of residence. (optional)
     * @param  string $internet_performance_in_residence_descriptor An indication of whether the student can complete the full range of learning activities, including video streaming and assignment upload, without interruptions caused by poor internet performance in their primary place of residence. (optional)
     * @param  string $limited_english_proficiency_descriptor An indication that the student has been identified as limited English proficient by the Language Proficiency Assessment Committee (LPAC), or English proficient. (optional)
     * @param  string $primary_learning_device_access_descriptor An indication of whether the primary learning device is shared or not shared with another individual. (optional)
     * @param  string $primary_learning_device_away_from_school_descriptor The type of device the student uses most often to complete learning activities away from school. (optional)
     * @param  string $primary_learning_device_provider_descriptor The provider of the primary learning device. (optional)
     * @param  string $sex_descriptor The student&#39;s birth sex as reported to the education organization. (optional)
     * @param  string $supporter_military_connection_descriptor Military connection of the person/people whom the student is a dependent of. (optional)
     * @param  string $gender_identity The student&#39;s gender as last reported to the education organization. (optional)
     * @param  bool $hispanic_latino_ethnicity An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race, as last reported to the education organization. The term, \&quot;Spanish origin,\&quot; can be used in addition to \&quot;Hispanic or Latino.\&quot; (optional)
     * @param  string $id  (optional)
     * @param  bool $internet_access_in_residence An indication of whether the student is able to access the internet in their primary place of residence. (optional)
     * @param  string $login_id The login ID for the user; used for security access control interface. (optional)
     * @param  string $profile_thumbnail Locator reference for the student photo. The specification for that reference is left to local definition. (optional)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     * @param  string $student_identification_system_descriptor A coding scheme that is used for identification and record-keeping purposes by schools, social services, or other agencies to refer to a student. (optional)
     * @param  string $assigning_organization_identification_code The organization code or name assigning the StudentIdentificationCode. (optional)
     * @param  string $identification_code A unique number or alphanumeric code assigned to a student by a school, school system, a state, or other agency or entity. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStudentEducationOrganizationAssociationsPartitions'] to see the possible values for this operation
     *
     * @throws \Resources\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return |\Resources\Model\GetAcademicWeeksPartitions200Response
     */
    public function getStudentEducationOrganizationAssociationsPartitions($number = null, $min_change_version = null, $max_change_version = null, $education_organization_id = null, $student_unique_id = null, $barrier_to_internet_access_in_residence_descriptor = null, $internet_access_type_in_residence_descriptor = null, $internet_performance_in_residence_descriptor = null, $limited_english_proficiency_descriptor = null, $primary_learning_device_access_descriptor = null, $primary_learning_device_away_from_school_descriptor = null, $primary_learning_device_provider_descriptor = null, $sex_descriptor = null, $supporter_military_connection_descriptor = null, $gender_identity = null, $hispanic_latino_ethnicity = null, $id = null, $internet_access_in_residence = null, $login_id = null, $profile_thumbnail = null, $use_snapshot = false, $student_identification_system_descriptor = null, $assigning_organization_identification_code = null, $identification_code = null, string $contentType = self::contentTypes['getStudentEducationOrganizationAssociationsPartitions'][0])
    {
        list($response) = $this->getStudentEducationOrganizationAssociationsPartitionsWithHttpInfo($number, $min_change_version, $max_change_version, $education_organization_id, $student_unique_id, $barrier_to_internet_access_in_residence_descriptor, $internet_access_type_in_residence_descriptor, $internet_performance_in_residence_descriptor, $limited_english_proficiency_descriptor, $primary_learning_device_access_descriptor, $primary_learning_device_away_from_school_descriptor, $primary_learning_device_provider_descriptor, $sex_descriptor, $supporter_military_connection_descriptor, $gender_identity, $hispanic_latino_ethnicity, $id, $internet_access_in_residence, $login_id, $profile_thumbnail, $use_snapshot, $student_identification_system_descriptor, $assigning_organization_identification_code, $identification_code, $contentType);
        return $response;
    }

    /**
     * Operation getStudentEducationOrganizationAssociationsPartitionsWithHttpInfo
     *
     * Retrieves a set of page tokens to be used for efficient client-side parallel processing.
     *
     * @param  int $number The number of evenly distributed partitions to provide for client-side parallel processing. If unspecified, a reasonable set of partitions will be determined based on the total number of accessible items. (optional)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  int $education_organization_id The identifier assigned to an education organization. (optional)
     * @param  string $student_unique_id A unique alphanumeric code assigned to a student. (optional)
     * @param  string $barrier_to_internet_access_in_residence_descriptor An indication of the barrier to having internet access in the student s primary place of residence. (optional)
     * @param  string $internet_access_type_in_residence_descriptor The primary type of internet service used in the student s primary place of residence. (optional)
     * @param  string $internet_performance_in_residence_descriptor An indication of whether the student can complete the full range of learning activities, including video streaming and assignment upload, without interruptions caused by poor internet performance in their primary place of residence. (optional)
     * @param  string $limited_english_proficiency_descriptor An indication that the student has been identified as limited English proficient by the Language Proficiency Assessment Committee (LPAC), or English proficient. (optional)
     * @param  string $primary_learning_device_access_descriptor An indication of whether the primary learning device is shared or not shared with another individual. (optional)
     * @param  string $primary_learning_device_away_from_school_descriptor The type of device the student uses most often to complete learning activities away from school. (optional)
     * @param  string $primary_learning_device_provider_descriptor The provider of the primary learning device. (optional)
     * @param  string $sex_descriptor The student&#39;s birth sex as reported to the education organization. (optional)
     * @param  string $supporter_military_connection_descriptor Military connection of the person/people whom the student is a dependent of. (optional)
     * @param  string $gender_identity The student&#39;s gender as last reported to the education organization. (optional)
     * @param  bool $hispanic_latino_ethnicity An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race, as last reported to the education organization. The term, \&quot;Spanish origin,\&quot; can be used in addition to \&quot;Hispanic or Latino.\&quot; (optional)
     * @param  string $id  (optional)
     * @param  bool $internet_access_in_residence An indication of whether the student is able to access the internet in their primary place of residence. (optional)
     * @param  string $login_id The login ID for the user; used for security access control interface. (optional)
     * @param  string $profile_thumbnail Locator reference for the student photo. The specification for that reference is left to local definition. (optional)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     * @param  string $student_identification_system_descriptor A coding scheme that is used for identification and record-keeping purposes by schools, social services, or other agencies to refer to a student. (optional)
     * @param  string $assigning_organization_identification_code The organization code or name assigning the StudentIdentificationCode. (optional)
     * @param  string $identification_code A unique number or alphanumeric code assigned to a student by a school, school system, a state, or other agency or entity. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStudentEducationOrganizationAssociationsPartitions'] to see the possible values for this operation
     *
     * @throws \Resources\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of |\Resources\Model\GetAcademicWeeksPartitions200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getStudentEducationOrganizationAssociationsPartitionsWithHttpInfo($number = null, $min_change_version = null, $max_change_version = null, $education_organization_id = null, $student_unique_id = null, $barrier_to_internet_access_in_residence_descriptor = null, $internet_access_type_in_residence_descriptor = null, $internet_performance_in_residence_descriptor = null, $limited_english_proficiency_descriptor = null, $primary_learning_device_access_descriptor = null, $primary_learning_device_away_from_school_descriptor = null, $primary_learning_device_provider_descriptor = null, $sex_descriptor = null, $supporter_military_connection_descriptor = null, $gender_identity = null, $hispanic_latino_ethnicity = null, $id = null, $internet_access_in_residence = null, $login_id = null, $profile_thumbnail = null, $use_snapshot = false, $student_identification_system_descriptor = null, $assigning_organization_identification_code = null, $identification_code = null, string $contentType = self::contentTypes['getStudentEducationOrganizationAssociationsPartitions'][0])
    {
        $request = $this->getStudentEducationOrganizationAssociationsPartitionsRequest($number, $min_change_version, $max_change_version, $education_organization_id, $student_unique_id, $barrier_to_internet_access_in_residence_descriptor, $internet_access_type_in_residence_descriptor, $internet_performance_in_residence_descriptor, $limited_english_proficiency_descriptor, $primary_learning_device_access_descriptor, $primary_learning_device_away_from_school_descriptor, $primary_learning_device_provider_descriptor, $sex_descriptor, $supporter_military_connection_descriptor, $gender_identity, $hispanic_latino_ethnicity, $id, $internet_access_in_residence, $login_id, $profile_thumbnail, $use_snapshot, $student_identification_system_descriptor, $assigning_organization_identification_code, $identification_code, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Resources\Model\GetAcademicWeeksPartitions200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Resources\Model\GetAcademicWeeksPartitions200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Resources\Model\GetAcademicWeeksPartitions200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Resources\Model\GetAcademicWeeksPartitions200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Resources\Model\GetAcademicWeeksPartitions200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getStudentEducationOrganizationAssociationsPartitionsAsync
     *
     * Retrieves a set of page tokens to be used for efficient client-side parallel processing.
     *
     * @param  int $number The number of evenly distributed partitions to provide for client-side parallel processing. If unspecified, a reasonable set of partitions will be determined based on the total number of accessible items. (optional)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  int $education_organization_id The identifier assigned to an education organization. (optional)
     * @param  string $student_unique_id A unique alphanumeric code assigned to a student. (optional)
     * @param  string $barrier_to_internet_access_in_residence_descriptor An indication of the barrier to having internet access in the student s primary place of residence. (optional)
     * @param  string $internet_access_type_in_residence_descriptor The primary type of internet service used in the student s primary place of residence. (optional)
     * @param  string $internet_performance_in_residence_descriptor An indication of whether the student can complete the full range of learning activities, including video streaming and assignment upload, without interruptions caused by poor internet performance in their primary place of residence. (optional)
     * @param  string $limited_english_proficiency_descriptor An indication that the student has been identified as limited English proficient by the Language Proficiency Assessment Committee (LPAC), or English proficient. (optional)
     * @param  string $primary_learning_device_access_descriptor An indication of whether the primary learning device is shared or not shared with another individual. (optional)
     * @param  string $primary_learning_device_away_from_school_descriptor The type of device the student uses most often to complete learning activities away from school. (optional)
     * @param  string $primary_learning_device_provider_descriptor The provider of the primary learning device. (optional)
     * @param  string $sex_descriptor The student&#39;s birth sex as reported to the education organization. (optional)
     * @param  string $supporter_military_connection_descriptor Military connection of the person/people whom the student is a dependent of. (optional)
     * @param  string $gender_identity The student&#39;s gender as last reported to the education organization. (optional)
     * @param  bool $hispanic_latino_ethnicity An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race, as last reported to the education organization. The term, \&quot;Spanish origin,\&quot; can be used in addition to \&quot;Hispanic or Latino.\&quot; (optional)
     * @param  string $id  (optional)
     * @param  bool $internet_access_in_residence An indication of whether the student is able to access the internet in their primary place of residence. (optional)
     * @param  string $login_id The login ID for the user; used for security access control interface. (optional)
     * @param  string $profile_thumbnail Locator reference for the student photo. The specification for that reference is left to local definition. (optional)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     * @param  string $student_identification_system_descriptor A coding scheme that is used for identification and record-keeping purposes by schools, social services, or other agencies to refer to a student. (optional)
     * @param  string $assigning_organization_identification_code The organization code or name assigning the StudentIdentificationCode. (optional)
     * @param  string $identification_code A unique number or alphanumeric code assigned to a student by a school, school system, a state, or other agency or entity. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStudentEducationOrganizationAssociationsPartitions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getStudentEducationOrganizationAssociationsPartitionsAsync($number = null, $min_change_version = null, $max_change_version = null, $education_organization_id = null, $student_unique_id = null, $barrier_to_internet_access_in_residence_descriptor = null, $internet_access_type_in_residence_descriptor = null, $internet_performance_in_residence_descriptor = null, $limited_english_proficiency_descriptor = null, $primary_learning_device_access_descriptor = null, $primary_learning_device_away_from_school_descriptor = null, $primary_learning_device_provider_descriptor = null, $sex_descriptor = null, $supporter_military_connection_descriptor = null, $gender_identity = null, $hispanic_latino_ethnicity = null, $id = null, $internet_access_in_residence = null, $login_id = null, $profile_thumbnail = null, $use_snapshot = false, $student_identification_system_descriptor = null, $assigning_organization_identification_code = null, $identification_code = null, string $contentType = self::contentTypes['getStudentEducationOrganizationAssociationsPartitions'][0])
    {
        return $this->getStudentEducationOrganizationAssociationsPartitionsAsyncWithHttpInfo($number, $min_change_version, $max_change_version, $education_organization_id, $student_unique_id, $barrier_to_internet_access_in_residence_descriptor, $internet_access_type_in_residence_descriptor, $internet_performance_in_residence_descriptor, $limited_english_proficiency_descriptor, $primary_learning_device_access_descriptor, $primary_learning_device_away_from_school_descriptor, $primary_learning_device_provider_descriptor, $sex_descriptor, $supporter_military_connection_descriptor, $gender_identity, $hispanic_latino_ethnicity, $id, $internet_access_in_residence, $login_id, $profile_thumbnail, $use_snapshot, $student_identification_system_descriptor, $assigning_organization_identification_code, $identification_code, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getStudentEducationOrganizationAssociationsPartitionsAsyncWithHttpInfo
     *
     * Retrieves a set of page tokens to be used for efficient client-side parallel processing.
     *
     * @param  int $number The number of evenly distributed partitions to provide for client-side parallel processing. If unspecified, a reasonable set of partitions will be determined based on the total number of accessible items. (optional)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  int $education_organization_id The identifier assigned to an education organization. (optional)
     * @param  string $student_unique_id A unique alphanumeric code assigned to a student. (optional)
     * @param  string $barrier_to_internet_access_in_residence_descriptor An indication of the barrier to having internet access in the student s primary place of residence. (optional)
     * @param  string $internet_access_type_in_residence_descriptor The primary type of internet service used in the student s primary place of residence. (optional)
     * @param  string $internet_performance_in_residence_descriptor An indication of whether the student can complete the full range of learning activities, including video streaming and assignment upload, without interruptions caused by poor internet performance in their primary place of residence. (optional)
     * @param  string $limited_english_proficiency_descriptor An indication that the student has been identified as limited English proficient by the Language Proficiency Assessment Committee (LPAC), or English proficient. (optional)
     * @param  string $primary_learning_device_access_descriptor An indication of whether the primary learning device is shared or not shared with another individual. (optional)
     * @param  string $primary_learning_device_away_from_school_descriptor The type of device the student uses most often to complete learning activities away from school. (optional)
     * @param  string $primary_learning_device_provider_descriptor The provider of the primary learning device. (optional)
     * @param  string $sex_descriptor The student&#39;s birth sex as reported to the education organization. (optional)
     * @param  string $supporter_military_connection_descriptor Military connection of the person/people whom the student is a dependent of. (optional)
     * @param  string $gender_identity The student&#39;s gender as last reported to the education organization. (optional)
     * @param  bool $hispanic_latino_ethnicity An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race, as last reported to the education organization. The term, \&quot;Spanish origin,\&quot; can be used in addition to \&quot;Hispanic or Latino.\&quot; (optional)
     * @param  string $id  (optional)
     * @param  bool $internet_access_in_residence An indication of whether the student is able to access the internet in their primary place of residence. (optional)
     * @param  string $login_id The login ID for the user; used for security access control interface. (optional)
     * @param  string $profile_thumbnail Locator reference for the student photo. The specification for that reference is left to local definition. (optional)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     * @param  string $student_identification_system_descriptor A coding scheme that is used for identification and record-keeping purposes by schools, social services, or other agencies to refer to a student. (optional)
     * @param  string $assigning_organization_identification_code The organization code or name assigning the StudentIdentificationCode. (optional)
     * @param  string $identification_code A unique number or alphanumeric code assigned to a student by a school, school system, a state, or other agency or entity. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStudentEducationOrganizationAssociationsPartitions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getStudentEducationOrganizationAssociationsPartitionsAsyncWithHttpInfo($number = null, $min_change_version = null, $max_change_version = null, $education_organization_id = null, $student_unique_id = null, $barrier_to_internet_access_in_residence_descriptor = null, $internet_access_type_in_residence_descriptor = null, $internet_performance_in_residence_descriptor = null, $limited_english_proficiency_descriptor = null, $primary_learning_device_access_descriptor = null, $primary_learning_device_away_from_school_descriptor = null, $primary_learning_device_provider_descriptor = null, $sex_descriptor = null, $supporter_military_connection_descriptor = null, $gender_identity = null, $hispanic_latino_ethnicity = null, $id = null, $internet_access_in_residence = null, $login_id = null, $profile_thumbnail = null, $use_snapshot = false, $student_identification_system_descriptor = null, $assigning_organization_identification_code = null, $identification_code = null, string $contentType = self::contentTypes['getStudentEducationOrganizationAssociationsPartitions'][0])
    {
        $returnType = '\Resources\Model\GetAcademicWeeksPartitions200Response';
        $request = $this->getStudentEducationOrganizationAssociationsPartitionsRequest($number, $min_change_version, $max_change_version, $education_organization_id, $student_unique_id, $barrier_to_internet_access_in_residence_descriptor, $internet_access_type_in_residence_descriptor, $internet_performance_in_residence_descriptor, $limited_english_proficiency_descriptor, $primary_learning_device_access_descriptor, $primary_learning_device_away_from_school_descriptor, $primary_learning_device_provider_descriptor, $sex_descriptor, $supporter_military_connection_descriptor, $gender_identity, $hispanic_latino_ethnicity, $id, $internet_access_in_residence, $login_id, $profile_thumbnail, $use_snapshot, $student_identification_system_descriptor, $assigning_organization_identification_code, $identification_code, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getStudentEducationOrganizationAssociationsPartitions'
     *
     * @param  int $number The number of evenly distributed partitions to provide for client-side parallel processing. If unspecified, a reasonable set of partitions will be determined based on the total number of accessible items. (optional)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  int $education_organization_id The identifier assigned to an education organization. (optional)
     * @param  string $student_unique_id A unique alphanumeric code assigned to a student. (optional)
     * @param  string $barrier_to_internet_access_in_residence_descriptor An indication of the barrier to having internet access in the student s primary place of residence. (optional)
     * @param  string $internet_access_type_in_residence_descriptor The primary type of internet service used in the student s primary place of residence. (optional)
     * @param  string $internet_performance_in_residence_descriptor An indication of whether the student can complete the full range of learning activities, including video streaming and assignment upload, without interruptions caused by poor internet performance in their primary place of residence. (optional)
     * @param  string $limited_english_proficiency_descriptor An indication that the student has been identified as limited English proficient by the Language Proficiency Assessment Committee (LPAC), or English proficient. (optional)
     * @param  string $primary_learning_device_access_descriptor An indication of whether the primary learning device is shared or not shared with another individual. (optional)
     * @param  string $primary_learning_device_away_from_school_descriptor The type of device the student uses most often to complete learning activities away from school. (optional)
     * @param  string $primary_learning_device_provider_descriptor The provider of the primary learning device. (optional)
     * @param  string $sex_descriptor The student&#39;s birth sex as reported to the education organization. (optional)
     * @param  string $supporter_military_connection_descriptor Military connection of the person/people whom the student is a dependent of. (optional)
     * @param  string $gender_identity The student&#39;s gender as last reported to the education organization. (optional)
     * @param  bool $hispanic_latino_ethnicity An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race, as last reported to the education organization. The term, \&quot;Spanish origin,\&quot; can be used in addition to \&quot;Hispanic or Latino.\&quot; (optional)
     * @param  string $id  (optional)
     * @param  bool $internet_access_in_residence An indication of whether the student is able to access the internet in their primary place of residence. (optional)
     * @param  string $login_id The login ID for the user; used for security access control interface. (optional)
     * @param  string $profile_thumbnail Locator reference for the student photo. The specification for that reference is left to local definition. (optional)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     * @param  string $student_identification_system_descriptor A coding scheme that is used for identification and record-keeping purposes by schools, social services, or other agencies to refer to a student. (optional)
     * @param  string $assigning_organization_identification_code The organization code or name assigning the StudentIdentificationCode. (optional)
     * @param  string $identification_code A unique number or alphanumeric code assigned to a student by a school, school system, a state, or other agency or entity. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStudentEducationOrganizationAssociationsPartitions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getStudentEducationOrganizationAssociationsPartitionsRequest($number = null, $min_change_version = null, $max_change_version = null, $education_organization_id = null, $student_unique_id = null, $barrier_to_internet_access_in_residence_descriptor = null, $internet_access_type_in_residence_descriptor = null, $internet_performance_in_residence_descriptor = null, $limited_english_proficiency_descriptor = null, $primary_learning_device_access_descriptor = null, $primary_learning_device_away_from_school_descriptor = null, $primary_learning_device_provider_descriptor = null, $sex_descriptor = null, $supporter_military_connection_descriptor = null, $gender_identity = null, $hispanic_latino_ethnicity = null, $id = null, $internet_access_in_residence = null, $login_id = null, $profile_thumbnail = null, $use_snapshot = false, $student_identification_system_descriptor = null, $assigning_organization_identification_code = null, $identification_code = null, string $contentType = self::contentTypes['getStudentEducationOrganizationAssociationsPartitions'][0])
    {

        if ($number !== null && $number > 200) {
            throw new \InvalidArgumentException('invalid value for "$number" when calling StudentEducationOrganizationAssociationsApi.getStudentEducationOrganizationAssociationsPartitions, must be smaller than or equal to 200.');
        }
        if ($number !== null && $number < 1) {
            throw new \InvalidArgumentException('invalid value for "$number" when calling StudentEducationOrganizationAssociationsApi.getStudentEducationOrganizationAssociationsPartitions, must be bigger than or equal to 1.');
        }
        



        if ($student_unique_id !== null && strlen($student_unique_id) > 32) {
            throw new \InvalidArgumentException('invalid length for "$student_unique_id" when calling StudentEducationOrganizationAssociationsApi.getStudentEducationOrganizationAssociationsPartitions, must be smaller than or equal to 32.');
        }
        
        if ($barrier_to_internet_access_in_residence_descriptor !== null && strlen($barrier_to_internet_access_in_residence_descriptor) > 306) {
            throw new \InvalidArgumentException('invalid length for "$barrier_to_internet_access_in_residence_descriptor" when calling StudentEducationOrganizationAssociationsApi.getStudentEducationOrganizationAssociationsPartitions, must be smaller than or equal to 306.');
        }
        
        if ($internet_access_type_in_residence_descriptor !== null && strlen($internet_access_type_in_residence_descriptor) > 306) {
            throw new \InvalidArgumentException('invalid length for "$internet_access_type_in_residence_descriptor" when calling StudentEducationOrganizationAssociationsApi.getStudentEducationOrganizationAssociationsPartitions, must be smaller than or equal to 306.');
        }
        
        if ($internet_performance_in_residence_descriptor !== null && strlen($internet_performance_in_residence_descriptor) > 306) {
            throw new \InvalidArgumentException('invalid length for "$internet_performance_in_residence_descriptor" when calling StudentEducationOrganizationAssociationsApi.getStudentEducationOrganizationAssociationsPartitions, must be smaller than or equal to 306.');
        }
        
        if ($limited_english_proficiency_descriptor !== null && strlen($limited_english_proficiency_descriptor) > 306) {
            throw new \InvalidArgumentException('invalid length for "$limited_english_proficiency_descriptor" when calling StudentEducationOrganizationAssociationsApi.getStudentEducationOrganizationAssociationsPartitions, must be smaller than or equal to 306.');
        }
        
        if ($primary_learning_device_access_descriptor !== null && strlen($primary_learning_device_access_descriptor) > 306) {
            throw new \InvalidArgumentException('invalid length for "$primary_learning_device_access_descriptor" when calling StudentEducationOrganizationAssociationsApi.getStudentEducationOrganizationAssociationsPartitions, must be smaller than or equal to 306.');
        }
        
        if ($primary_learning_device_away_from_school_descriptor !== null && strlen($primary_learning_device_away_from_school_descriptor) > 306) {
            throw new \InvalidArgumentException('invalid length for "$primary_learning_device_away_from_school_descriptor" when calling StudentEducationOrganizationAssociationsApi.getStudentEducationOrganizationAssociationsPartitions, must be smaller than or equal to 306.');
        }
        
        if ($primary_learning_device_provider_descriptor !== null && strlen($primary_learning_device_provider_descriptor) > 306) {
            throw new \InvalidArgumentException('invalid length for "$primary_learning_device_provider_descriptor" when calling StudentEducationOrganizationAssociationsApi.getStudentEducationOrganizationAssociationsPartitions, must be smaller than or equal to 306.');
        }
        
        if ($sex_descriptor !== null && strlen($sex_descriptor) > 306) {
            throw new \InvalidArgumentException('invalid length for "$sex_descriptor" when calling StudentEducationOrganizationAssociationsApi.getStudentEducationOrganizationAssociationsPartitions, must be smaller than or equal to 306.');
        }
        
        if ($supporter_military_connection_descriptor !== null && strlen($supporter_military_connection_descriptor) > 306) {
            throw new \InvalidArgumentException('invalid length for "$supporter_military_connection_descriptor" when calling StudentEducationOrganizationAssociationsApi.getStudentEducationOrganizationAssociationsPartitions, must be smaller than or equal to 306.');
        }
        
        if ($gender_identity !== null && strlen($gender_identity) > 60) {
            throw new \InvalidArgumentException('invalid length for "$gender_identity" when calling StudentEducationOrganizationAssociationsApi.getStudentEducationOrganizationAssociationsPartitions, must be smaller than or equal to 60.');
        }
        



        if ($login_id !== null && strlen($login_id) > 60) {
            throw new \InvalidArgumentException('invalid length for "$login_id" when calling StudentEducationOrganizationAssociationsApi.getStudentEducationOrganizationAssociationsPartitions, must be smaller than or equal to 60.');
        }
        
        if ($profile_thumbnail !== null && strlen($profile_thumbnail) > 255) {
            throw new \InvalidArgumentException('invalid length for "$profile_thumbnail" when calling StudentEducationOrganizationAssociationsApi.getStudentEducationOrganizationAssociationsPartitions, must be smaller than or equal to 255.');
        }
        

        if ($student_identification_system_descriptor !== null && strlen($student_identification_system_descriptor) > 306) {
            throw new \InvalidArgumentException('invalid length for "$student_identification_system_descriptor" when calling StudentEducationOrganizationAssociationsApi.getStudentEducationOrganizationAssociationsPartitions, must be smaller than or equal to 306.');
        }
        
        if ($assigning_organization_identification_code !== null && strlen($assigning_organization_identification_code) > 60) {
            throw new \InvalidArgumentException('invalid length for "$assigning_organization_identification_code" when calling StudentEducationOrganizationAssociationsApi.getStudentEducationOrganizationAssociationsPartitions, must be smaller than or equal to 60.');
        }
        
        if ($identification_code !== null && strlen($identification_code) > 60) {
            throw new \InvalidArgumentException('invalid length for "$identification_code" when calling StudentEducationOrganizationAssociationsApi.getStudentEducationOrganizationAssociationsPartitions, must be smaller than or equal to 60.');
        }
        

        $resourcePath = '/ed-fi/studentEducationOrganizationAssociations/partitions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $number,
            'number', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_change_version,
            'minChangeVersion', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_change_version,
            'maxChangeVersion', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $education_organization_id,
            'educationOrganizationId', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $student_unique_id,
            'studentUniqueId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $barrier_to_internet_access_in_residence_descriptor,
            'barrierToInternetAccessInResidenceDescriptor', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $internet_access_type_in_residence_descriptor,
            'internetAccessTypeInResidenceDescriptor', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $internet_performance_in_residence_descriptor,
            'internetPerformanceInResidenceDescriptor', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limited_english_proficiency_descriptor,
            'limitedEnglishProficiencyDescriptor', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $primary_learning_device_access_descriptor,
            'primaryLearningDeviceAccessDescriptor', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $primary_learning_device_away_from_school_descriptor,
            'primaryLearningDeviceAwayFromSchoolDescriptor', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $primary_learning_device_provider_descriptor,
            'primaryLearningDeviceProviderDescriptor', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sex_descriptor,
            'sexDescriptor', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $supporter_military_connection_descriptor,
            'supporterMilitaryConnectionDescriptor', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $gender_identity,
            'genderIdentity', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $hispanic_latino_ethnicity,
            'hispanicLatinoEthnicity', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id,
            'id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $internet_access_in_residence,
            'internetAccessInResidence', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $login_id,
            'loginId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $profile_thumbnail,
            'profileThumbnail', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $student_identification_system_descriptor,
            'studentIdentificationSystemDescriptor', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $assigning_organization_identification_code,
            'assigningOrganizationIdentificationCode', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $identification_code,
            'identificationCode', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($use_snapshot !== null) {
            $headerParams['Use-Snapshot'] = ObjectSerializer::toHeaderValue($use_snapshot);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation keyChangesStudentEducationOrganizationAssociations
     *
     * Retrieves resources key changes based on change version.
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['keyChangesStudentEducationOrganizationAssociations'] to see the possible values for this operation
     *
     * @throws \Resources\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return |\Resources\Model\TrackedChangesEdFiStudentEducationOrganizationAssociationKeyChange[]
     */
    public function keyChangesStudentEducationOrganizationAssociations($offset = null, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $use_snapshot = false, string $contentType = self::contentTypes['keyChangesStudentEducationOrganizationAssociations'][0])
    {
        list($response) = $this->keyChangesStudentEducationOrganizationAssociationsWithHttpInfo($offset, $limit, $min_change_version, $max_change_version, $total_count, $use_snapshot, $contentType);
        return $response;
    }

    /**
     * Operation keyChangesStudentEducationOrganizationAssociationsWithHttpInfo
     *
     * Retrieves resources key changes based on change version.
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['keyChangesStudentEducationOrganizationAssociations'] to see the possible values for this operation
     *
     * @throws \Resources\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of |\Resources\Model\TrackedChangesEdFiStudentEducationOrganizationAssociationKeyChange[], HTTP status code, HTTP response headers (array of strings)
     */
    public function keyChangesStudentEducationOrganizationAssociationsWithHttpInfo($offset = null, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $use_snapshot = false, string $contentType = self::contentTypes['keyChangesStudentEducationOrganizationAssociations'][0])
    {
        $request = $this->keyChangesStudentEducationOrganizationAssociationsRequest($offset, $limit, $min_change_version, $max_change_version, $total_count, $use_snapshot, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Resources\Model\TrackedChangesEdFiStudentEducationOrganizationAssociationKeyChange[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Resources\Model\TrackedChangesEdFiStudentEducationOrganizationAssociationKeyChange[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Resources\Model\TrackedChangesEdFiStudentEducationOrganizationAssociationKeyChange[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Resources\Model\TrackedChangesEdFiStudentEducationOrganizationAssociationKeyChange[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Resources\Model\TrackedChangesEdFiStudentEducationOrganizationAssociationKeyChange[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation keyChangesStudentEducationOrganizationAssociationsAsync
     *
     * Retrieves resources key changes based on change version.
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['keyChangesStudentEducationOrganizationAssociations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function keyChangesStudentEducationOrganizationAssociationsAsync($offset = null, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $use_snapshot = false, string $contentType = self::contentTypes['keyChangesStudentEducationOrganizationAssociations'][0])
    {
        return $this->keyChangesStudentEducationOrganizationAssociationsAsyncWithHttpInfo($offset, $limit, $min_change_version, $max_change_version, $total_count, $use_snapshot, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation keyChangesStudentEducationOrganizationAssociationsAsyncWithHttpInfo
     *
     * Retrieves resources key changes based on change version.
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['keyChangesStudentEducationOrganizationAssociations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function keyChangesStudentEducationOrganizationAssociationsAsyncWithHttpInfo($offset = null, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $use_snapshot = false, string $contentType = self::contentTypes['keyChangesStudentEducationOrganizationAssociations'][0])
    {
        $returnType = '\Resources\Model\TrackedChangesEdFiStudentEducationOrganizationAssociationKeyChange[]';
        $request = $this->keyChangesStudentEducationOrganizationAssociationsRequest($offset, $limit, $min_change_version, $max_change_version, $total_count, $use_snapshot, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'keyChangesStudentEducationOrganizationAssociations'
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['keyChangesStudentEducationOrganizationAssociations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function keyChangesStudentEducationOrganizationAssociationsRequest($offset = null, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $use_snapshot = false, string $contentType = self::contentTypes['keyChangesStudentEducationOrganizationAssociations'][0])
    {


        if ($limit !== null && $limit > 500) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling StudentEducationOrganizationAssociationsApi.keyChangesStudentEducationOrganizationAssociations, must be smaller than or equal to 500.');
        }
        if ($limit !== null && $limit < 0) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling StudentEducationOrganizationAssociationsApi.keyChangesStudentEducationOrganizationAssociations, must be bigger than or equal to 0.');
        }
        





        $resourcePath = '/ed-fi/studentEducationOrganizationAssociations/keyChanges';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_change_version,
            'minChangeVersion', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_change_version,
            'maxChangeVersion', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $total_count,
            'totalCount', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($use_snapshot !== null) {
            $headerParams['Use-Snapshot'] = ObjectSerializer::toHeaderValue($use_snapshot);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postStudentEducationOrganizationAssociation
     *
     * Creates or updates resources based on the natural key values of the supplied resource.
     *
     * @param  \Resources\Model\EdFiStudentEducationOrganizationAssociation $ed_fi_student_education_organization_association The JSON representation of the \&quot;studentEducationOrganizationAssociation\&quot; resource to be created or updated. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postStudentEducationOrganizationAssociation'] to see the possible values for this operation
     *
     * @throws \Resources\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function postStudentEducationOrganizationAssociation($ed_fi_student_education_organization_association, string $contentType = self::contentTypes['postStudentEducationOrganizationAssociation'][0])
    {
        $this->postStudentEducationOrganizationAssociationWithHttpInfo($ed_fi_student_education_organization_association, $contentType);
    }

    /**
     * Operation postStudentEducationOrganizationAssociationWithHttpInfo
     *
     * Creates or updates resources based on the natural key values of the supplied resource.
     *
     * @param  \Resources\Model\EdFiStudentEducationOrganizationAssociation $ed_fi_student_education_organization_association The JSON representation of the \&quot;studentEducationOrganizationAssociation\&quot; resource to be created or updated. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postStudentEducationOrganizationAssociation'] to see the possible values for this operation
     *
     * @throws \Resources\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function postStudentEducationOrganizationAssociationWithHttpInfo($ed_fi_student_education_organization_association, string $contentType = self::contentTypes['postStudentEducationOrganizationAssociation'][0])
    {
        $request = $this->postStudentEducationOrganizationAssociationRequest($ed_fi_student_education_organization_association, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation postStudentEducationOrganizationAssociationAsync
     *
     * Creates or updates resources based on the natural key values of the supplied resource.
     *
     * @param  \Resources\Model\EdFiStudentEducationOrganizationAssociation $ed_fi_student_education_organization_association The JSON representation of the \&quot;studentEducationOrganizationAssociation\&quot; resource to be created or updated. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postStudentEducationOrganizationAssociation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postStudentEducationOrganizationAssociationAsync($ed_fi_student_education_organization_association, string $contentType = self::contentTypes['postStudentEducationOrganizationAssociation'][0])
    {
        return $this->postStudentEducationOrganizationAssociationAsyncWithHttpInfo($ed_fi_student_education_organization_association, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postStudentEducationOrganizationAssociationAsyncWithHttpInfo
     *
     * Creates or updates resources based on the natural key values of the supplied resource.
     *
     * @param  \Resources\Model\EdFiStudentEducationOrganizationAssociation $ed_fi_student_education_organization_association The JSON representation of the \&quot;studentEducationOrganizationAssociation\&quot; resource to be created or updated. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postStudentEducationOrganizationAssociation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postStudentEducationOrganizationAssociationAsyncWithHttpInfo($ed_fi_student_education_organization_association, string $contentType = self::contentTypes['postStudentEducationOrganizationAssociation'][0])
    {
        $returnType = '';
        $request = $this->postStudentEducationOrganizationAssociationRequest($ed_fi_student_education_organization_association, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postStudentEducationOrganizationAssociation'
     *
     * @param  \Resources\Model\EdFiStudentEducationOrganizationAssociation $ed_fi_student_education_organization_association The JSON representation of the \&quot;studentEducationOrganizationAssociation\&quot; resource to be created or updated. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postStudentEducationOrganizationAssociation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postStudentEducationOrganizationAssociationRequest($ed_fi_student_education_organization_association, string $contentType = self::contentTypes['postStudentEducationOrganizationAssociation'][0])
    {

        // verify the required parameter 'ed_fi_student_education_organization_association' is set
        if ($ed_fi_student_education_organization_association === null || (is_array($ed_fi_student_education_organization_association) && count($ed_fi_student_education_organization_association) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ed_fi_student_education_organization_association when calling postStudentEducationOrganizationAssociation'
            );
        }


        $resourcePath = '/ed-fi/studentEducationOrganizationAssociations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($ed_fi_student_education_organization_association)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($ed_fi_student_education_organization_association));
            } else {
                $httpBody = $ed_fi_student_education_organization_association;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putStudentEducationOrganizationAssociation
     *
     * Updates a resource based on the resource identifier.
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  \Resources\Model\EdFiStudentEducationOrganizationAssociation $ed_fi_student_education_organization_association The JSON representation of the \&quot;studentEducationOrganizationAssociation\&quot; resource to be created or updated. (required)
     * @param  string $if_match The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putStudentEducationOrganizationAssociation'] to see the possible values for this operation
     *
     * @throws \Resources\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function putStudentEducationOrganizationAssociation($id, $ed_fi_student_education_organization_association, $if_match = null, string $contentType = self::contentTypes['putStudentEducationOrganizationAssociation'][0])
    {
        $this->putStudentEducationOrganizationAssociationWithHttpInfo($id, $ed_fi_student_education_organization_association, $if_match, $contentType);
    }

    /**
     * Operation putStudentEducationOrganizationAssociationWithHttpInfo
     *
     * Updates a resource based on the resource identifier.
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  \Resources\Model\EdFiStudentEducationOrganizationAssociation $ed_fi_student_education_organization_association The JSON representation of the \&quot;studentEducationOrganizationAssociation\&quot; resource to be created or updated. (required)
     * @param  string $if_match The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putStudentEducationOrganizationAssociation'] to see the possible values for this operation
     *
     * @throws \Resources\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function putStudentEducationOrganizationAssociationWithHttpInfo($id, $ed_fi_student_education_organization_association, $if_match = null, string $contentType = self::contentTypes['putStudentEducationOrganizationAssociation'][0])
    {
        $request = $this->putStudentEducationOrganizationAssociationRequest($id, $ed_fi_student_education_organization_association, $if_match, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation putStudentEducationOrganizationAssociationAsync
     *
     * Updates a resource based on the resource identifier.
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  \Resources\Model\EdFiStudentEducationOrganizationAssociation $ed_fi_student_education_organization_association The JSON representation of the \&quot;studentEducationOrganizationAssociation\&quot; resource to be created or updated. (required)
     * @param  string $if_match The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putStudentEducationOrganizationAssociation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putStudentEducationOrganizationAssociationAsync($id, $ed_fi_student_education_organization_association, $if_match = null, string $contentType = self::contentTypes['putStudentEducationOrganizationAssociation'][0])
    {
        return $this->putStudentEducationOrganizationAssociationAsyncWithHttpInfo($id, $ed_fi_student_education_organization_association, $if_match, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putStudentEducationOrganizationAssociationAsyncWithHttpInfo
     *
     * Updates a resource based on the resource identifier.
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  \Resources\Model\EdFiStudentEducationOrganizationAssociation $ed_fi_student_education_organization_association The JSON representation of the \&quot;studentEducationOrganizationAssociation\&quot; resource to be created or updated. (required)
     * @param  string $if_match The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putStudentEducationOrganizationAssociation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putStudentEducationOrganizationAssociationAsyncWithHttpInfo($id, $ed_fi_student_education_organization_association, $if_match = null, string $contentType = self::contentTypes['putStudentEducationOrganizationAssociation'][0])
    {
        $returnType = '';
        $request = $this->putStudentEducationOrganizationAssociationRequest($id, $ed_fi_student_education_organization_association, $if_match, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putStudentEducationOrganizationAssociation'
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  \Resources\Model\EdFiStudentEducationOrganizationAssociation $ed_fi_student_education_organization_association The JSON representation of the \&quot;studentEducationOrganizationAssociation\&quot; resource to be created or updated. (required)
     * @param  string $if_match The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putStudentEducationOrganizationAssociation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function putStudentEducationOrganizationAssociationRequest($id, $ed_fi_student_education_organization_association, $if_match = null, string $contentType = self::contentTypes['putStudentEducationOrganizationAssociation'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling putStudentEducationOrganizationAssociation'
            );
        }

        // verify the required parameter 'ed_fi_student_education_organization_association' is set
        if ($ed_fi_student_education_organization_association === null || (is_array($ed_fi_student_education_organization_association) && count($ed_fi_student_education_organization_association) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ed_fi_student_education_organization_association when calling putStudentEducationOrganizationAssociation'
            );
        }



        $resourcePath = '/ed-fi/studentEducationOrganizationAssociations/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($if_match !== null) {
            $headerParams['If-Match'] = ObjectSerializer::toHeaderValue($if_match);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($ed_fi_student_education_organization_association)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($ed_fi_student_education_organization_association));
            } else {
                $httpBody = $ed_fi_student_education_organization_association;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
