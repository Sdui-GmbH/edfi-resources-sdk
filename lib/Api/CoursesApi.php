<?php
/**
 * CoursesApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * CoursesApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CoursesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'deleteCourseById' => [
            'application/json',
        ],
        'deletesCourses' => [
            'application/json',
        ],
        'getCourses' => [
            'application/json',
        ],
        'getCoursesById' => [
            'application/json',
        ],
        'keyChangesCourses' => [
            'application/json',
        ],
        'postCourse' => [
            'application/json',
        ],
        'putCourse' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation deleteCourseById
     *
     * Deletes an existing resource using the resource identifier.
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  string $if_match The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCourseById'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteCourseById($id, $if_match = null, string $contentType = self::contentTypes['deleteCourseById'][0])
    {
        $this->deleteCourseByIdWithHttpInfo($id, $if_match, $contentType);
    }

    /**
     * Operation deleteCourseByIdWithHttpInfo
     *
     * Deletes an existing resource using the resource identifier.
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  string $if_match The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCourseById'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteCourseByIdWithHttpInfo($id, $if_match = null, string $contentType = self::contentTypes['deleteCourseById'][0])
    {
        $request = $this->deleteCourseByIdRequest($id, $if_match, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteCourseByIdAsync
     *
     * Deletes an existing resource using the resource identifier.
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  string $if_match The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCourseById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCourseByIdAsync($id, $if_match = null, string $contentType = self::contentTypes['deleteCourseById'][0])
    {
        return $this->deleteCourseByIdAsyncWithHttpInfo($id, $if_match, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteCourseByIdAsyncWithHttpInfo
     *
     * Deletes an existing resource using the resource identifier.
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  string $if_match The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCourseById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCourseByIdAsyncWithHttpInfo($id, $if_match = null, string $contentType = self::contentTypes['deleteCourseById'][0])
    {
        $returnType = '';
        $request = $this->deleteCourseByIdRequest($id, $if_match, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteCourseById'
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  string $if_match The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCourseById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteCourseByIdRequest($id, $if_match = null, string $contentType = self::contentTypes['deleteCourseById'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteCourseById'
            );
        }



        $resourcePath = '/ed-fi/courses/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($if_match !== null) {
            $headerParams['If-Match'] = ObjectSerializer::toHeaderValue($if_match);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deletesCourses
     *
     * Retrieves deleted resources based on change version.
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional, default to 0)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletesCourses'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\TrackedChangesEdFiCourseDelete[]
     */
    public function deletesCourses($offset = 0, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $use_snapshot = false, string $contentType = self::contentTypes['deletesCourses'][0])
    {
        list($response) = $this->deletesCoursesWithHttpInfo($offset, $limit, $min_change_version, $max_change_version, $total_count, $use_snapshot, $contentType);
        return $response;
    }

    /**
     * Operation deletesCoursesWithHttpInfo
     *
     * Retrieves deleted resources based on change version.
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional, default to 0)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletesCourses'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\TrackedChangesEdFiCourseDelete[], HTTP status code, HTTP response headers (array of strings)
     */
    public function deletesCoursesWithHttpInfo($offset = 0, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $use_snapshot = false, string $contentType = self::contentTypes['deletesCourses'][0])
    {
        $request = $this->deletesCoursesRequest($offset, $limit, $min_change_version, $max_change_version, $total_count, $use_snapshot, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\TrackedChangesEdFiCourseDelete[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\TrackedChangesEdFiCourseDelete[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\TrackedChangesEdFiCourseDelete[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\TrackedChangesEdFiCourseDelete[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\TrackedChangesEdFiCourseDelete[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deletesCoursesAsync
     *
     * Retrieves deleted resources based on change version.
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional, default to 0)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletesCourses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deletesCoursesAsync($offset = 0, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $use_snapshot = false, string $contentType = self::contentTypes['deletesCourses'][0])
    {
        return $this->deletesCoursesAsyncWithHttpInfo($offset, $limit, $min_change_version, $max_change_version, $total_count, $use_snapshot, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deletesCoursesAsyncWithHttpInfo
     *
     * Retrieves deleted resources based on change version.
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional, default to 0)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletesCourses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deletesCoursesAsyncWithHttpInfo($offset = 0, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $use_snapshot = false, string $contentType = self::contentTypes['deletesCourses'][0])
    {
        $returnType = '\OpenAPI\Client\Model\TrackedChangesEdFiCourseDelete[]';
        $request = $this->deletesCoursesRequest($offset, $limit, $min_change_version, $max_change_version, $total_count, $use_snapshot, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deletesCourses'
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional, default to 0)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletesCourses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deletesCoursesRequest($offset = 0, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $use_snapshot = false, string $contentType = self::contentTypes['deletesCourses'][0])
    {


        if ($limit !== null && $limit > 500) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling CoursesApi.deletesCourses, must be smaller than or equal to 500.');
        }
        if ($limit !== null && $limit < 0) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling CoursesApi.deletesCourses, must be bigger than or equal to 0.');
        }
        





        $resourcePath = '/ed-fi/courses/deletes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_change_version,
            'minChangeVersion', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_change_version,
            'maxChangeVersion', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $total_count,
            'totalCount', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($use_snapshot !== null) {
            $headerParams['Use-Snapshot'] = ObjectSerializer::toHeaderValue($use_snapshot);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCourses
     *
     * Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional, default to 0)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)
     * @param  string $course_code A unique alphanumeric code assigned to a course. (optional)
     * @param  int $education_organization_id The identifier assigned to an education organization. (optional)
     * @param  string $career_pathway_descriptor Indicates the career cluster or pathway the course is associated with as part of a CTE curriculum. (optional)
     * @param  string $course_defined_by_descriptor Specifies whether the course was defined by the SEA, LEA, School, or national organization. (optional)
     * @param  string $course_gpa_applicability_descriptor An indicator of whether or not the course being described is included in the computation of the student&#39;s grade point average, and if so, if it is weighted differently from regular courses. (optional)
     * @param  string $minimum_available_credit_type_descriptor The type of credits or units of value awarded for the completion of a course. (optional)
     * @param  string $maximum_available_credit_type_descriptor The type of credits or units of value awarded for the completion of a course. (optional)
     * @param  string $course_description A description of the content standards and goals covered in the course. Reference may be made to state or national content standards. (optional)
     * @param  string $course_title The descriptive name given to a course of study offered in a school or other institution or organization. In departmentalized classes at the elementary, secondary, and postsecondary levels (and for staff development activities), this refers to the name by which a course is identified (e.g., American History, English III). For elementary and other non-departmentalized classes, it refers to any portion of the instruction for which a grade or report is assigned (e.g., reading, composition, spelling, and language arts). (optional)
     * @param  \DateTime $date_course_adopted Date the course was adopted by the education agency. (optional)
     * @param  bool $high_school_course_requirement An indication that this course may satisfy high school graduation requirements in the course&#39;s subject area. (optional)
     * @param  string $id  (optional)
     * @param  int $max_completions_for_credit Designates how many times the course may be taken with credit received by the student. (optional)
     * @param  float $maximum_available_credit_conversion Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units. (optional)
     * @param  float $maximum_available_credits The value of credits or units of value awarded for the completion of a course. (optional)
     * @param  float $minimum_available_credit_conversion Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units. (optional)
     * @param  float $minimum_available_credits The value of credits or units of value awarded for the completion of a course. (optional)
     * @param  int $number_of_parts The number of parts identified for a course. (optional)
     * @param  int $time_required_for_completion The actual or estimated number of clock minutes required for class completion. This number is especially important for career and technical education classes and may represent (in minutes) the clock hour requirement of the class. (optional)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCourses'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\EdFiCourse[]
     */
    public function getCourses($offset = 0, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $course_code = null, $education_organization_id = null, $career_pathway_descriptor = null, $course_defined_by_descriptor = null, $course_gpa_applicability_descriptor = null, $minimum_available_credit_type_descriptor = null, $maximum_available_credit_type_descriptor = null, $course_description = null, $course_title = null, $date_course_adopted = null, $high_school_course_requirement = null, $id = null, $max_completions_for_credit = null, $maximum_available_credit_conversion = null, $maximum_available_credits = null, $minimum_available_credit_conversion = null, $minimum_available_credits = null, $number_of_parts = null, $time_required_for_completion = null, $use_snapshot = false, string $contentType = self::contentTypes['getCourses'][0])
    {
        list($response) = $this->getCoursesWithHttpInfo($offset, $limit, $min_change_version, $max_change_version, $total_count, $course_code, $education_organization_id, $career_pathway_descriptor, $course_defined_by_descriptor, $course_gpa_applicability_descriptor, $minimum_available_credit_type_descriptor, $maximum_available_credit_type_descriptor, $course_description, $course_title, $date_course_adopted, $high_school_course_requirement, $id, $max_completions_for_credit, $maximum_available_credit_conversion, $maximum_available_credits, $minimum_available_credit_conversion, $minimum_available_credits, $number_of_parts, $time_required_for_completion, $use_snapshot, $contentType);
        return $response;
    }

    /**
     * Operation getCoursesWithHttpInfo
     *
     * Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional, default to 0)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)
     * @param  string $course_code A unique alphanumeric code assigned to a course. (optional)
     * @param  int $education_organization_id The identifier assigned to an education organization. (optional)
     * @param  string $career_pathway_descriptor Indicates the career cluster or pathway the course is associated with as part of a CTE curriculum. (optional)
     * @param  string $course_defined_by_descriptor Specifies whether the course was defined by the SEA, LEA, School, or national organization. (optional)
     * @param  string $course_gpa_applicability_descriptor An indicator of whether or not the course being described is included in the computation of the student&#39;s grade point average, and if so, if it is weighted differently from regular courses. (optional)
     * @param  string $minimum_available_credit_type_descriptor The type of credits or units of value awarded for the completion of a course. (optional)
     * @param  string $maximum_available_credit_type_descriptor The type of credits or units of value awarded for the completion of a course. (optional)
     * @param  string $course_description A description of the content standards and goals covered in the course. Reference may be made to state or national content standards. (optional)
     * @param  string $course_title The descriptive name given to a course of study offered in a school or other institution or organization. In departmentalized classes at the elementary, secondary, and postsecondary levels (and for staff development activities), this refers to the name by which a course is identified (e.g., American History, English III). For elementary and other non-departmentalized classes, it refers to any portion of the instruction for which a grade or report is assigned (e.g., reading, composition, spelling, and language arts). (optional)
     * @param  \DateTime $date_course_adopted Date the course was adopted by the education agency. (optional)
     * @param  bool $high_school_course_requirement An indication that this course may satisfy high school graduation requirements in the course&#39;s subject area. (optional)
     * @param  string $id  (optional)
     * @param  int $max_completions_for_credit Designates how many times the course may be taken with credit received by the student. (optional)
     * @param  float $maximum_available_credit_conversion Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units. (optional)
     * @param  float $maximum_available_credits The value of credits or units of value awarded for the completion of a course. (optional)
     * @param  float $minimum_available_credit_conversion Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units. (optional)
     * @param  float $minimum_available_credits The value of credits or units of value awarded for the completion of a course. (optional)
     * @param  int $number_of_parts The number of parts identified for a course. (optional)
     * @param  int $time_required_for_completion The actual or estimated number of clock minutes required for class completion. This number is especially important for career and technical education classes and may represent (in minutes) the clock hour requirement of the class. (optional)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCourses'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\EdFiCourse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getCoursesWithHttpInfo($offset = 0, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $course_code = null, $education_organization_id = null, $career_pathway_descriptor = null, $course_defined_by_descriptor = null, $course_gpa_applicability_descriptor = null, $minimum_available_credit_type_descriptor = null, $maximum_available_credit_type_descriptor = null, $course_description = null, $course_title = null, $date_course_adopted = null, $high_school_course_requirement = null, $id = null, $max_completions_for_credit = null, $maximum_available_credit_conversion = null, $maximum_available_credits = null, $minimum_available_credit_conversion = null, $minimum_available_credits = null, $number_of_parts = null, $time_required_for_completion = null, $use_snapshot = false, string $contentType = self::contentTypes['getCourses'][0])
    {
        $request = $this->getCoursesRequest($offset, $limit, $min_change_version, $max_change_version, $total_count, $course_code, $education_organization_id, $career_pathway_descriptor, $course_defined_by_descriptor, $course_gpa_applicability_descriptor, $minimum_available_credit_type_descriptor, $maximum_available_credit_type_descriptor, $course_description, $course_title, $date_course_adopted, $high_school_course_requirement, $id, $max_completions_for_credit, $maximum_available_credit_conversion, $maximum_available_credits, $minimum_available_credit_conversion, $minimum_available_credits, $number_of_parts, $time_required_for_completion, $use_snapshot, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\EdFiCourse[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\EdFiCourse[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\EdFiCourse[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\EdFiCourse[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\EdFiCourse[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCoursesAsync
     *
     * Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional, default to 0)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)
     * @param  string $course_code A unique alphanumeric code assigned to a course. (optional)
     * @param  int $education_organization_id The identifier assigned to an education organization. (optional)
     * @param  string $career_pathway_descriptor Indicates the career cluster or pathway the course is associated with as part of a CTE curriculum. (optional)
     * @param  string $course_defined_by_descriptor Specifies whether the course was defined by the SEA, LEA, School, or national organization. (optional)
     * @param  string $course_gpa_applicability_descriptor An indicator of whether or not the course being described is included in the computation of the student&#39;s grade point average, and if so, if it is weighted differently from regular courses. (optional)
     * @param  string $minimum_available_credit_type_descriptor The type of credits or units of value awarded for the completion of a course. (optional)
     * @param  string $maximum_available_credit_type_descriptor The type of credits or units of value awarded for the completion of a course. (optional)
     * @param  string $course_description A description of the content standards and goals covered in the course. Reference may be made to state or national content standards. (optional)
     * @param  string $course_title The descriptive name given to a course of study offered in a school or other institution or organization. In departmentalized classes at the elementary, secondary, and postsecondary levels (and for staff development activities), this refers to the name by which a course is identified (e.g., American History, English III). For elementary and other non-departmentalized classes, it refers to any portion of the instruction for which a grade or report is assigned (e.g., reading, composition, spelling, and language arts). (optional)
     * @param  \DateTime $date_course_adopted Date the course was adopted by the education agency. (optional)
     * @param  bool $high_school_course_requirement An indication that this course may satisfy high school graduation requirements in the course&#39;s subject area. (optional)
     * @param  string $id  (optional)
     * @param  int $max_completions_for_credit Designates how many times the course may be taken with credit received by the student. (optional)
     * @param  float $maximum_available_credit_conversion Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units. (optional)
     * @param  float $maximum_available_credits The value of credits or units of value awarded for the completion of a course. (optional)
     * @param  float $minimum_available_credit_conversion Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units. (optional)
     * @param  float $minimum_available_credits The value of credits or units of value awarded for the completion of a course. (optional)
     * @param  int $number_of_parts The number of parts identified for a course. (optional)
     * @param  int $time_required_for_completion The actual or estimated number of clock minutes required for class completion. This number is especially important for career and technical education classes and may represent (in minutes) the clock hour requirement of the class. (optional)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCourses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCoursesAsync($offset = 0, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $course_code = null, $education_organization_id = null, $career_pathway_descriptor = null, $course_defined_by_descriptor = null, $course_gpa_applicability_descriptor = null, $minimum_available_credit_type_descriptor = null, $maximum_available_credit_type_descriptor = null, $course_description = null, $course_title = null, $date_course_adopted = null, $high_school_course_requirement = null, $id = null, $max_completions_for_credit = null, $maximum_available_credit_conversion = null, $maximum_available_credits = null, $minimum_available_credit_conversion = null, $minimum_available_credits = null, $number_of_parts = null, $time_required_for_completion = null, $use_snapshot = false, string $contentType = self::contentTypes['getCourses'][0])
    {
        return $this->getCoursesAsyncWithHttpInfo($offset, $limit, $min_change_version, $max_change_version, $total_count, $course_code, $education_organization_id, $career_pathway_descriptor, $course_defined_by_descriptor, $course_gpa_applicability_descriptor, $minimum_available_credit_type_descriptor, $maximum_available_credit_type_descriptor, $course_description, $course_title, $date_course_adopted, $high_school_course_requirement, $id, $max_completions_for_credit, $maximum_available_credit_conversion, $maximum_available_credits, $minimum_available_credit_conversion, $minimum_available_credits, $number_of_parts, $time_required_for_completion, $use_snapshot, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCoursesAsyncWithHttpInfo
     *
     * Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional, default to 0)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)
     * @param  string $course_code A unique alphanumeric code assigned to a course. (optional)
     * @param  int $education_organization_id The identifier assigned to an education organization. (optional)
     * @param  string $career_pathway_descriptor Indicates the career cluster or pathway the course is associated with as part of a CTE curriculum. (optional)
     * @param  string $course_defined_by_descriptor Specifies whether the course was defined by the SEA, LEA, School, or national organization. (optional)
     * @param  string $course_gpa_applicability_descriptor An indicator of whether or not the course being described is included in the computation of the student&#39;s grade point average, and if so, if it is weighted differently from regular courses. (optional)
     * @param  string $minimum_available_credit_type_descriptor The type of credits or units of value awarded for the completion of a course. (optional)
     * @param  string $maximum_available_credit_type_descriptor The type of credits or units of value awarded for the completion of a course. (optional)
     * @param  string $course_description A description of the content standards and goals covered in the course. Reference may be made to state or national content standards. (optional)
     * @param  string $course_title The descriptive name given to a course of study offered in a school or other institution or organization. In departmentalized classes at the elementary, secondary, and postsecondary levels (and for staff development activities), this refers to the name by which a course is identified (e.g., American History, English III). For elementary and other non-departmentalized classes, it refers to any portion of the instruction for which a grade or report is assigned (e.g., reading, composition, spelling, and language arts). (optional)
     * @param  \DateTime $date_course_adopted Date the course was adopted by the education agency. (optional)
     * @param  bool $high_school_course_requirement An indication that this course may satisfy high school graduation requirements in the course&#39;s subject area. (optional)
     * @param  string $id  (optional)
     * @param  int $max_completions_for_credit Designates how many times the course may be taken with credit received by the student. (optional)
     * @param  float $maximum_available_credit_conversion Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units. (optional)
     * @param  float $maximum_available_credits The value of credits or units of value awarded for the completion of a course. (optional)
     * @param  float $minimum_available_credit_conversion Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units. (optional)
     * @param  float $minimum_available_credits The value of credits or units of value awarded for the completion of a course. (optional)
     * @param  int $number_of_parts The number of parts identified for a course. (optional)
     * @param  int $time_required_for_completion The actual or estimated number of clock minutes required for class completion. This number is especially important for career and technical education classes and may represent (in minutes) the clock hour requirement of the class. (optional)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCourses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCoursesAsyncWithHttpInfo($offset = 0, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $course_code = null, $education_organization_id = null, $career_pathway_descriptor = null, $course_defined_by_descriptor = null, $course_gpa_applicability_descriptor = null, $minimum_available_credit_type_descriptor = null, $maximum_available_credit_type_descriptor = null, $course_description = null, $course_title = null, $date_course_adopted = null, $high_school_course_requirement = null, $id = null, $max_completions_for_credit = null, $maximum_available_credit_conversion = null, $maximum_available_credits = null, $minimum_available_credit_conversion = null, $minimum_available_credits = null, $number_of_parts = null, $time_required_for_completion = null, $use_snapshot = false, string $contentType = self::contentTypes['getCourses'][0])
    {
        $returnType = '\OpenAPI\Client\Model\EdFiCourse[]';
        $request = $this->getCoursesRequest($offset, $limit, $min_change_version, $max_change_version, $total_count, $course_code, $education_organization_id, $career_pathway_descriptor, $course_defined_by_descriptor, $course_gpa_applicability_descriptor, $minimum_available_credit_type_descriptor, $maximum_available_credit_type_descriptor, $course_description, $course_title, $date_course_adopted, $high_school_course_requirement, $id, $max_completions_for_credit, $maximum_available_credit_conversion, $maximum_available_credits, $minimum_available_credit_conversion, $minimum_available_credits, $number_of_parts, $time_required_for_completion, $use_snapshot, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCourses'
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional, default to 0)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)
     * @param  string $course_code A unique alphanumeric code assigned to a course. (optional)
     * @param  int $education_organization_id The identifier assigned to an education organization. (optional)
     * @param  string $career_pathway_descriptor Indicates the career cluster or pathway the course is associated with as part of a CTE curriculum. (optional)
     * @param  string $course_defined_by_descriptor Specifies whether the course was defined by the SEA, LEA, School, or national organization. (optional)
     * @param  string $course_gpa_applicability_descriptor An indicator of whether or not the course being described is included in the computation of the student&#39;s grade point average, and if so, if it is weighted differently from regular courses. (optional)
     * @param  string $minimum_available_credit_type_descriptor The type of credits or units of value awarded for the completion of a course. (optional)
     * @param  string $maximum_available_credit_type_descriptor The type of credits or units of value awarded for the completion of a course. (optional)
     * @param  string $course_description A description of the content standards and goals covered in the course. Reference may be made to state or national content standards. (optional)
     * @param  string $course_title The descriptive name given to a course of study offered in a school or other institution or organization. In departmentalized classes at the elementary, secondary, and postsecondary levels (and for staff development activities), this refers to the name by which a course is identified (e.g., American History, English III). For elementary and other non-departmentalized classes, it refers to any portion of the instruction for which a grade or report is assigned (e.g., reading, composition, spelling, and language arts). (optional)
     * @param  \DateTime $date_course_adopted Date the course was adopted by the education agency. (optional)
     * @param  bool $high_school_course_requirement An indication that this course may satisfy high school graduation requirements in the course&#39;s subject area. (optional)
     * @param  string $id  (optional)
     * @param  int $max_completions_for_credit Designates how many times the course may be taken with credit received by the student. (optional)
     * @param  float $maximum_available_credit_conversion Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units. (optional)
     * @param  float $maximum_available_credits The value of credits or units of value awarded for the completion of a course. (optional)
     * @param  float $minimum_available_credit_conversion Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units. (optional)
     * @param  float $minimum_available_credits The value of credits or units of value awarded for the completion of a course. (optional)
     * @param  int $number_of_parts The number of parts identified for a course. (optional)
     * @param  int $time_required_for_completion The actual or estimated number of clock minutes required for class completion. This number is especially important for career and technical education classes and may represent (in minutes) the clock hour requirement of the class. (optional)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCourses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCoursesRequest($offset = 0, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $course_code = null, $education_organization_id = null, $career_pathway_descriptor = null, $course_defined_by_descriptor = null, $course_gpa_applicability_descriptor = null, $minimum_available_credit_type_descriptor = null, $maximum_available_credit_type_descriptor = null, $course_description = null, $course_title = null, $date_course_adopted = null, $high_school_course_requirement = null, $id = null, $max_completions_for_credit = null, $maximum_available_credit_conversion = null, $maximum_available_credits = null, $minimum_available_credit_conversion = null, $minimum_available_credits = null, $number_of_parts = null, $time_required_for_completion = null, $use_snapshot = false, string $contentType = self::contentTypes['getCourses'][0])
    {


        if ($limit !== null && $limit > 500) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling CoursesApi.getCourses, must be smaller than or equal to 500.');
        }
        if ($limit !== null && $limit < 0) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling CoursesApi.getCourses, must be bigger than or equal to 0.');
        }
        



        if ($course_code !== null && strlen($course_code) > 60) {
            throw new \InvalidArgumentException('invalid length for "$course_code" when calling CoursesApi.getCourses, must be smaller than or equal to 60.');
        }
        

        if ($career_pathway_descriptor !== null && strlen($career_pathway_descriptor) > 306) {
            throw new \InvalidArgumentException('invalid length for "$career_pathway_descriptor" when calling CoursesApi.getCourses, must be smaller than or equal to 306.');
        }
        
        if ($course_defined_by_descriptor !== null && strlen($course_defined_by_descriptor) > 306) {
            throw new \InvalidArgumentException('invalid length for "$course_defined_by_descriptor" when calling CoursesApi.getCourses, must be smaller than or equal to 306.');
        }
        
        if ($course_gpa_applicability_descriptor !== null && strlen($course_gpa_applicability_descriptor) > 306) {
            throw new \InvalidArgumentException('invalid length for "$course_gpa_applicability_descriptor" when calling CoursesApi.getCourses, must be smaller than or equal to 306.');
        }
        
        if ($minimum_available_credit_type_descriptor !== null && strlen($minimum_available_credit_type_descriptor) > 306) {
            throw new \InvalidArgumentException('invalid length for "$minimum_available_credit_type_descriptor" when calling CoursesApi.getCourses, must be smaller than or equal to 306.');
        }
        
        if ($maximum_available_credit_type_descriptor !== null && strlen($maximum_available_credit_type_descriptor) > 306) {
            throw new \InvalidArgumentException('invalid length for "$maximum_available_credit_type_descriptor" when calling CoursesApi.getCourses, must be smaller than or equal to 306.');
        }
        
        if ($course_description !== null && strlen($course_description) > 1024) {
            throw new \InvalidArgumentException('invalid length for "$course_description" when calling CoursesApi.getCourses, must be smaller than or equal to 1024.');
        }
        
        if ($course_title !== null && strlen($course_title) > 60) {
            throw new \InvalidArgumentException('invalid length for "$course_title" when calling CoursesApi.getCourses, must be smaller than or equal to 60.');
        }
        












        $resourcePath = '/ed-fi/courses';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_change_version,
            'minChangeVersion', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_change_version,
            'maxChangeVersion', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $total_count,
            'totalCount', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $course_code,
            'courseCode', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $education_organization_id,
            'educationOrganizationId', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $career_pathway_descriptor,
            'careerPathwayDescriptor', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $course_defined_by_descriptor,
            'courseDefinedByDescriptor', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $course_gpa_applicability_descriptor,
            'courseGPAApplicabilityDescriptor', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $minimum_available_credit_type_descriptor,
            'minimumAvailableCreditTypeDescriptor', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $maximum_available_credit_type_descriptor,
            'maximumAvailableCreditTypeDescriptor', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $course_description,
            'courseDescription', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $course_title,
            'courseTitle', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $date_course_adopted,
            'dateCourseAdopted', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $high_school_course_requirement,
            'highSchoolCourseRequirement', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id,
            'id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_completions_for_credit,
            'maxCompletionsForCredit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $maximum_available_credit_conversion,
            'maximumAvailableCreditConversion', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $maximum_available_credits,
            'maximumAvailableCredits', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $minimum_available_credit_conversion,
            'minimumAvailableCreditConversion', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $minimum_available_credits,
            'minimumAvailableCredits', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $number_of_parts,
            'numberOfParts', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $time_required_for_completion,
            'timeRequiredForCompletion', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($use_snapshot !== null) {
            $headerParams['Use-Snapshot'] = ObjectSerializer::toHeaderValue($use_snapshot);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCoursesById
     *
     * Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  string $if_none_match The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCoursesById'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\EdFiCourse
     */
    public function getCoursesById($id, $if_none_match = null, $use_snapshot = false, string $contentType = self::contentTypes['getCoursesById'][0])
    {
        list($response) = $this->getCoursesByIdWithHttpInfo($id, $if_none_match, $use_snapshot, $contentType);
        return $response;
    }

    /**
     * Operation getCoursesByIdWithHttpInfo
     *
     * Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  string $if_none_match The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCoursesById'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\EdFiCourse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCoursesByIdWithHttpInfo($id, $if_none_match = null, $use_snapshot = false, string $contentType = self::contentTypes['getCoursesById'][0])
    {
        $request = $this->getCoursesByIdRequest($id, $if_none_match, $use_snapshot, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\EdFiCourse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\EdFiCourse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\EdFiCourse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\EdFiCourse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\EdFiCourse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCoursesByIdAsync
     *
     * Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  string $if_none_match The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCoursesById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCoursesByIdAsync($id, $if_none_match = null, $use_snapshot = false, string $contentType = self::contentTypes['getCoursesById'][0])
    {
        return $this->getCoursesByIdAsyncWithHttpInfo($id, $if_none_match, $use_snapshot, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCoursesByIdAsyncWithHttpInfo
     *
     * Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  string $if_none_match The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCoursesById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCoursesByIdAsyncWithHttpInfo($id, $if_none_match = null, $use_snapshot = false, string $contentType = self::contentTypes['getCoursesById'][0])
    {
        $returnType = '\OpenAPI\Client\Model\EdFiCourse';
        $request = $this->getCoursesByIdRequest($id, $if_none_match, $use_snapshot, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCoursesById'
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  string $if_none_match The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCoursesById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCoursesByIdRequest($id, $if_none_match = null, $use_snapshot = false, string $contentType = self::contentTypes['getCoursesById'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getCoursesById'
            );
        }




        $resourcePath = '/ed-fi/courses/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }
        // header params
        if ($use_snapshot !== null) {
            $headerParams['Use-Snapshot'] = ObjectSerializer::toHeaderValue($use_snapshot);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation keyChangesCourses
     *
     * Retrieves resources key changes based on change version.
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional, default to 0)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['keyChangesCourses'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\TrackedChangesEdFiCourseKeyChange[]
     */
    public function keyChangesCourses($offset = 0, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $use_snapshot = false, string $contentType = self::contentTypes['keyChangesCourses'][0])
    {
        list($response) = $this->keyChangesCoursesWithHttpInfo($offset, $limit, $min_change_version, $max_change_version, $total_count, $use_snapshot, $contentType);
        return $response;
    }

    /**
     * Operation keyChangesCoursesWithHttpInfo
     *
     * Retrieves resources key changes based on change version.
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional, default to 0)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['keyChangesCourses'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\TrackedChangesEdFiCourseKeyChange[], HTTP status code, HTTP response headers (array of strings)
     */
    public function keyChangesCoursesWithHttpInfo($offset = 0, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $use_snapshot = false, string $contentType = self::contentTypes['keyChangesCourses'][0])
    {
        $request = $this->keyChangesCoursesRequest($offset, $limit, $min_change_version, $max_change_version, $total_count, $use_snapshot, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\TrackedChangesEdFiCourseKeyChange[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\TrackedChangesEdFiCourseKeyChange[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\TrackedChangesEdFiCourseKeyChange[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\TrackedChangesEdFiCourseKeyChange[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\TrackedChangesEdFiCourseKeyChange[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation keyChangesCoursesAsync
     *
     * Retrieves resources key changes based on change version.
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional, default to 0)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['keyChangesCourses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function keyChangesCoursesAsync($offset = 0, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $use_snapshot = false, string $contentType = self::contentTypes['keyChangesCourses'][0])
    {
        return $this->keyChangesCoursesAsyncWithHttpInfo($offset, $limit, $min_change_version, $max_change_version, $total_count, $use_snapshot, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation keyChangesCoursesAsyncWithHttpInfo
     *
     * Retrieves resources key changes based on change version.
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional, default to 0)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['keyChangesCourses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function keyChangesCoursesAsyncWithHttpInfo($offset = 0, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $use_snapshot = false, string $contentType = self::contentTypes['keyChangesCourses'][0])
    {
        $returnType = '\OpenAPI\Client\Model\TrackedChangesEdFiCourseKeyChange[]';
        $request = $this->keyChangesCoursesRequest($offset, $limit, $min_change_version, $max_change_version, $total_count, $use_snapshot, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'keyChangesCourses'
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional, default to 0)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['keyChangesCourses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function keyChangesCoursesRequest($offset = 0, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $use_snapshot = false, string $contentType = self::contentTypes['keyChangesCourses'][0])
    {


        if ($limit !== null && $limit > 500) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling CoursesApi.keyChangesCourses, must be smaller than or equal to 500.');
        }
        if ($limit !== null && $limit < 0) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling CoursesApi.keyChangesCourses, must be bigger than or equal to 0.');
        }
        





        $resourcePath = '/ed-fi/courses/keyChanges';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_change_version,
            'minChangeVersion', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_change_version,
            'maxChangeVersion', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $total_count,
            'totalCount', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($use_snapshot !== null) {
            $headerParams['Use-Snapshot'] = ObjectSerializer::toHeaderValue($use_snapshot);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postCourse
     *
     * Creates or updates resources based on the natural key values of the supplied resource.
     *
     * @param  \OpenAPI\Client\Model\EdFiCourse $ed_fi_course The JSON representation of the \&quot;course\&quot; resource to be created or updated. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postCourse'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function postCourse($ed_fi_course, string $contentType = self::contentTypes['postCourse'][0])
    {
        $this->postCourseWithHttpInfo($ed_fi_course, $contentType);
    }

    /**
     * Operation postCourseWithHttpInfo
     *
     * Creates or updates resources based on the natural key values of the supplied resource.
     *
     * @param  \OpenAPI\Client\Model\EdFiCourse $ed_fi_course The JSON representation of the \&quot;course\&quot; resource to be created or updated. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postCourse'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function postCourseWithHttpInfo($ed_fi_course, string $contentType = self::contentTypes['postCourse'][0])
    {
        $request = $this->postCourseRequest($ed_fi_course, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation postCourseAsync
     *
     * Creates or updates resources based on the natural key values of the supplied resource.
     *
     * @param  \OpenAPI\Client\Model\EdFiCourse $ed_fi_course The JSON representation of the \&quot;course\&quot; resource to be created or updated. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postCourse'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postCourseAsync($ed_fi_course, string $contentType = self::contentTypes['postCourse'][0])
    {
        return $this->postCourseAsyncWithHttpInfo($ed_fi_course, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postCourseAsyncWithHttpInfo
     *
     * Creates or updates resources based on the natural key values of the supplied resource.
     *
     * @param  \OpenAPI\Client\Model\EdFiCourse $ed_fi_course The JSON representation of the \&quot;course\&quot; resource to be created or updated. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postCourse'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postCourseAsyncWithHttpInfo($ed_fi_course, string $contentType = self::contentTypes['postCourse'][0])
    {
        $returnType = '';
        $request = $this->postCourseRequest($ed_fi_course, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postCourse'
     *
     * @param  \OpenAPI\Client\Model\EdFiCourse $ed_fi_course The JSON representation of the \&quot;course\&quot; resource to be created or updated. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postCourse'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postCourseRequest($ed_fi_course, string $contentType = self::contentTypes['postCourse'][0])
    {

        // verify the required parameter 'ed_fi_course' is set
        if ($ed_fi_course === null || (is_array($ed_fi_course) && count($ed_fi_course) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ed_fi_course when calling postCourse'
            );
        }


        $resourcePath = '/ed-fi/courses';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($ed_fi_course)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($ed_fi_course));
            } else {
                $httpBody = $ed_fi_course;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putCourse
     *
     * Updates a resource based on the resource identifier.
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  \OpenAPI\Client\Model\EdFiCourse $ed_fi_course The JSON representation of the \&quot;course\&quot; resource to be created or updated. (required)
     * @param  string $if_match The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putCourse'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function putCourse($id, $ed_fi_course, $if_match = null, string $contentType = self::contentTypes['putCourse'][0])
    {
        $this->putCourseWithHttpInfo($id, $ed_fi_course, $if_match, $contentType);
    }

    /**
     * Operation putCourseWithHttpInfo
     *
     * Updates a resource based on the resource identifier.
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  \OpenAPI\Client\Model\EdFiCourse $ed_fi_course The JSON representation of the \&quot;course\&quot; resource to be created or updated. (required)
     * @param  string $if_match The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putCourse'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function putCourseWithHttpInfo($id, $ed_fi_course, $if_match = null, string $contentType = self::contentTypes['putCourse'][0])
    {
        $request = $this->putCourseRequest($id, $ed_fi_course, $if_match, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation putCourseAsync
     *
     * Updates a resource based on the resource identifier.
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  \OpenAPI\Client\Model\EdFiCourse $ed_fi_course The JSON representation of the \&quot;course\&quot; resource to be created or updated. (required)
     * @param  string $if_match The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putCourse'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putCourseAsync($id, $ed_fi_course, $if_match = null, string $contentType = self::contentTypes['putCourse'][0])
    {
        return $this->putCourseAsyncWithHttpInfo($id, $ed_fi_course, $if_match, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putCourseAsyncWithHttpInfo
     *
     * Updates a resource based on the resource identifier.
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  \OpenAPI\Client\Model\EdFiCourse $ed_fi_course The JSON representation of the \&quot;course\&quot; resource to be created or updated. (required)
     * @param  string $if_match The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putCourse'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putCourseAsyncWithHttpInfo($id, $ed_fi_course, $if_match = null, string $contentType = self::contentTypes['putCourse'][0])
    {
        $returnType = '';
        $request = $this->putCourseRequest($id, $ed_fi_course, $if_match, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putCourse'
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  \OpenAPI\Client\Model\EdFiCourse $ed_fi_course The JSON representation of the \&quot;course\&quot; resource to be created or updated. (required)
     * @param  string $if_match The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putCourse'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function putCourseRequest($id, $ed_fi_course, $if_match = null, string $contentType = self::contentTypes['putCourse'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling putCourse'
            );
        }

        // verify the required parameter 'ed_fi_course' is set
        if ($ed_fi_course === null || (is_array($ed_fi_course) && count($ed_fi_course) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ed_fi_course when calling putCourse'
            );
        }



        $resourcePath = '/ed-fi/courses/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($if_match !== null) {
            $headerParams['If-Match'] = ObjectSerializer::toHeaderValue($if_match);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($ed_fi_course)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($ed_fi_course));
            } else {
                $httpBody = $ed_fi_course;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
