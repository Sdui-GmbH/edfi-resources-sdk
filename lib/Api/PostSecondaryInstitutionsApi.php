<?php
/**
 * PostSecondaryInstitutionsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Resources
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Resources\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Resources\ApiException;
use Resources\Configuration;
use Resources\HeaderSelector;
use Resources\ObjectSerializer;

/**
 * PostSecondaryInstitutionsApi Class Doc Comment
 *
 * @category Class
 * @package  Resources
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PostSecondaryInstitutionsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'deletePostSecondaryInstitutionById' => [
            'application/json',
        ],
        'deletesPostSecondaryInstitutions' => [
            'application/json',
        ],
        'getPostSecondaryInstitutions' => [
            'application/json',
        ],
        'getPostSecondaryInstitutionsById' => [
            'application/json',
        ],
        'getPostSecondaryInstitutionsPartitions' => [
            'application/json',
        ],
        'keyChangesPostSecondaryInstitutions' => [
            'application/json',
        ],
        'postPostSecondaryInstitution' => [
            'application/json',
        ],
        'putPostSecondaryInstitution' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation deletePostSecondaryInstitutionById
     *
     * Deletes an existing resource using the resource identifier.
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  string $if_match The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePostSecondaryInstitutionById'] to see the possible values for this operation
     *
     * @throws \Resources\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deletePostSecondaryInstitutionById($id, $if_match = null, string $contentType = self::contentTypes['deletePostSecondaryInstitutionById'][0])
    {
        $this->deletePostSecondaryInstitutionByIdWithHttpInfo($id, $if_match, $contentType);
    }

    /**
     * Operation deletePostSecondaryInstitutionByIdWithHttpInfo
     *
     * Deletes an existing resource using the resource identifier.
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  string $if_match The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePostSecondaryInstitutionById'] to see the possible values for this operation
     *
     * @throws \Resources\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deletePostSecondaryInstitutionByIdWithHttpInfo($id, $if_match = null, string $contentType = self::contentTypes['deletePostSecondaryInstitutionById'][0])
    {
        $request = $this->deletePostSecondaryInstitutionByIdRequest($id, $if_match, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deletePostSecondaryInstitutionByIdAsync
     *
     * Deletes an existing resource using the resource identifier.
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  string $if_match The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePostSecondaryInstitutionById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deletePostSecondaryInstitutionByIdAsync($id, $if_match = null, string $contentType = self::contentTypes['deletePostSecondaryInstitutionById'][0])
    {
        return $this->deletePostSecondaryInstitutionByIdAsyncWithHttpInfo($id, $if_match, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deletePostSecondaryInstitutionByIdAsyncWithHttpInfo
     *
     * Deletes an existing resource using the resource identifier.
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  string $if_match The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePostSecondaryInstitutionById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deletePostSecondaryInstitutionByIdAsyncWithHttpInfo($id, $if_match = null, string $contentType = self::contentTypes['deletePostSecondaryInstitutionById'][0])
    {
        $returnType = '';
        $request = $this->deletePostSecondaryInstitutionByIdRequest($id, $if_match, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deletePostSecondaryInstitutionById'
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  string $if_match The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePostSecondaryInstitutionById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deletePostSecondaryInstitutionByIdRequest($id, $if_match = null, string $contentType = self::contentTypes['deletePostSecondaryInstitutionById'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deletePostSecondaryInstitutionById'
            );
        }



        $resourcePath = '/ed-fi/postSecondaryInstitutions/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($if_match !== null) {
            $headerParams['If-Match'] = ObjectSerializer::toHeaderValue($if_match);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deletesPostSecondaryInstitutions
     *
     * Retrieves deleted resources based on change version.
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletesPostSecondaryInstitutions'] to see the possible values for this operation
     *
     * @throws \Resources\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return |\Resources\Model\TrackedChangesEdFiPostSecondaryInstitutionDelete[]
     */
    public function deletesPostSecondaryInstitutions($offset = null, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $use_snapshot = false, string $contentType = self::contentTypes['deletesPostSecondaryInstitutions'][0])
    {
        list($response) = $this->deletesPostSecondaryInstitutionsWithHttpInfo($offset, $limit, $min_change_version, $max_change_version, $total_count, $use_snapshot, $contentType);
        return $response;
    }

    /**
     * Operation deletesPostSecondaryInstitutionsWithHttpInfo
     *
     * Retrieves deleted resources based on change version.
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletesPostSecondaryInstitutions'] to see the possible values for this operation
     *
     * @throws \Resources\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of |\Resources\Model\TrackedChangesEdFiPostSecondaryInstitutionDelete[], HTTP status code, HTTP response headers (array of strings)
     */
    public function deletesPostSecondaryInstitutionsWithHttpInfo($offset = null, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $use_snapshot = false, string $contentType = self::contentTypes['deletesPostSecondaryInstitutions'][0])
    {
        $request = $this->deletesPostSecondaryInstitutionsRequest($offset, $limit, $min_change_version, $max_change_version, $total_count, $use_snapshot, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Resources\Model\TrackedChangesEdFiPostSecondaryInstitutionDelete[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Resources\Model\TrackedChangesEdFiPostSecondaryInstitutionDelete[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Resources\Model\TrackedChangesEdFiPostSecondaryInstitutionDelete[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Resources\Model\TrackedChangesEdFiPostSecondaryInstitutionDelete[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Resources\Model\TrackedChangesEdFiPostSecondaryInstitutionDelete[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deletesPostSecondaryInstitutionsAsync
     *
     * Retrieves deleted resources based on change version.
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletesPostSecondaryInstitutions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deletesPostSecondaryInstitutionsAsync($offset = null, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $use_snapshot = false, string $contentType = self::contentTypes['deletesPostSecondaryInstitutions'][0])
    {
        return $this->deletesPostSecondaryInstitutionsAsyncWithHttpInfo($offset, $limit, $min_change_version, $max_change_version, $total_count, $use_snapshot, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deletesPostSecondaryInstitutionsAsyncWithHttpInfo
     *
     * Retrieves deleted resources based on change version.
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletesPostSecondaryInstitutions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deletesPostSecondaryInstitutionsAsyncWithHttpInfo($offset = null, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $use_snapshot = false, string $contentType = self::contentTypes['deletesPostSecondaryInstitutions'][0])
    {
        $returnType = '\Resources\Model\TrackedChangesEdFiPostSecondaryInstitutionDelete[]';
        $request = $this->deletesPostSecondaryInstitutionsRequest($offset, $limit, $min_change_version, $max_change_version, $total_count, $use_snapshot, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deletesPostSecondaryInstitutions'
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletesPostSecondaryInstitutions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deletesPostSecondaryInstitutionsRequest($offset = null, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $use_snapshot = false, string $contentType = self::contentTypes['deletesPostSecondaryInstitutions'][0])
    {


        if ($limit !== null && $limit > 500) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling PostSecondaryInstitutionsApi.deletesPostSecondaryInstitutions, must be smaller than or equal to 500.');
        }
        if ($limit !== null && $limit < 0) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling PostSecondaryInstitutionsApi.deletesPostSecondaryInstitutions, must be bigger than or equal to 0.');
        }
        





        $resourcePath = '/ed-fi/postSecondaryInstitutions/deletes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_change_version,
            'minChangeVersion', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_change_version,
            'maxChangeVersion', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $total_count,
            'totalCount', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($use_snapshot !== null) {
            $headerParams['Use-Snapshot'] = ObjectSerializer::toHeaderValue($use_snapshot);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPostSecondaryInstitutions
     *
     * Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  string $page_token The token of the page to retrieve, obtained either from the \&quot;Next-Page-Token\&quot; header of the previous request, or from the \&quot;partitions\&quot; endpoint for the resource. Cannot be used with limit/offset paging. (optional)
     * @param  int $page_size The maximum number of items to retrieve in the page. For use with pageToken (cursor paging) only. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)
     * @param  int $post_secondary_institution_id The ID of the post secondary institution. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication. (optional)
     * @param  string $administrative_funding_control_descriptor A classification of whether a postsecondary institution is operated by publicly elected or appointed officials (public control) or by privately elected or appointed officials and derives its major source of funds from private sources (private control). (optional)
     * @param  string $post_secondary_institution_level_descriptor A classification of whether a post secondary institution&#39;s highest level of offering is a program of 4-years or higher (4 year), 2-but-less-than 4-years (2 year), or less than 2-years. (optional)
     * @param  string $operational_status_descriptor The current operational status of the education organization (e.g., active, inactive). (optional)
     * @param  string $id  (optional)
     * @param  string $name_of_institution The full, legally accepted name of the institution. (optional)
     * @param  string $short_name_of_institution A short name for the institution. (optional)
     * @param  string $web_site The public web site address (URL) for the education organization. (optional)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     * @param  string $education_organization_identification_system_descriptor The school system, state, or agency assigning the identification code. (optional)
     * @param  string $identification_code A unique number or alphanumeric code that is assigned to an education organization by a school, school system, state, or other agency or entity. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPostSecondaryInstitutions'] to see the possible values for this operation
     *
     * @throws \Resources\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return |\Resources\Model\EdFiPostSecondaryInstitution[]
     */
    public function getPostSecondaryInstitutions($offset = null, $limit = 25, $page_token = null, $page_size = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $post_secondary_institution_id = null, $administrative_funding_control_descriptor = null, $post_secondary_institution_level_descriptor = null, $operational_status_descriptor = null, $id = null, $name_of_institution = null, $short_name_of_institution = null, $web_site = null, $use_snapshot = false, $education_organization_identification_system_descriptor = null, $identification_code = null, string $contentType = self::contentTypes['getPostSecondaryInstitutions'][0])
    {
        list($response) = $this->getPostSecondaryInstitutionsWithHttpInfo($offset, $limit, $page_token, $page_size, $min_change_version, $max_change_version, $total_count, $post_secondary_institution_id, $administrative_funding_control_descriptor, $post_secondary_institution_level_descriptor, $operational_status_descriptor, $id, $name_of_institution, $short_name_of_institution, $web_site, $use_snapshot, $education_organization_identification_system_descriptor, $identification_code, $contentType);
        return $response;
    }

    /**
     * Operation getPostSecondaryInstitutionsWithHttpInfo
     *
     * Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  string $page_token The token of the page to retrieve, obtained either from the \&quot;Next-Page-Token\&quot; header of the previous request, or from the \&quot;partitions\&quot; endpoint for the resource. Cannot be used with limit/offset paging. (optional)
     * @param  int $page_size The maximum number of items to retrieve in the page. For use with pageToken (cursor paging) only. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)
     * @param  int $post_secondary_institution_id The ID of the post secondary institution. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication. (optional)
     * @param  string $administrative_funding_control_descriptor A classification of whether a postsecondary institution is operated by publicly elected or appointed officials (public control) or by privately elected or appointed officials and derives its major source of funds from private sources (private control). (optional)
     * @param  string $post_secondary_institution_level_descriptor A classification of whether a post secondary institution&#39;s highest level of offering is a program of 4-years or higher (4 year), 2-but-less-than 4-years (2 year), or less than 2-years. (optional)
     * @param  string $operational_status_descriptor The current operational status of the education organization (e.g., active, inactive). (optional)
     * @param  string $id  (optional)
     * @param  string $name_of_institution The full, legally accepted name of the institution. (optional)
     * @param  string $short_name_of_institution A short name for the institution. (optional)
     * @param  string $web_site The public web site address (URL) for the education organization. (optional)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     * @param  string $education_organization_identification_system_descriptor The school system, state, or agency assigning the identification code. (optional)
     * @param  string $identification_code A unique number or alphanumeric code that is assigned to an education organization by a school, school system, state, or other agency or entity. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPostSecondaryInstitutions'] to see the possible values for this operation
     *
     * @throws \Resources\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of |\Resources\Model\EdFiPostSecondaryInstitution[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getPostSecondaryInstitutionsWithHttpInfo($offset = null, $limit = 25, $page_token = null, $page_size = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $post_secondary_institution_id = null, $administrative_funding_control_descriptor = null, $post_secondary_institution_level_descriptor = null, $operational_status_descriptor = null, $id = null, $name_of_institution = null, $short_name_of_institution = null, $web_site = null, $use_snapshot = false, $education_organization_identification_system_descriptor = null, $identification_code = null, string $contentType = self::contentTypes['getPostSecondaryInstitutions'][0])
    {
        $request = $this->getPostSecondaryInstitutionsRequest($offset, $limit, $page_token, $page_size, $min_change_version, $max_change_version, $total_count, $post_secondary_institution_id, $administrative_funding_control_descriptor, $post_secondary_institution_level_descriptor, $operational_status_descriptor, $id, $name_of_institution, $short_name_of_institution, $web_site, $use_snapshot, $education_organization_identification_system_descriptor, $identification_code, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Resources\Model\EdFiPostSecondaryInstitution[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Resources\Model\EdFiPostSecondaryInstitution[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Resources\Model\EdFiPostSecondaryInstitution[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Resources\Model\EdFiPostSecondaryInstitution[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Resources\Model\EdFiPostSecondaryInstitution[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPostSecondaryInstitutionsAsync
     *
     * Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  string $page_token The token of the page to retrieve, obtained either from the \&quot;Next-Page-Token\&quot; header of the previous request, or from the \&quot;partitions\&quot; endpoint for the resource. Cannot be used with limit/offset paging. (optional)
     * @param  int $page_size The maximum number of items to retrieve in the page. For use with pageToken (cursor paging) only. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)
     * @param  int $post_secondary_institution_id The ID of the post secondary institution. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication. (optional)
     * @param  string $administrative_funding_control_descriptor A classification of whether a postsecondary institution is operated by publicly elected or appointed officials (public control) or by privately elected or appointed officials and derives its major source of funds from private sources (private control). (optional)
     * @param  string $post_secondary_institution_level_descriptor A classification of whether a post secondary institution&#39;s highest level of offering is a program of 4-years or higher (4 year), 2-but-less-than 4-years (2 year), or less than 2-years. (optional)
     * @param  string $operational_status_descriptor The current operational status of the education organization (e.g., active, inactive). (optional)
     * @param  string $id  (optional)
     * @param  string $name_of_institution The full, legally accepted name of the institution. (optional)
     * @param  string $short_name_of_institution A short name for the institution. (optional)
     * @param  string $web_site The public web site address (URL) for the education organization. (optional)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     * @param  string $education_organization_identification_system_descriptor The school system, state, or agency assigning the identification code. (optional)
     * @param  string $identification_code A unique number or alphanumeric code that is assigned to an education organization by a school, school system, state, or other agency or entity. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPostSecondaryInstitutions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPostSecondaryInstitutionsAsync($offset = null, $limit = 25, $page_token = null, $page_size = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $post_secondary_institution_id = null, $administrative_funding_control_descriptor = null, $post_secondary_institution_level_descriptor = null, $operational_status_descriptor = null, $id = null, $name_of_institution = null, $short_name_of_institution = null, $web_site = null, $use_snapshot = false, $education_organization_identification_system_descriptor = null, $identification_code = null, string $contentType = self::contentTypes['getPostSecondaryInstitutions'][0])
    {
        return $this->getPostSecondaryInstitutionsAsyncWithHttpInfo($offset, $limit, $page_token, $page_size, $min_change_version, $max_change_version, $total_count, $post_secondary_institution_id, $administrative_funding_control_descriptor, $post_secondary_institution_level_descriptor, $operational_status_descriptor, $id, $name_of_institution, $short_name_of_institution, $web_site, $use_snapshot, $education_organization_identification_system_descriptor, $identification_code, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPostSecondaryInstitutionsAsyncWithHttpInfo
     *
     * Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  string $page_token The token of the page to retrieve, obtained either from the \&quot;Next-Page-Token\&quot; header of the previous request, or from the \&quot;partitions\&quot; endpoint for the resource. Cannot be used with limit/offset paging. (optional)
     * @param  int $page_size The maximum number of items to retrieve in the page. For use with pageToken (cursor paging) only. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)
     * @param  int $post_secondary_institution_id The ID of the post secondary institution. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication. (optional)
     * @param  string $administrative_funding_control_descriptor A classification of whether a postsecondary institution is operated by publicly elected or appointed officials (public control) or by privately elected or appointed officials and derives its major source of funds from private sources (private control). (optional)
     * @param  string $post_secondary_institution_level_descriptor A classification of whether a post secondary institution&#39;s highest level of offering is a program of 4-years or higher (4 year), 2-but-less-than 4-years (2 year), or less than 2-years. (optional)
     * @param  string $operational_status_descriptor The current operational status of the education organization (e.g., active, inactive). (optional)
     * @param  string $id  (optional)
     * @param  string $name_of_institution The full, legally accepted name of the institution. (optional)
     * @param  string $short_name_of_institution A short name for the institution. (optional)
     * @param  string $web_site The public web site address (URL) for the education organization. (optional)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     * @param  string $education_organization_identification_system_descriptor The school system, state, or agency assigning the identification code. (optional)
     * @param  string $identification_code A unique number or alphanumeric code that is assigned to an education organization by a school, school system, state, or other agency or entity. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPostSecondaryInstitutions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPostSecondaryInstitutionsAsyncWithHttpInfo($offset = null, $limit = 25, $page_token = null, $page_size = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $post_secondary_institution_id = null, $administrative_funding_control_descriptor = null, $post_secondary_institution_level_descriptor = null, $operational_status_descriptor = null, $id = null, $name_of_institution = null, $short_name_of_institution = null, $web_site = null, $use_snapshot = false, $education_organization_identification_system_descriptor = null, $identification_code = null, string $contentType = self::contentTypes['getPostSecondaryInstitutions'][0])
    {
        $returnType = '\Resources\Model\EdFiPostSecondaryInstitution[]';
        $request = $this->getPostSecondaryInstitutionsRequest($offset, $limit, $page_token, $page_size, $min_change_version, $max_change_version, $total_count, $post_secondary_institution_id, $administrative_funding_control_descriptor, $post_secondary_institution_level_descriptor, $operational_status_descriptor, $id, $name_of_institution, $short_name_of_institution, $web_site, $use_snapshot, $education_organization_identification_system_descriptor, $identification_code, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPostSecondaryInstitutions'
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  string $page_token The token of the page to retrieve, obtained either from the \&quot;Next-Page-Token\&quot; header of the previous request, or from the \&quot;partitions\&quot; endpoint for the resource. Cannot be used with limit/offset paging. (optional)
     * @param  int $page_size The maximum number of items to retrieve in the page. For use with pageToken (cursor paging) only. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)
     * @param  int $post_secondary_institution_id The ID of the post secondary institution. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication. (optional)
     * @param  string $administrative_funding_control_descriptor A classification of whether a postsecondary institution is operated by publicly elected or appointed officials (public control) or by privately elected or appointed officials and derives its major source of funds from private sources (private control). (optional)
     * @param  string $post_secondary_institution_level_descriptor A classification of whether a post secondary institution&#39;s highest level of offering is a program of 4-years or higher (4 year), 2-but-less-than 4-years (2 year), or less than 2-years. (optional)
     * @param  string $operational_status_descriptor The current operational status of the education organization (e.g., active, inactive). (optional)
     * @param  string $id  (optional)
     * @param  string $name_of_institution The full, legally accepted name of the institution. (optional)
     * @param  string $short_name_of_institution A short name for the institution. (optional)
     * @param  string $web_site The public web site address (URL) for the education organization. (optional)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     * @param  string $education_organization_identification_system_descriptor The school system, state, or agency assigning the identification code. (optional)
     * @param  string $identification_code A unique number or alphanumeric code that is assigned to an education organization by a school, school system, state, or other agency or entity. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPostSecondaryInstitutions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPostSecondaryInstitutionsRequest($offset = null, $limit = 25, $page_token = null, $page_size = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $post_secondary_institution_id = null, $administrative_funding_control_descriptor = null, $post_secondary_institution_level_descriptor = null, $operational_status_descriptor = null, $id = null, $name_of_institution = null, $short_name_of_institution = null, $web_site = null, $use_snapshot = false, $education_organization_identification_system_descriptor = null, $identification_code = null, string $contentType = self::contentTypes['getPostSecondaryInstitutions'][0])
    {


        if ($limit !== null && $limit > 500) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling PostSecondaryInstitutionsApi.getPostSecondaryInstitutions, must be smaller than or equal to 500.');
        }
        if ($limit !== null && $limit < 0) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling PostSecondaryInstitutionsApi.getPostSecondaryInstitutions, must be bigger than or equal to 0.');
        }
        

        if ($page_size !== null && $page_size < 0) {
            throw new \InvalidArgumentException('invalid value for "$page_size" when calling PostSecondaryInstitutionsApi.getPostSecondaryInstitutions, must be bigger than or equal to 0.');
        }
        




        if ($administrative_funding_control_descriptor !== null && strlen($administrative_funding_control_descriptor) > 306) {
            throw new \InvalidArgumentException('invalid length for "$administrative_funding_control_descriptor" when calling PostSecondaryInstitutionsApi.getPostSecondaryInstitutions, must be smaller than or equal to 306.');
        }
        
        if ($post_secondary_institution_level_descriptor !== null && strlen($post_secondary_institution_level_descriptor) > 306) {
            throw new \InvalidArgumentException('invalid length for "$post_secondary_institution_level_descriptor" when calling PostSecondaryInstitutionsApi.getPostSecondaryInstitutions, must be smaller than or equal to 306.');
        }
        
        if ($operational_status_descriptor !== null && strlen($operational_status_descriptor) > 306) {
            throw new \InvalidArgumentException('invalid length for "$operational_status_descriptor" when calling PostSecondaryInstitutionsApi.getPostSecondaryInstitutions, must be smaller than or equal to 306.');
        }
        

        if ($name_of_institution !== null && strlen($name_of_institution) > 75) {
            throw new \InvalidArgumentException('invalid length for "$name_of_institution" when calling PostSecondaryInstitutionsApi.getPostSecondaryInstitutions, must be smaller than or equal to 75.');
        }
        
        if ($short_name_of_institution !== null && strlen($short_name_of_institution) > 75) {
            throw new \InvalidArgumentException('invalid length for "$short_name_of_institution" when calling PostSecondaryInstitutionsApi.getPostSecondaryInstitutions, must be smaller than or equal to 75.');
        }
        
        if ($web_site !== null && strlen($web_site) > 255) {
            throw new \InvalidArgumentException('invalid length for "$web_site" when calling PostSecondaryInstitutionsApi.getPostSecondaryInstitutions, must be smaller than or equal to 255.');
        }
        

        if ($education_organization_identification_system_descriptor !== null && strlen($education_organization_identification_system_descriptor) > 306) {
            throw new \InvalidArgumentException('invalid length for "$education_organization_identification_system_descriptor" when calling PostSecondaryInstitutionsApi.getPostSecondaryInstitutions, must be smaller than or equal to 306.');
        }
        
        if ($identification_code !== null && strlen($identification_code) > 60) {
            throw new \InvalidArgumentException('invalid length for "$identification_code" when calling PostSecondaryInstitutionsApi.getPostSecondaryInstitutions, must be smaller than or equal to 60.');
        }
        

        $resourcePath = '/ed-fi/postSecondaryInstitutions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_token,
            'pageToken', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'pageSize', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_change_version,
            'minChangeVersion', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_change_version,
            'maxChangeVersion', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $total_count,
            'totalCount', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $post_secondary_institution_id,
            'postSecondaryInstitutionId', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $administrative_funding_control_descriptor,
            'administrativeFundingControlDescriptor', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $post_secondary_institution_level_descriptor,
            'postSecondaryInstitutionLevelDescriptor', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $operational_status_descriptor,
            'operationalStatusDescriptor', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id,
            'id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $name_of_institution,
            'nameOfInstitution', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $short_name_of_institution,
            'shortNameOfInstitution', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $web_site,
            'webSite', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $education_organization_identification_system_descriptor,
            'educationOrganizationIdentificationSystemDescriptor', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $identification_code,
            'identificationCode', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($use_snapshot !== null) {
            $headerParams['Use-Snapshot'] = ObjectSerializer::toHeaderValue($use_snapshot);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPostSecondaryInstitutionsById
     *
     * Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  string $if_none_match The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPostSecondaryInstitutionsById'] to see the possible values for this operation
     *
     * @throws \Resources\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return |\Resources\Model\EdFiPostSecondaryInstitution
     */
    public function getPostSecondaryInstitutionsById($id, $if_none_match = null, $use_snapshot = false, string $contentType = self::contentTypes['getPostSecondaryInstitutionsById'][0])
    {
        list($response) = $this->getPostSecondaryInstitutionsByIdWithHttpInfo($id, $if_none_match, $use_snapshot, $contentType);
        return $response;
    }

    /**
     * Operation getPostSecondaryInstitutionsByIdWithHttpInfo
     *
     * Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  string $if_none_match The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPostSecondaryInstitutionsById'] to see the possible values for this operation
     *
     * @throws \Resources\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of |\Resources\Model\EdFiPostSecondaryInstitution, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPostSecondaryInstitutionsByIdWithHttpInfo($id, $if_none_match = null, $use_snapshot = false, string $contentType = self::contentTypes['getPostSecondaryInstitutionsById'][0])
    {
        $request = $this->getPostSecondaryInstitutionsByIdRequest($id, $if_none_match, $use_snapshot, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Resources\Model\EdFiPostSecondaryInstitution' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Resources\Model\EdFiPostSecondaryInstitution' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Resources\Model\EdFiPostSecondaryInstitution', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Resources\Model\EdFiPostSecondaryInstitution';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Resources\Model\EdFiPostSecondaryInstitution',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPostSecondaryInstitutionsByIdAsync
     *
     * Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  string $if_none_match The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPostSecondaryInstitutionsById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPostSecondaryInstitutionsByIdAsync($id, $if_none_match = null, $use_snapshot = false, string $contentType = self::contentTypes['getPostSecondaryInstitutionsById'][0])
    {
        return $this->getPostSecondaryInstitutionsByIdAsyncWithHttpInfo($id, $if_none_match, $use_snapshot, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPostSecondaryInstitutionsByIdAsyncWithHttpInfo
     *
     * Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  string $if_none_match The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPostSecondaryInstitutionsById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPostSecondaryInstitutionsByIdAsyncWithHttpInfo($id, $if_none_match = null, $use_snapshot = false, string $contentType = self::contentTypes['getPostSecondaryInstitutionsById'][0])
    {
        $returnType = '\Resources\Model\EdFiPostSecondaryInstitution';
        $request = $this->getPostSecondaryInstitutionsByIdRequest($id, $if_none_match, $use_snapshot, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPostSecondaryInstitutionsById'
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  string $if_none_match The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPostSecondaryInstitutionsById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPostSecondaryInstitutionsByIdRequest($id, $if_none_match = null, $use_snapshot = false, string $contentType = self::contentTypes['getPostSecondaryInstitutionsById'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getPostSecondaryInstitutionsById'
            );
        }




        $resourcePath = '/ed-fi/postSecondaryInstitutions/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }
        // header params
        if ($use_snapshot !== null) {
            $headerParams['Use-Snapshot'] = ObjectSerializer::toHeaderValue($use_snapshot);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPostSecondaryInstitutionsPartitions
     *
     * Retrieves a set of page tokens to be used for efficient client-side parallel processing.
     *
     * @param  int $number The number of evenly distributed partitions to provide for client-side parallel processing. If unspecified, a reasonable set of partitions will be determined based on the total number of accessible items. (optional)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  int $post_secondary_institution_id The ID of the post secondary institution. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication. (optional)
     * @param  string $administrative_funding_control_descriptor A classification of whether a postsecondary institution is operated by publicly elected or appointed officials (public control) or by privately elected or appointed officials and derives its major source of funds from private sources (private control). (optional)
     * @param  string $post_secondary_institution_level_descriptor A classification of whether a post secondary institution&#39;s highest level of offering is a program of 4-years or higher (4 year), 2-but-less-than 4-years (2 year), or less than 2-years. (optional)
     * @param  string $operational_status_descriptor The current operational status of the education organization (e.g., active, inactive). (optional)
     * @param  string $id  (optional)
     * @param  string $name_of_institution The full, legally accepted name of the institution. (optional)
     * @param  string $short_name_of_institution A short name for the institution. (optional)
     * @param  string $web_site The public web site address (URL) for the education organization. (optional)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     * @param  string $education_organization_identification_system_descriptor The school system, state, or agency assigning the identification code. (optional)
     * @param  string $identification_code A unique number or alphanumeric code that is assigned to an education organization by a school, school system, state, or other agency or entity. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPostSecondaryInstitutionsPartitions'] to see the possible values for this operation
     *
     * @throws \Resources\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return |\Resources\Model\GetAcademicWeeksPartitions200Response
     */
    public function getPostSecondaryInstitutionsPartitions($number = null, $min_change_version = null, $max_change_version = null, $post_secondary_institution_id = null, $administrative_funding_control_descriptor = null, $post_secondary_institution_level_descriptor = null, $operational_status_descriptor = null, $id = null, $name_of_institution = null, $short_name_of_institution = null, $web_site = null, $use_snapshot = false, $education_organization_identification_system_descriptor = null, $identification_code = null, string $contentType = self::contentTypes['getPostSecondaryInstitutionsPartitions'][0])
    {
        list($response) = $this->getPostSecondaryInstitutionsPartitionsWithHttpInfo($number, $min_change_version, $max_change_version, $post_secondary_institution_id, $administrative_funding_control_descriptor, $post_secondary_institution_level_descriptor, $operational_status_descriptor, $id, $name_of_institution, $short_name_of_institution, $web_site, $use_snapshot, $education_organization_identification_system_descriptor, $identification_code, $contentType);
        return $response;
    }

    /**
     * Operation getPostSecondaryInstitutionsPartitionsWithHttpInfo
     *
     * Retrieves a set of page tokens to be used for efficient client-side parallel processing.
     *
     * @param  int $number The number of evenly distributed partitions to provide for client-side parallel processing. If unspecified, a reasonable set of partitions will be determined based on the total number of accessible items. (optional)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  int $post_secondary_institution_id The ID of the post secondary institution. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication. (optional)
     * @param  string $administrative_funding_control_descriptor A classification of whether a postsecondary institution is operated by publicly elected or appointed officials (public control) or by privately elected or appointed officials and derives its major source of funds from private sources (private control). (optional)
     * @param  string $post_secondary_institution_level_descriptor A classification of whether a post secondary institution&#39;s highest level of offering is a program of 4-years or higher (4 year), 2-but-less-than 4-years (2 year), or less than 2-years. (optional)
     * @param  string $operational_status_descriptor The current operational status of the education organization (e.g., active, inactive). (optional)
     * @param  string $id  (optional)
     * @param  string $name_of_institution The full, legally accepted name of the institution. (optional)
     * @param  string $short_name_of_institution A short name for the institution. (optional)
     * @param  string $web_site The public web site address (URL) for the education organization. (optional)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     * @param  string $education_organization_identification_system_descriptor The school system, state, or agency assigning the identification code. (optional)
     * @param  string $identification_code A unique number or alphanumeric code that is assigned to an education organization by a school, school system, state, or other agency or entity. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPostSecondaryInstitutionsPartitions'] to see the possible values for this operation
     *
     * @throws \Resources\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of |\Resources\Model\GetAcademicWeeksPartitions200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPostSecondaryInstitutionsPartitionsWithHttpInfo($number = null, $min_change_version = null, $max_change_version = null, $post_secondary_institution_id = null, $administrative_funding_control_descriptor = null, $post_secondary_institution_level_descriptor = null, $operational_status_descriptor = null, $id = null, $name_of_institution = null, $short_name_of_institution = null, $web_site = null, $use_snapshot = false, $education_organization_identification_system_descriptor = null, $identification_code = null, string $contentType = self::contentTypes['getPostSecondaryInstitutionsPartitions'][0])
    {
        $request = $this->getPostSecondaryInstitutionsPartitionsRequest($number, $min_change_version, $max_change_version, $post_secondary_institution_id, $administrative_funding_control_descriptor, $post_secondary_institution_level_descriptor, $operational_status_descriptor, $id, $name_of_institution, $short_name_of_institution, $web_site, $use_snapshot, $education_organization_identification_system_descriptor, $identification_code, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Resources\Model\GetAcademicWeeksPartitions200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Resources\Model\GetAcademicWeeksPartitions200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Resources\Model\GetAcademicWeeksPartitions200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Resources\Model\GetAcademicWeeksPartitions200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Resources\Model\GetAcademicWeeksPartitions200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPostSecondaryInstitutionsPartitionsAsync
     *
     * Retrieves a set of page tokens to be used for efficient client-side parallel processing.
     *
     * @param  int $number The number of evenly distributed partitions to provide for client-side parallel processing. If unspecified, a reasonable set of partitions will be determined based on the total number of accessible items. (optional)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  int $post_secondary_institution_id The ID of the post secondary institution. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication. (optional)
     * @param  string $administrative_funding_control_descriptor A classification of whether a postsecondary institution is operated by publicly elected or appointed officials (public control) or by privately elected or appointed officials and derives its major source of funds from private sources (private control). (optional)
     * @param  string $post_secondary_institution_level_descriptor A classification of whether a post secondary institution&#39;s highest level of offering is a program of 4-years or higher (4 year), 2-but-less-than 4-years (2 year), or less than 2-years. (optional)
     * @param  string $operational_status_descriptor The current operational status of the education organization (e.g., active, inactive). (optional)
     * @param  string $id  (optional)
     * @param  string $name_of_institution The full, legally accepted name of the institution. (optional)
     * @param  string $short_name_of_institution A short name for the institution. (optional)
     * @param  string $web_site The public web site address (URL) for the education organization. (optional)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     * @param  string $education_organization_identification_system_descriptor The school system, state, or agency assigning the identification code. (optional)
     * @param  string $identification_code A unique number or alphanumeric code that is assigned to an education organization by a school, school system, state, or other agency or entity. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPostSecondaryInstitutionsPartitions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPostSecondaryInstitutionsPartitionsAsync($number = null, $min_change_version = null, $max_change_version = null, $post_secondary_institution_id = null, $administrative_funding_control_descriptor = null, $post_secondary_institution_level_descriptor = null, $operational_status_descriptor = null, $id = null, $name_of_institution = null, $short_name_of_institution = null, $web_site = null, $use_snapshot = false, $education_organization_identification_system_descriptor = null, $identification_code = null, string $contentType = self::contentTypes['getPostSecondaryInstitutionsPartitions'][0])
    {
        return $this->getPostSecondaryInstitutionsPartitionsAsyncWithHttpInfo($number, $min_change_version, $max_change_version, $post_secondary_institution_id, $administrative_funding_control_descriptor, $post_secondary_institution_level_descriptor, $operational_status_descriptor, $id, $name_of_institution, $short_name_of_institution, $web_site, $use_snapshot, $education_organization_identification_system_descriptor, $identification_code, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPostSecondaryInstitutionsPartitionsAsyncWithHttpInfo
     *
     * Retrieves a set of page tokens to be used for efficient client-side parallel processing.
     *
     * @param  int $number The number of evenly distributed partitions to provide for client-side parallel processing. If unspecified, a reasonable set of partitions will be determined based on the total number of accessible items. (optional)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  int $post_secondary_institution_id The ID of the post secondary institution. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication. (optional)
     * @param  string $administrative_funding_control_descriptor A classification of whether a postsecondary institution is operated by publicly elected or appointed officials (public control) or by privately elected or appointed officials and derives its major source of funds from private sources (private control). (optional)
     * @param  string $post_secondary_institution_level_descriptor A classification of whether a post secondary institution&#39;s highest level of offering is a program of 4-years or higher (4 year), 2-but-less-than 4-years (2 year), or less than 2-years. (optional)
     * @param  string $operational_status_descriptor The current operational status of the education organization (e.g., active, inactive). (optional)
     * @param  string $id  (optional)
     * @param  string $name_of_institution The full, legally accepted name of the institution. (optional)
     * @param  string $short_name_of_institution A short name for the institution. (optional)
     * @param  string $web_site The public web site address (URL) for the education organization. (optional)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     * @param  string $education_organization_identification_system_descriptor The school system, state, or agency assigning the identification code. (optional)
     * @param  string $identification_code A unique number or alphanumeric code that is assigned to an education organization by a school, school system, state, or other agency or entity. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPostSecondaryInstitutionsPartitions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPostSecondaryInstitutionsPartitionsAsyncWithHttpInfo($number = null, $min_change_version = null, $max_change_version = null, $post_secondary_institution_id = null, $administrative_funding_control_descriptor = null, $post_secondary_institution_level_descriptor = null, $operational_status_descriptor = null, $id = null, $name_of_institution = null, $short_name_of_institution = null, $web_site = null, $use_snapshot = false, $education_organization_identification_system_descriptor = null, $identification_code = null, string $contentType = self::contentTypes['getPostSecondaryInstitutionsPartitions'][0])
    {
        $returnType = '\Resources\Model\GetAcademicWeeksPartitions200Response';
        $request = $this->getPostSecondaryInstitutionsPartitionsRequest($number, $min_change_version, $max_change_version, $post_secondary_institution_id, $administrative_funding_control_descriptor, $post_secondary_institution_level_descriptor, $operational_status_descriptor, $id, $name_of_institution, $short_name_of_institution, $web_site, $use_snapshot, $education_organization_identification_system_descriptor, $identification_code, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPostSecondaryInstitutionsPartitions'
     *
     * @param  int $number The number of evenly distributed partitions to provide for client-side parallel processing. If unspecified, a reasonable set of partitions will be determined based on the total number of accessible items. (optional)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  int $post_secondary_institution_id The ID of the post secondary institution. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication. (optional)
     * @param  string $administrative_funding_control_descriptor A classification of whether a postsecondary institution is operated by publicly elected or appointed officials (public control) or by privately elected or appointed officials and derives its major source of funds from private sources (private control). (optional)
     * @param  string $post_secondary_institution_level_descriptor A classification of whether a post secondary institution&#39;s highest level of offering is a program of 4-years or higher (4 year), 2-but-less-than 4-years (2 year), or less than 2-years. (optional)
     * @param  string $operational_status_descriptor The current operational status of the education organization (e.g., active, inactive). (optional)
     * @param  string $id  (optional)
     * @param  string $name_of_institution The full, legally accepted name of the institution. (optional)
     * @param  string $short_name_of_institution A short name for the institution. (optional)
     * @param  string $web_site The public web site address (URL) for the education organization. (optional)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     * @param  string $education_organization_identification_system_descriptor The school system, state, or agency assigning the identification code. (optional)
     * @param  string $identification_code A unique number or alphanumeric code that is assigned to an education organization by a school, school system, state, or other agency or entity. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPostSecondaryInstitutionsPartitions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPostSecondaryInstitutionsPartitionsRequest($number = null, $min_change_version = null, $max_change_version = null, $post_secondary_institution_id = null, $administrative_funding_control_descriptor = null, $post_secondary_institution_level_descriptor = null, $operational_status_descriptor = null, $id = null, $name_of_institution = null, $short_name_of_institution = null, $web_site = null, $use_snapshot = false, $education_organization_identification_system_descriptor = null, $identification_code = null, string $contentType = self::contentTypes['getPostSecondaryInstitutionsPartitions'][0])
    {

        if ($number !== null && $number > 200) {
            throw new \InvalidArgumentException('invalid value for "$number" when calling PostSecondaryInstitutionsApi.getPostSecondaryInstitutionsPartitions, must be smaller than or equal to 200.');
        }
        if ($number !== null && $number < 1) {
            throw new \InvalidArgumentException('invalid value for "$number" when calling PostSecondaryInstitutionsApi.getPostSecondaryInstitutionsPartitions, must be bigger than or equal to 1.');
        }
        



        if ($administrative_funding_control_descriptor !== null && strlen($administrative_funding_control_descriptor) > 306) {
            throw new \InvalidArgumentException('invalid length for "$administrative_funding_control_descriptor" when calling PostSecondaryInstitutionsApi.getPostSecondaryInstitutionsPartitions, must be smaller than or equal to 306.');
        }
        
        if ($post_secondary_institution_level_descriptor !== null && strlen($post_secondary_institution_level_descriptor) > 306) {
            throw new \InvalidArgumentException('invalid length for "$post_secondary_institution_level_descriptor" when calling PostSecondaryInstitutionsApi.getPostSecondaryInstitutionsPartitions, must be smaller than or equal to 306.');
        }
        
        if ($operational_status_descriptor !== null && strlen($operational_status_descriptor) > 306) {
            throw new \InvalidArgumentException('invalid length for "$operational_status_descriptor" when calling PostSecondaryInstitutionsApi.getPostSecondaryInstitutionsPartitions, must be smaller than or equal to 306.');
        }
        

        if ($name_of_institution !== null && strlen($name_of_institution) > 75) {
            throw new \InvalidArgumentException('invalid length for "$name_of_institution" when calling PostSecondaryInstitutionsApi.getPostSecondaryInstitutionsPartitions, must be smaller than or equal to 75.');
        }
        
        if ($short_name_of_institution !== null && strlen($short_name_of_institution) > 75) {
            throw new \InvalidArgumentException('invalid length for "$short_name_of_institution" when calling PostSecondaryInstitutionsApi.getPostSecondaryInstitutionsPartitions, must be smaller than or equal to 75.');
        }
        
        if ($web_site !== null && strlen($web_site) > 255) {
            throw new \InvalidArgumentException('invalid length for "$web_site" when calling PostSecondaryInstitutionsApi.getPostSecondaryInstitutionsPartitions, must be smaller than or equal to 255.');
        }
        

        if ($education_organization_identification_system_descriptor !== null && strlen($education_organization_identification_system_descriptor) > 306) {
            throw new \InvalidArgumentException('invalid length for "$education_organization_identification_system_descriptor" when calling PostSecondaryInstitutionsApi.getPostSecondaryInstitutionsPartitions, must be smaller than or equal to 306.');
        }
        
        if ($identification_code !== null && strlen($identification_code) > 60) {
            throw new \InvalidArgumentException('invalid length for "$identification_code" when calling PostSecondaryInstitutionsApi.getPostSecondaryInstitutionsPartitions, must be smaller than or equal to 60.');
        }
        

        $resourcePath = '/ed-fi/postSecondaryInstitutions/partitions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $number,
            'number', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_change_version,
            'minChangeVersion', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_change_version,
            'maxChangeVersion', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $post_secondary_institution_id,
            'postSecondaryInstitutionId', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $administrative_funding_control_descriptor,
            'administrativeFundingControlDescriptor', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $post_secondary_institution_level_descriptor,
            'postSecondaryInstitutionLevelDescriptor', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $operational_status_descriptor,
            'operationalStatusDescriptor', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id,
            'id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $name_of_institution,
            'nameOfInstitution', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $short_name_of_institution,
            'shortNameOfInstitution', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $web_site,
            'webSite', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $education_organization_identification_system_descriptor,
            'educationOrganizationIdentificationSystemDescriptor', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $identification_code,
            'identificationCode', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($use_snapshot !== null) {
            $headerParams['Use-Snapshot'] = ObjectSerializer::toHeaderValue($use_snapshot);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation keyChangesPostSecondaryInstitutions
     *
     * Retrieves resources key changes based on change version.
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['keyChangesPostSecondaryInstitutions'] to see the possible values for this operation
     *
     * @throws \Resources\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return |\Resources\Model\TrackedChangesEdFiPostSecondaryInstitutionKeyChange[]
     */
    public function keyChangesPostSecondaryInstitutions($offset = null, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $use_snapshot = false, string $contentType = self::contentTypes['keyChangesPostSecondaryInstitutions'][0])
    {
        list($response) = $this->keyChangesPostSecondaryInstitutionsWithHttpInfo($offset, $limit, $min_change_version, $max_change_version, $total_count, $use_snapshot, $contentType);
        return $response;
    }

    /**
     * Operation keyChangesPostSecondaryInstitutionsWithHttpInfo
     *
     * Retrieves resources key changes based on change version.
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['keyChangesPostSecondaryInstitutions'] to see the possible values for this operation
     *
     * @throws \Resources\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of |\Resources\Model\TrackedChangesEdFiPostSecondaryInstitutionKeyChange[], HTTP status code, HTTP response headers (array of strings)
     */
    public function keyChangesPostSecondaryInstitutionsWithHttpInfo($offset = null, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $use_snapshot = false, string $contentType = self::contentTypes['keyChangesPostSecondaryInstitutions'][0])
    {
        $request = $this->keyChangesPostSecondaryInstitutionsRequest($offset, $limit, $min_change_version, $max_change_version, $total_count, $use_snapshot, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Resources\Model\TrackedChangesEdFiPostSecondaryInstitutionKeyChange[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Resources\Model\TrackedChangesEdFiPostSecondaryInstitutionKeyChange[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Resources\Model\TrackedChangesEdFiPostSecondaryInstitutionKeyChange[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Resources\Model\TrackedChangesEdFiPostSecondaryInstitutionKeyChange[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Resources\Model\TrackedChangesEdFiPostSecondaryInstitutionKeyChange[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation keyChangesPostSecondaryInstitutionsAsync
     *
     * Retrieves resources key changes based on change version.
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['keyChangesPostSecondaryInstitutions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function keyChangesPostSecondaryInstitutionsAsync($offset = null, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $use_snapshot = false, string $contentType = self::contentTypes['keyChangesPostSecondaryInstitutions'][0])
    {
        return $this->keyChangesPostSecondaryInstitutionsAsyncWithHttpInfo($offset, $limit, $min_change_version, $max_change_version, $total_count, $use_snapshot, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation keyChangesPostSecondaryInstitutionsAsyncWithHttpInfo
     *
     * Retrieves resources key changes based on change version.
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['keyChangesPostSecondaryInstitutions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function keyChangesPostSecondaryInstitutionsAsyncWithHttpInfo($offset = null, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $use_snapshot = false, string $contentType = self::contentTypes['keyChangesPostSecondaryInstitutions'][0])
    {
        $returnType = '\Resources\Model\TrackedChangesEdFiPostSecondaryInstitutionKeyChange[]';
        $request = $this->keyChangesPostSecondaryInstitutionsRequest($offset, $limit, $min_change_version, $max_change_version, $total_count, $use_snapshot, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'keyChangesPostSecondaryInstitutions'
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['keyChangesPostSecondaryInstitutions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function keyChangesPostSecondaryInstitutionsRequest($offset = null, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $use_snapshot = false, string $contentType = self::contentTypes['keyChangesPostSecondaryInstitutions'][0])
    {


        if ($limit !== null && $limit > 500) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling PostSecondaryInstitutionsApi.keyChangesPostSecondaryInstitutions, must be smaller than or equal to 500.');
        }
        if ($limit !== null && $limit < 0) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling PostSecondaryInstitutionsApi.keyChangesPostSecondaryInstitutions, must be bigger than or equal to 0.');
        }
        





        $resourcePath = '/ed-fi/postSecondaryInstitutions/keyChanges';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_change_version,
            'minChangeVersion', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_change_version,
            'maxChangeVersion', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $total_count,
            'totalCount', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($use_snapshot !== null) {
            $headerParams['Use-Snapshot'] = ObjectSerializer::toHeaderValue($use_snapshot);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postPostSecondaryInstitution
     *
     * Creates or updates resources based on the natural key values of the supplied resource.
     *
     * @param  \Resources\Model\EdFiPostSecondaryInstitution $ed_fi_post_secondary_institution The JSON representation of the \&quot;postSecondaryInstitution\&quot; resource to be created or updated. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postPostSecondaryInstitution'] to see the possible values for this operation
     *
     * @throws \Resources\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function postPostSecondaryInstitution($ed_fi_post_secondary_institution, string $contentType = self::contentTypes['postPostSecondaryInstitution'][0])
    {
        $this->postPostSecondaryInstitutionWithHttpInfo($ed_fi_post_secondary_institution, $contentType);
    }

    /**
     * Operation postPostSecondaryInstitutionWithHttpInfo
     *
     * Creates or updates resources based on the natural key values of the supplied resource.
     *
     * @param  \Resources\Model\EdFiPostSecondaryInstitution $ed_fi_post_secondary_institution The JSON representation of the \&quot;postSecondaryInstitution\&quot; resource to be created or updated. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postPostSecondaryInstitution'] to see the possible values for this operation
     *
     * @throws \Resources\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function postPostSecondaryInstitutionWithHttpInfo($ed_fi_post_secondary_institution, string $contentType = self::contentTypes['postPostSecondaryInstitution'][0])
    {
        $request = $this->postPostSecondaryInstitutionRequest($ed_fi_post_secondary_institution, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation postPostSecondaryInstitutionAsync
     *
     * Creates or updates resources based on the natural key values of the supplied resource.
     *
     * @param  \Resources\Model\EdFiPostSecondaryInstitution $ed_fi_post_secondary_institution The JSON representation of the \&quot;postSecondaryInstitution\&quot; resource to be created or updated. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postPostSecondaryInstitution'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postPostSecondaryInstitutionAsync($ed_fi_post_secondary_institution, string $contentType = self::contentTypes['postPostSecondaryInstitution'][0])
    {
        return $this->postPostSecondaryInstitutionAsyncWithHttpInfo($ed_fi_post_secondary_institution, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postPostSecondaryInstitutionAsyncWithHttpInfo
     *
     * Creates or updates resources based on the natural key values of the supplied resource.
     *
     * @param  \Resources\Model\EdFiPostSecondaryInstitution $ed_fi_post_secondary_institution The JSON representation of the \&quot;postSecondaryInstitution\&quot; resource to be created or updated. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postPostSecondaryInstitution'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postPostSecondaryInstitutionAsyncWithHttpInfo($ed_fi_post_secondary_institution, string $contentType = self::contentTypes['postPostSecondaryInstitution'][0])
    {
        $returnType = '';
        $request = $this->postPostSecondaryInstitutionRequest($ed_fi_post_secondary_institution, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postPostSecondaryInstitution'
     *
     * @param  \Resources\Model\EdFiPostSecondaryInstitution $ed_fi_post_secondary_institution The JSON representation of the \&quot;postSecondaryInstitution\&quot; resource to be created or updated. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postPostSecondaryInstitution'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postPostSecondaryInstitutionRequest($ed_fi_post_secondary_institution, string $contentType = self::contentTypes['postPostSecondaryInstitution'][0])
    {

        // verify the required parameter 'ed_fi_post_secondary_institution' is set
        if ($ed_fi_post_secondary_institution === null || (is_array($ed_fi_post_secondary_institution) && count($ed_fi_post_secondary_institution) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ed_fi_post_secondary_institution when calling postPostSecondaryInstitution'
            );
        }


        $resourcePath = '/ed-fi/postSecondaryInstitutions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($ed_fi_post_secondary_institution)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($ed_fi_post_secondary_institution));
            } else {
                $httpBody = $ed_fi_post_secondary_institution;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putPostSecondaryInstitution
     *
     * Updates a resource based on the resource identifier.
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  \Resources\Model\EdFiPostSecondaryInstitution $ed_fi_post_secondary_institution The JSON representation of the \&quot;postSecondaryInstitution\&quot; resource to be created or updated. (required)
     * @param  string $if_match The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putPostSecondaryInstitution'] to see the possible values for this operation
     *
     * @throws \Resources\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function putPostSecondaryInstitution($id, $ed_fi_post_secondary_institution, $if_match = null, string $contentType = self::contentTypes['putPostSecondaryInstitution'][0])
    {
        $this->putPostSecondaryInstitutionWithHttpInfo($id, $ed_fi_post_secondary_institution, $if_match, $contentType);
    }

    /**
     * Operation putPostSecondaryInstitutionWithHttpInfo
     *
     * Updates a resource based on the resource identifier.
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  \Resources\Model\EdFiPostSecondaryInstitution $ed_fi_post_secondary_institution The JSON representation of the \&quot;postSecondaryInstitution\&quot; resource to be created or updated. (required)
     * @param  string $if_match The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putPostSecondaryInstitution'] to see the possible values for this operation
     *
     * @throws \Resources\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function putPostSecondaryInstitutionWithHttpInfo($id, $ed_fi_post_secondary_institution, $if_match = null, string $contentType = self::contentTypes['putPostSecondaryInstitution'][0])
    {
        $request = $this->putPostSecondaryInstitutionRequest($id, $ed_fi_post_secondary_institution, $if_match, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation putPostSecondaryInstitutionAsync
     *
     * Updates a resource based on the resource identifier.
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  \Resources\Model\EdFiPostSecondaryInstitution $ed_fi_post_secondary_institution The JSON representation of the \&quot;postSecondaryInstitution\&quot; resource to be created or updated. (required)
     * @param  string $if_match The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putPostSecondaryInstitution'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putPostSecondaryInstitutionAsync($id, $ed_fi_post_secondary_institution, $if_match = null, string $contentType = self::contentTypes['putPostSecondaryInstitution'][0])
    {
        return $this->putPostSecondaryInstitutionAsyncWithHttpInfo($id, $ed_fi_post_secondary_institution, $if_match, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putPostSecondaryInstitutionAsyncWithHttpInfo
     *
     * Updates a resource based on the resource identifier.
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  \Resources\Model\EdFiPostSecondaryInstitution $ed_fi_post_secondary_institution The JSON representation of the \&quot;postSecondaryInstitution\&quot; resource to be created or updated. (required)
     * @param  string $if_match The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putPostSecondaryInstitution'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putPostSecondaryInstitutionAsyncWithHttpInfo($id, $ed_fi_post_secondary_institution, $if_match = null, string $contentType = self::contentTypes['putPostSecondaryInstitution'][0])
    {
        $returnType = '';
        $request = $this->putPostSecondaryInstitutionRequest($id, $ed_fi_post_secondary_institution, $if_match, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putPostSecondaryInstitution'
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  \Resources\Model\EdFiPostSecondaryInstitution $ed_fi_post_secondary_institution The JSON representation of the \&quot;postSecondaryInstitution\&quot; resource to be created or updated. (required)
     * @param  string $if_match The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putPostSecondaryInstitution'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function putPostSecondaryInstitutionRequest($id, $ed_fi_post_secondary_institution, $if_match = null, string $contentType = self::contentTypes['putPostSecondaryInstitution'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling putPostSecondaryInstitution'
            );
        }

        // verify the required parameter 'ed_fi_post_secondary_institution' is set
        if ($ed_fi_post_secondary_institution === null || (is_array($ed_fi_post_secondary_institution) && count($ed_fi_post_secondary_institution) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ed_fi_post_secondary_institution when calling putPostSecondaryInstitution'
            );
        }



        $resourcePath = '/ed-fi/postSecondaryInstitutions/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($if_match !== null) {
            $headerParams['If-Match'] = ObjectSerializer::toHeaderValue($if_match);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($ed_fi_post_secondary_institution)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($ed_fi_post_secondary_institution));
            } else {
                $httpBody = $ed_fi_post_secondary_institution;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
