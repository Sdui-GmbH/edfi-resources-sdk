<?php
/**
 * StudentSection504ProgramAssociationsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Resources
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Resources\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Resources\ApiException;
use Resources\Configuration;
use Resources\HeaderSelector;
use Resources\ObjectSerializer;

/**
 * StudentSection504ProgramAssociationsApi Class Doc Comment
 *
 * @category Class
 * @package  Resources
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class StudentSection504ProgramAssociationsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'deleteStudentSection504ProgramAssociationById' => [
            'application/json',
        ],
        'deletesStudentSection504ProgramAssociations' => [
            'application/json',
        ],
        'getStudentSection504ProgramAssociations' => [
            'application/json',
        ],
        'getStudentSection504ProgramAssociationsById' => [
            'application/json',
        ],
        'getStudentSection504ProgramAssociationsPartitions' => [
            'application/json',
        ],
        'keyChangesStudentSection504ProgramAssociations' => [
            'application/json',
        ],
        'postStudentSection504ProgramAssociation' => [
            'application/json',
        ],
        'putStudentSection504ProgramAssociation' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation deleteStudentSection504ProgramAssociationById
     *
     * Deletes an existing resource using the resource identifier.
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  string $if_match The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteStudentSection504ProgramAssociationById'] to see the possible values for this operation
     *
     * @throws \Resources\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteStudentSection504ProgramAssociationById($id, $if_match = null, string $contentType = self::contentTypes['deleteStudentSection504ProgramAssociationById'][0])
    {
        $this->deleteStudentSection504ProgramAssociationByIdWithHttpInfo($id, $if_match, $contentType);
    }

    /**
     * Operation deleteStudentSection504ProgramAssociationByIdWithHttpInfo
     *
     * Deletes an existing resource using the resource identifier.
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  string $if_match The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteStudentSection504ProgramAssociationById'] to see the possible values for this operation
     *
     * @throws \Resources\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteStudentSection504ProgramAssociationByIdWithHttpInfo($id, $if_match = null, string $contentType = self::contentTypes['deleteStudentSection504ProgramAssociationById'][0])
    {
        $request = $this->deleteStudentSection504ProgramAssociationByIdRequest($id, $if_match, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteStudentSection504ProgramAssociationByIdAsync
     *
     * Deletes an existing resource using the resource identifier.
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  string $if_match The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteStudentSection504ProgramAssociationById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteStudentSection504ProgramAssociationByIdAsync($id, $if_match = null, string $contentType = self::contentTypes['deleteStudentSection504ProgramAssociationById'][0])
    {
        return $this->deleteStudentSection504ProgramAssociationByIdAsyncWithHttpInfo($id, $if_match, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteStudentSection504ProgramAssociationByIdAsyncWithHttpInfo
     *
     * Deletes an existing resource using the resource identifier.
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  string $if_match The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteStudentSection504ProgramAssociationById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteStudentSection504ProgramAssociationByIdAsyncWithHttpInfo($id, $if_match = null, string $contentType = self::contentTypes['deleteStudentSection504ProgramAssociationById'][0])
    {
        $returnType = '';
        $request = $this->deleteStudentSection504ProgramAssociationByIdRequest($id, $if_match, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteStudentSection504ProgramAssociationById'
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  string $if_match The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteStudentSection504ProgramAssociationById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteStudentSection504ProgramAssociationByIdRequest($id, $if_match = null, string $contentType = self::contentTypes['deleteStudentSection504ProgramAssociationById'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteStudentSection504ProgramAssociationById'
            );
        }



        $resourcePath = '/ed-fi/studentSection504ProgramAssociations/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($if_match !== null) {
            $headerParams['If-Match'] = ObjectSerializer::toHeaderValue($if_match);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deletesStudentSection504ProgramAssociations
     *
     * Retrieves deleted resources based on change version.
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletesStudentSection504ProgramAssociations'] to see the possible values for this operation
     *
     * @throws \Resources\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return |\Resources\Model\TrackedChangesEdFiStudentSection504ProgramAssociationDelete[]
     */
    public function deletesStudentSection504ProgramAssociations($offset = null, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $use_snapshot = false, string $contentType = self::contentTypes['deletesStudentSection504ProgramAssociations'][0])
    {
        list($response) = $this->deletesStudentSection504ProgramAssociationsWithHttpInfo($offset, $limit, $min_change_version, $max_change_version, $total_count, $use_snapshot, $contentType);
        return $response;
    }

    /**
     * Operation deletesStudentSection504ProgramAssociationsWithHttpInfo
     *
     * Retrieves deleted resources based on change version.
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletesStudentSection504ProgramAssociations'] to see the possible values for this operation
     *
     * @throws \Resources\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of |\Resources\Model\TrackedChangesEdFiStudentSection504ProgramAssociationDelete[], HTTP status code, HTTP response headers (array of strings)
     */
    public function deletesStudentSection504ProgramAssociationsWithHttpInfo($offset = null, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $use_snapshot = false, string $contentType = self::contentTypes['deletesStudentSection504ProgramAssociations'][0])
    {
        $request = $this->deletesStudentSection504ProgramAssociationsRequest($offset, $limit, $min_change_version, $max_change_version, $total_count, $use_snapshot, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Resources\Model\TrackedChangesEdFiStudentSection504ProgramAssociationDelete[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Resources\Model\TrackedChangesEdFiStudentSection504ProgramAssociationDelete[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Resources\Model\TrackedChangesEdFiStudentSection504ProgramAssociationDelete[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Resources\Model\TrackedChangesEdFiStudentSection504ProgramAssociationDelete[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Resources\Model\TrackedChangesEdFiStudentSection504ProgramAssociationDelete[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deletesStudentSection504ProgramAssociationsAsync
     *
     * Retrieves deleted resources based on change version.
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletesStudentSection504ProgramAssociations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deletesStudentSection504ProgramAssociationsAsync($offset = null, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $use_snapshot = false, string $contentType = self::contentTypes['deletesStudentSection504ProgramAssociations'][0])
    {
        return $this->deletesStudentSection504ProgramAssociationsAsyncWithHttpInfo($offset, $limit, $min_change_version, $max_change_version, $total_count, $use_snapshot, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deletesStudentSection504ProgramAssociationsAsyncWithHttpInfo
     *
     * Retrieves deleted resources based on change version.
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletesStudentSection504ProgramAssociations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deletesStudentSection504ProgramAssociationsAsyncWithHttpInfo($offset = null, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $use_snapshot = false, string $contentType = self::contentTypes['deletesStudentSection504ProgramAssociations'][0])
    {
        $returnType = '\Resources\Model\TrackedChangesEdFiStudentSection504ProgramAssociationDelete[]';
        $request = $this->deletesStudentSection504ProgramAssociationsRequest($offset, $limit, $min_change_version, $max_change_version, $total_count, $use_snapshot, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deletesStudentSection504ProgramAssociations'
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletesStudentSection504ProgramAssociations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deletesStudentSection504ProgramAssociationsRequest($offset = null, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $use_snapshot = false, string $contentType = self::contentTypes['deletesStudentSection504ProgramAssociations'][0])
    {


        if ($limit !== null && $limit > 500) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling StudentSection504ProgramAssociationsApi.deletesStudentSection504ProgramAssociations, must be smaller than or equal to 500.');
        }
        if ($limit !== null && $limit < 0) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling StudentSection504ProgramAssociationsApi.deletesStudentSection504ProgramAssociations, must be bigger than or equal to 0.');
        }
        





        $resourcePath = '/ed-fi/studentSection504ProgramAssociations/deletes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_change_version,
            'minChangeVersion', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_change_version,
            'maxChangeVersion', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $total_count,
            'totalCount', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($use_snapshot !== null) {
            $headerParams['Use-Snapshot'] = ObjectSerializer::toHeaderValue($use_snapshot);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getStudentSection504ProgramAssociations
     *
     * Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  string $page_token The token of the page to retrieve, obtained either from the \&quot;Next-Page-Token\&quot; header of the previous request, or from the \&quot;partitions\&quot; endpoint for the resource. Cannot be used with limit/offset paging. (optional)
     * @param  int $page_size The maximum number of items to retrieve in the page. For use with pageToken (cursor paging) only. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)
     * @param  \DateTime $begin_date The earliest date the student is involved with the program. Typically, this is the date the student becomes eligible for the program.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines. (optional)
     * @param  int $education_organization_id The identifier assigned to an education organization. (optional)
     * @param  int $program_education_organization_id The identifier assigned to an education organization. (optional)
     * @param  string $program_name The formal name of the program of instruction, training, services, or benefits available through federal, state, or local agencies. (optional)
     * @param  string $program_type_descriptor The type of program. (optional)
     * @param  string $student_unique_id A unique alphanumeric code assigned to a student. (optional)
     * @param  string $section504_disability_descriptor Defines one or more disabilities student has that qualifies them for a Section 504 plan. (optional)
     * @param  bool $accommodation_plan Indicates whether student has a Section 504 accommodation plan. (optional)
     * @param  bool $section504_eligibility Indicates whether student has a disability, either temporary or permenant, that qualifies student for Section 504 consideration. Selection of FALSE for this boolean is equivalent to marking student as &#39;Did Not Qualify&#39;. (optional)
     * @param  \DateTime $section504_eligibility_decision_date The month, day, and year on which the Section 504 eligibility decision is made. (optional)
     * @param  \DateTime $section504_meeting_date The month, day, and year on which the meeting with student&#39;s parent/guardian held to discuss the 504 eligibility of the student. (optional)
     * @param  string $reason_exited_descriptor The reason the student left the program within a school or district. (optional)
     * @param  \DateTime $end_date The month, day, and year on which the student exited the program or stopped receiving services.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines. (optional)
     * @param  string $id  (optional)
     * @param  bool $served_outside_of_regular_session Indicates whether the student received services during the summer session or between sessions. (optional)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStudentSection504ProgramAssociations'] to see the possible values for this operation
     *
     * @throws \Resources\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return |\Resources\Model\EdFiStudentSection504ProgramAssociation[]
     */
    public function getStudentSection504ProgramAssociations($offset = null, $limit = 25, $page_token = null, $page_size = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $begin_date = null, $education_organization_id = null, $program_education_organization_id = null, $program_name = null, $program_type_descriptor = null, $student_unique_id = null, $section504_disability_descriptor = null, $accommodation_plan = null, $section504_eligibility = null, $section504_eligibility_decision_date = null, $section504_meeting_date = null, $reason_exited_descriptor = null, $end_date = null, $id = null, $served_outside_of_regular_session = null, $use_snapshot = false, string $contentType = self::contentTypes['getStudentSection504ProgramAssociations'][0])
    {
        list($response) = $this->getStudentSection504ProgramAssociationsWithHttpInfo($offset, $limit, $page_token, $page_size, $min_change_version, $max_change_version, $total_count, $begin_date, $education_organization_id, $program_education_organization_id, $program_name, $program_type_descriptor, $student_unique_id, $section504_disability_descriptor, $accommodation_plan, $section504_eligibility, $section504_eligibility_decision_date, $section504_meeting_date, $reason_exited_descriptor, $end_date, $id, $served_outside_of_regular_session, $use_snapshot, $contentType);
        return $response;
    }

    /**
     * Operation getStudentSection504ProgramAssociationsWithHttpInfo
     *
     * Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  string $page_token The token of the page to retrieve, obtained either from the \&quot;Next-Page-Token\&quot; header of the previous request, or from the \&quot;partitions\&quot; endpoint for the resource. Cannot be used with limit/offset paging. (optional)
     * @param  int $page_size The maximum number of items to retrieve in the page. For use with pageToken (cursor paging) only. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)
     * @param  \DateTime $begin_date The earliest date the student is involved with the program. Typically, this is the date the student becomes eligible for the program.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines. (optional)
     * @param  int $education_organization_id The identifier assigned to an education organization. (optional)
     * @param  int $program_education_organization_id The identifier assigned to an education organization. (optional)
     * @param  string $program_name The formal name of the program of instruction, training, services, or benefits available through federal, state, or local agencies. (optional)
     * @param  string $program_type_descriptor The type of program. (optional)
     * @param  string $student_unique_id A unique alphanumeric code assigned to a student. (optional)
     * @param  string $section504_disability_descriptor Defines one or more disabilities student has that qualifies them for a Section 504 plan. (optional)
     * @param  bool $accommodation_plan Indicates whether student has a Section 504 accommodation plan. (optional)
     * @param  bool $section504_eligibility Indicates whether student has a disability, either temporary or permenant, that qualifies student for Section 504 consideration. Selection of FALSE for this boolean is equivalent to marking student as &#39;Did Not Qualify&#39;. (optional)
     * @param  \DateTime $section504_eligibility_decision_date The month, day, and year on which the Section 504 eligibility decision is made. (optional)
     * @param  \DateTime $section504_meeting_date The month, day, and year on which the meeting with student&#39;s parent/guardian held to discuss the 504 eligibility of the student. (optional)
     * @param  string $reason_exited_descriptor The reason the student left the program within a school or district. (optional)
     * @param  \DateTime $end_date The month, day, and year on which the student exited the program or stopped receiving services.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines. (optional)
     * @param  string $id  (optional)
     * @param  bool $served_outside_of_regular_session Indicates whether the student received services during the summer session or between sessions. (optional)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStudentSection504ProgramAssociations'] to see the possible values for this operation
     *
     * @throws \Resources\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of |\Resources\Model\EdFiStudentSection504ProgramAssociation[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getStudentSection504ProgramAssociationsWithHttpInfo($offset = null, $limit = 25, $page_token = null, $page_size = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $begin_date = null, $education_organization_id = null, $program_education_organization_id = null, $program_name = null, $program_type_descriptor = null, $student_unique_id = null, $section504_disability_descriptor = null, $accommodation_plan = null, $section504_eligibility = null, $section504_eligibility_decision_date = null, $section504_meeting_date = null, $reason_exited_descriptor = null, $end_date = null, $id = null, $served_outside_of_regular_session = null, $use_snapshot = false, string $contentType = self::contentTypes['getStudentSection504ProgramAssociations'][0])
    {
        $request = $this->getStudentSection504ProgramAssociationsRequest($offset, $limit, $page_token, $page_size, $min_change_version, $max_change_version, $total_count, $begin_date, $education_organization_id, $program_education_organization_id, $program_name, $program_type_descriptor, $student_unique_id, $section504_disability_descriptor, $accommodation_plan, $section504_eligibility, $section504_eligibility_decision_date, $section504_meeting_date, $reason_exited_descriptor, $end_date, $id, $served_outside_of_regular_session, $use_snapshot, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Resources\Model\EdFiStudentSection504ProgramAssociation[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Resources\Model\EdFiStudentSection504ProgramAssociation[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Resources\Model\EdFiStudentSection504ProgramAssociation[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Resources\Model\EdFiStudentSection504ProgramAssociation[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Resources\Model\EdFiStudentSection504ProgramAssociation[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getStudentSection504ProgramAssociationsAsync
     *
     * Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  string $page_token The token of the page to retrieve, obtained either from the \&quot;Next-Page-Token\&quot; header of the previous request, or from the \&quot;partitions\&quot; endpoint for the resource. Cannot be used with limit/offset paging. (optional)
     * @param  int $page_size The maximum number of items to retrieve in the page. For use with pageToken (cursor paging) only. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)
     * @param  \DateTime $begin_date The earliest date the student is involved with the program. Typically, this is the date the student becomes eligible for the program.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines. (optional)
     * @param  int $education_organization_id The identifier assigned to an education organization. (optional)
     * @param  int $program_education_organization_id The identifier assigned to an education organization. (optional)
     * @param  string $program_name The formal name of the program of instruction, training, services, or benefits available through federal, state, or local agencies. (optional)
     * @param  string $program_type_descriptor The type of program. (optional)
     * @param  string $student_unique_id A unique alphanumeric code assigned to a student. (optional)
     * @param  string $section504_disability_descriptor Defines one or more disabilities student has that qualifies them for a Section 504 plan. (optional)
     * @param  bool $accommodation_plan Indicates whether student has a Section 504 accommodation plan. (optional)
     * @param  bool $section504_eligibility Indicates whether student has a disability, either temporary or permenant, that qualifies student for Section 504 consideration. Selection of FALSE for this boolean is equivalent to marking student as &#39;Did Not Qualify&#39;. (optional)
     * @param  \DateTime $section504_eligibility_decision_date The month, day, and year on which the Section 504 eligibility decision is made. (optional)
     * @param  \DateTime $section504_meeting_date The month, day, and year on which the meeting with student&#39;s parent/guardian held to discuss the 504 eligibility of the student. (optional)
     * @param  string $reason_exited_descriptor The reason the student left the program within a school or district. (optional)
     * @param  \DateTime $end_date The month, day, and year on which the student exited the program or stopped receiving services.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines. (optional)
     * @param  string $id  (optional)
     * @param  bool $served_outside_of_regular_session Indicates whether the student received services during the summer session or between sessions. (optional)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStudentSection504ProgramAssociations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getStudentSection504ProgramAssociationsAsync($offset = null, $limit = 25, $page_token = null, $page_size = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $begin_date = null, $education_organization_id = null, $program_education_organization_id = null, $program_name = null, $program_type_descriptor = null, $student_unique_id = null, $section504_disability_descriptor = null, $accommodation_plan = null, $section504_eligibility = null, $section504_eligibility_decision_date = null, $section504_meeting_date = null, $reason_exited_descriptor = null, $end_date = null, $id = null, $served_outside_of_regular_session = null, $use_snapshot = false, string $contentType = self::contentTypes['getStudentSection504ProgramAssociations'][0])
    {
        return $this->getStudentSection504ProgramAssociationsAsyncWithHttpInfo($offset, $limit, $page_token, $page_size, $min_change_version, $max_change_version, $total_count, $begin_date, $education_organization_id, $program_education_organization_id, $program_name, $program_type_descriptor, $student_unique_id, $section504_disability_descriptor, $accommodation_plan, $section504_eligibility, $section504_eligibility_decision_date, $section504_meeting_date, $reason_exited_descriptor, $end_date, $id, $served_outside_of_regular_session, $use_snapshot, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getStudentSection504ProgramAssociationsAsyncWithHttpInfo
     *
     * Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  string $page_token The token of the page to retrieve, obtained either from the \&quot;Next-Page-Token\&quot; header of the previous request, or from the \&quot;partitions\&quot; endpoint for the resource. Cannot be used with limit/offset paging. (optional)
     * @param  int $page_size The maximum number of items to retrieve in the page. For use with pageToken (cursor paging) only. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)
     * @param  \DateTime $begin_date The earliest date the student is involved with the program. Typically, this is the date the student becomes eligible for the program.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines. (optional)
     * @param  int $education_organization_id The identifier assigned to an education organization. (optional)
     * @param  int $program_education_organization_id The identifier assigned to an education organization. (optional)
     * @param  string $program_name The formal name of the program of instruction, training, services, or benefits available through federal, state, or local agencies. (optional)
     * @param  string $program_type_descriptor The type of program. (optional)
     * @param  string $student_unique_id A unique alphanumeric code assigned to a student. (optional)
     * @param  string $section504_disability_descriptor Defines one or more disabilities student has that qualifies them for a Section 504 plan. (optional)
     * @param  bool $accommodation_plan Indicates whether student has a Section 504 accommodation plan. (optional)
     * @param  bool $section504_eligibility Indicates whether student has a disability, either temporary or permenant, that qualifies student for Section 504 consideration. Selection of FALSE for this boolean is equivalent to marking student as &#39;Did Not Qualify&#39;. (optional)
     * @param  \DateTime $section504_eligibility_decision_date The month, day, and year on which the Section 504 eligibility decision is made. (optional)
     * @param  \DateTime $section504_meeting_date The month, day, and year on which the meeting with student&#39;s parent/guardian held to discuss the 504 eligibility of the student. (optional)
     * @param  string $reason_exited_descriptor The reason the student left the program within a school or district. (optional)
     * @param  \DateTime $end_date The month, day, and year on which the student exited the program or stopped receiving services.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines. (optional)
     * @param  string $id  (optional)
     * @param  bool $served_outside_of_regular_session Indicates whether the student received services during the summer session or between sessions. (optional)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStudentSection504ProgramAssociations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getStudentSection504ProgramAssociationsAsyncWithHttpInfo($offset = null, $limit = 25, $page_token = null, $page_size = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $begin_date = null, $education_organization_id = null, $program_education_organization_id = null, $program_name = null, $program_type_descriptor = null, $student_unique_id = null, $section504_disability_descriptor = null, $accommodation_plan = null, $section504_eligibility = null, $section504_eligibility_decision_date = null, $section504_meeting_date = null, $reason_exited_descriptor = null, $end_date = null, $id = null, $served_outside_of_regular_session = null, $use_snapshot = false, string $contentType = self::contentTypes['getStudentSection504ProgramAssociations'][0])
    {
        $returnType = '\Resources\Model\EdFiStudentSection504ProgramAssociation[]';
        $request = $this->getStudentSection504ProgramAssociationsRequest($offset, $limit, $page_token, $page_size, $min_change_version, $max_change_version, $total_count, $begin_date, $education_organization_id, $program_education_organization_id, $program_name, $program_type_descriptor, $student_unique_id, $section504_disability_descriptor, $accommodation_plan, $section504_eligibility, $section504_eligibility_decision_date, $section504_meeting_date, $reason_exited_descriptor, $end_date, $id, $served_outside_of_regular_session, $use_snapshot, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getStudentSection504ProgramAssociations'
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  string $page_token The token of the page to retrieve, obtained either from the \&quot;Next-Page-Token\&quot; header of the previous request, or from the \&quot;partitions\&quot; endpoint for the resource. Cannot be used with limit/offset paging. (optional)
     * @param  int $page_size The maximum number of items to retrieve in the page. For use with pageToken (cursor paging) only. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)
     * @param  \DateTime $begin_date The earliest date the student is involved with the program. Typically, this is the date the student becomes eligible for the program.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines. (optional)
     * @param  int $education_organization_id The identifier assigned to an education organization. (optional)
     * @param  int $program_education_organization_id The identifier assigned to an education organization. (optional)
     * @param  string $program_name The formal name of the program of instruction, training, services, or benefits available through federal, state, or local agencies. (optional)
     * @param  string $program_type_descriptor The type of program. (optional)
     * @param  string $student_unique_id A unique alphanumeric code assigned to a student. (optional)
     * @param  string $section504_disability_descriptor Defines one or more disabilities student has that qualifies them for a Section 504 plan. (optional)
     * @param  bool $accommodation_plan Indicates whether student has a Section 504 accommodation plan. (optional)
     * @param  bool $section504_eligibility Indicates whether student has a disability, either temporary or permenant, that qualifies student for Section 504 consideration. Selection of FALSE for this boolean is equivalent to marking student as &#39;Did Not Qualify&#39;. (optional)
     * @param  \DateTime $section504_eligibility_decision_date The month, day, and year on which the Section 504 eligibility decision is made. (optional)
     * @param  \DateTime $section504_meeting_date The month, day, and year on which the meeting with student&#39;s parent/guardian held to discuss the 504 eligibility of the student. (optional)
     * @param  string $reason_exited_descriptor The reason the student left the program within a school or district. (optional)
     * @param  \DateTime $end_date The month, day, and year on which the student exited the program or stopped receiving services.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines. (optional)
     * @param  string $id  (optional)
     * @param  bool $served_outside_of_regular_session Indicates whether the student received services during the summer session or between sessions. (optional)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStudentSection504ProgramAssociations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getStudentSection504ProgramAssociationsRequest($offset = null, $limit = 25, $page_token = null, $page_size = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $begin_date = null, $education_organization_id = null, $program_education_organization_id = null, $program_name = null, $program_type_descriptor = null, $student_unique_id = null, $section504_disability_descriptor = null, $accommodation_plan = null, $section504_eligibility = null, $section504_eligibility_decision_date = null, $section504_meeting_date = null, $reason_exited_descriptor = null, $end_date = null, $id = null, $served_outside_of_regular_session = null, $use_snapshot = false, string $contentType = self::contentTypes['getStudentSection504ProgramAssociations'][0])
    {


        if ($limit !== null && $limit > 500) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling StudentSection504ProgramAssociationsApi.getStudentSection504ProgramAssociations, must be smaller than or equal to 500.');
        }
        if ($limit !== null && $limit < 0) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling StudentSection504ProgramAssociationsApi.getStudentSection504ProgramAssociations, must be bigger than or equal to 0.');
        }
        

        if ($page_size !== null && $page_size < 0) {
            throw new \InvalidArgumentException('invalid value for "$page_size" when calling StudentSection504ProgramAssociationsApi.getStudentSection504ProgramAssociations, must be bigger than or equal to 0.');
        }
        






        if ($program_name !== null && strlen($program_name) > 60) {
            throw new \InvalidArgumentException('invalid length for "$program_name" when calling StudentSection504ProgramAssociationsApi.getStudentSection504ProgramAssociations, must be smaller than or equal to 60.');
        }
        
        if ($program_type_descriptor !== null && strlen($program_type_descriptor) > 306) {
            throw new \InvalidArgumentException('invalid length for "$program_type_descriptor" when calling StudentSection504ProgramAssociationsApi.getStudentSection504ProgramAssociations, must be smaller than or equal to 306.');
        }
        
        if ($student_unique_id !== null && strlen($student_unique_id) > 32) {
            throw new \InvalidArgumentException('invalid length for "$student_unique_id" when calling StudentSection504ProgramAssociationsApi.getStudentSection504ProgramAssociations, must be smaller than or equal to 32.');
        }
        
        if ($section504_disability_descriptor !== null && strlen($section504_disability_descriptor) > 306) {
            throw new \InvalidArgumentException('invalid length for "$section504_disability_descriptor" when calling StudentSection504ProgramAssociationsApi.getStudentSection504ProgramAssociations, must be smaller than or equal to 306.');
        }
        




        if ($reason_exited_descriptor !== null && strlen($reason_exited_descriptor) > 306) {
            throw new \InvalidArgumentException('invalid length for "$reason_exited_descriptor" when calling StudentSection504ProgramAssociationsApi.getStudentSection504ProgramAssociations, must be smaller than or equal to 306.');
        }
        





        $resourcePath = '/ed-fi/studentSection504ProgramAssociations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_token,
            'pageToken', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'pageSize', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_change_version,
            'minChangeVersion', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_change_version,
            'maxChangeVersion', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $total_count,
            'totalCount', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $begin_date,
            'beginDate', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $education_organization_id,
            'educationOrganizationId', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $program_education_organization_id,
            'programEducationOrganizationId', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $program_name,
            'programName', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $program_type_descriptor,
            'programTypeDescriptor', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $student_unique_id,
            'studentUniqueId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $section504_disability_descriptor,
            'section504DisabilityDescriptor', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $accommodation_plan,
            'accommodationPlan', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $section504_eligibility,
            'section504Eligibility', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $section504_eligibility_decision_date,
            'section504EligibilityDecisionDate', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $section504_meeting_date,
            'section504MeetingDate', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $reason_exited_descriptor,
            'reasonExitedDescriptor', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $end_date,
            'endDate', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id,
            'id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $served_outside_of_regular_session,
            'servedOutsideOfRegularSession', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($use_snapshot !== null) {
            $headerParams['Use-Snapshot'] = ObjectSerializer::toHeaderValue($use_snapshot);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getStudentSection504ProgramAssociationsById
     *
     * Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  string $if_none_match The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStudentSection504ProgramAssociationsById'] to see the possible values for this operation
     *
     * @throws \Resources\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return |\Resources\Model\EdFiStudentSection504ProgramAssociation
     */
    public function getStudentSection504ProgramAssociationsById($id, $if_none_match = null, $use_snapshot = false, string $contentType = self::contentTypes['getStudentSection504ProgramAssociationsById'][0])
    {
        list($response) = $this->getStudentSection504ProgramAssociationsByIdWithHttpInfo($id, $if_none_match, $use_snapshot, $contentType);
        return $response;
    }

    /**
     * Operation getStudentSection504ProgramAssociationsByIdWithHttpInfo
     *
     * Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  string $if_none_match The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStudentSection504ProgramAssociationsById'] to see the possible values for this operation
     *
     * @throws \Resources\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of |\Resources\Model\EdFiStudentSection504ProgramAssociation, HTTP status code, HTTP response headers (array of strings)
     */
    public function getStudentSection504ProgramAssociationsByIdWithHttpInfo($id, $if_none_match = null, $use_snapshot = false, string $contentType = self::contentTypes['getStudentSection504ProgramAssociationsById'][0])
    {
        $request = $this->getStudentSection504ProgramAssociationsByIdRequest($id, $if_none_match, $use_snapshot, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Resources\Model\EdFiStudentSection504ProgramAssociation' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Resources\Model\EdFiStudentSection504ProgramAssociation' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Resources\Model\EdFiStudentSection504ProgramAssociation', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Resources\Model\EdFiStudentSection504ProgramAssociation';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Resources\Model\EdFiStudentSection504ProgramAssociation',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getStudentSection504ProgramAssociationsByIdAsync
     *
     * Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  string $if_none_match The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStudentSection504ProgramAssociationsById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getStudentSection504ProgramAssociationsByIdAsync($id, $if_none_match = null, $use_snapshot = false, string $contentType = self::contentTypes['getStudentSection504ProgramAssociationsById'][0])
    {
        return $this->getStudentSection504ProgramAssociationsByIdAsyncWithHttpInfo($id, $if_none_match, $use_snapshot, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getStudentSection504ProgramAssociationsByIdAsyncWithHttpInfo
     *
     * Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  string $if_none_match The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStudentSection504ProgramAssociationsById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getStudentSection504ProgramAssociationsByIdAsyncWithHttpInfo($id, $if_none_match = null, $use_snapshot = false, string $contentType = self::contentTypes['getStudentSection504ProgramAssociationsById'][0])
    {
        $returnType = '\Resources\Model\EdFiStudentSection504ProgramAssociation';
        $request = $this->getStudentSection504ProgramAssociationsByIdRequest($id, $if_none_match, $use_snapshot, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getStudentSection504ProgramAssociationsById'
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  string $if_none_match The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStudentSection504ProgramAssociationsById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getStudentSection504ProgramAssociationsByIdRequest($id, $if_none_match = null, $use_snapshot = false, string $contentType = self::contentTypes['getStudentSection504ProgramAssociationsById'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getStudentSection504ProgramAssociationsById'
            );
        }




        $resourcePath = '/ed-fi/studentSection504ProgramAssociations/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }
        // header params
        if ($use_snapshot !== null) {
            $headerParams['Use-Snapshot'] = ObjectSerializer::toHeaderValue($use_snapshot);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getStudentSection504ProgramAssociationsPartitions
     *
     * Retrieves a set of page tokens to be used for efficient client-side parallel processing.
     *
     * @param  int $number The number of evenly distributed partitions to provide for client-side parallel processing. If unspecified, a reasonable set of partitions will be determined based on the total number of accessible items. (optional)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  \DateTime $begin_date The earliest date the student is involved with the program. Typically, this is the date the student becomes eligible for the program.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines. (optional)
     * @param  int $education_organization_id The identifier assigned to an education organization. (optional)
     * @param  int $program_education_organization_id The identifier assigned to an education organization. (optional)
     * @param  string $program_name The formal name of the program of instruction, training, services, or benefits available through federal, state, or local agencies. (optional)
     * @param  string $program_type_descriptor The type of program. (optional)
     * @param  string $student_unique_id A unique alphanumeric code assigned to a student. (optional)
     * @param  string $section504_disability_descriptor Defines one or more disabilities student has that qualifies them for a Section 504 plan. (optional)
     * @param  bool $accommodation_plan Indicates whether student has a Section 504 accommodation plan. (optional)
     * @param  bool $section504_eligibility Indicates whether student has a disability, either temporary or permenant, that qualifies student for Section 504 consideration. Selection of FALSE for this boolean is equivalent to marking student as &#39;Did Not Qualify&#39;. (optional)
     * @param  \DateTime $section504_eligibility_decision_date The month, day, and year on which the Section 504 eligibility decision is made. (optional)
     * @param  \DateTime $section504_meeting_date The month, day, and year on which the meeting with student&#39;s parent/guardian held to discuss the 504 eligibility of the student. (optional)
     * @param  string $reason_exited_descriptor The reason the student left the program within a school or district. (optional)
     * @param  \DateTime $end_date The month, day, and year on which the student exited the program or stopped receiving services.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines. (optional)
     * @param  string $id  (optional)
     * @param  bool $served_outside_of_regular_session Indicates whether the student received services during the summer session or between sessions. (optional)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStudentSection504ProgramAssociationsPartitions'] to see the possible values for this operation
     *
     * @throws \Resources\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return |\Resources\Model\GetAcademicWeeksPartitions200Response
     */
    public function getStudentSection504ProgramAssociationsPartitions($number = null, $min_change_version = null, $max_change_version = null, $begin_date = null, $education_organization_id = null, $program_education_organization_id = null, $program_name = null, $program_type_descriptor = null, $student_unique_id = null, $section504_disability_descriptor = null, $accommodation_plan = null, $section504_eligibility = null, $section504_eligibility_decision_date = null, $section504_meeting_date = null, $reason_exited_descriptor = null, $end_date = null, $id = null, $served_outside_of_regular_session = null, $use_snapshot = false, string $contentType = self::contentTypes['getStudentSection504ProgramAssociationsPartitions'][0])
    {
        list($response) = $this->getStudentSection504ProgramAssociationsPartitionsWithHttpInfo($number, $min_change_version, $max_change_version, $begin_date, $education_organization_id, $program_education_organization_id, $program_name, $program_type_descriptor, $student_unique_id, $section504_disability_descriptor, $accommodation_plan, $section504_eligibility, $section504_eligibility_decision_date, $section504_meeting_date, $reason_exited_descriptor, $end_date, $id, $served_outside_of_regular_session, $use_snapshot, $contentType);
        return $response;
    }

    /**
     * Operation getStudentSection504ProgramAssociationsPartitionsWithHttpInfo
     *
     * Retrieves a set of page tokens to be used for efficient client-side parallel processing.
     *
     * @param  int $number The number of evenly distributed partitions to provide for client-side parallel processing. If unspecified, a reasonable set of partitions will be determined based on the total number of accessible items. (optional)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  \DateTime $begin_date The earliest date the student is involved with the program. Typically, this is the date the student becomes eligible for the program.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines. (optional)
     * @param  int $education_organization_id The identifier assigned to an education organization. (optional)
     * @param  int $program_education_organization_id The identifier assigned to an education organization. (optional)
     * @param  string $program_name The formal name of the program of instruction, training, services, or benefits available through federal, state, or local agencies. (optional)
     * @param  string $program_type_descriptor The type of program. (optional)
     * @param  string $student_unique_id A unique alphanumeric code assigned to a student. (optional)
     * @param  string $section504_disability_descriptor Defines one or more disabilities student has that qualifies them for a Section 504 plan. (optional)
     * @param  bool $accommodation_plan Indicates whether student has a Section 504 accommodation plan. (optional)
     * @param  bool $section504_eligibility Indicates whether student has a disability, either temporary or permenant, that qualifies student for Section 504 consideration. Selection of FALSE for this boolean is equivalent to marking student as &#39;Did Not Qualify&#39;. (optional)
     * @param  \DateTime $section504_eligibility_decision_date The month, day, and year on which the Section 504 eligibility decision is made. (optional)
     * @param  \DateTime $section504_meeting_date The month, day, and year on which the meeting with student&#39;s parent/guardian held to discuss the 504 eligibility of the student. (optional)
     * @param  string $reason_exited_descriptor The reason the student left the program within a school or district. (optional)
     * @param  \DateTime $end_date The month, day, and year on which the student exited the program or stopped receiving services.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines. (optional)
     * @param  string $id  (optional)
     * @param  bool $served_outside_of_regular_session Indicates whether the student received services during the summer session or between sessions. (optional)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStudentSection504ProgramAssociationsPartitions'] to see the possible values for this operation
     *
     * @throws \Resources\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of |\Resources\Model\GetAcademicWeeksPartitions200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getStudentSection504ProgramAssociationsPartitionsWithHttpInfo($number = null, $min_change_version = null, $max_change_version = null, $begin_date = null, $education_organization_id = null, $program_education_organization_id = null, $program_name = null, $program_type_descriptor = null, $student_unique_id = null, $section504_disability_descriptor = null, $accommodation_plan = null, $section504_eligibility = null, $section504_eligibility_decision_date = null, $section504_meeting_date = null, $reason_exited_descriptor = null, $end_date = null, $id = null, $served_outside_of_regular_session = null, $use_snapshot = false, string $contentType = self::contentTypes['getStudentSection504ProgramAssociationsPartitions'][0])
    {
        $request = $this->getStudentSection504ProgramAssociationsPartitionsRequest($number, $min_change_version, $max_change_version, $begin_date, $education_organization_id, $program_education_organization_id, $program_name, $program_type_descriptor, $student_unique_id, $section504_disability_descriptor, $accommodation_plan, $section504_eligibility, $section504_eligibility_decision_date, $section504_meeting_date, $reason_exited_descriptor, $end_date, $id, $served_outside_of_regular_session, $use_snapshot, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Resources\Model\GetAcademicWeeksPartitions200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Resources\Model\GetAcademicWeeksPartitions200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Resources\Model\GetAcademicWeeksPartitions200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Resources\Model\GetAcademicWeeksPartitions200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Resources\Model\GetAcademicWeeksPartitions200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getStudentSection504ProgramAssociationsPartitionsAsync
     *
     * Retrieves a set of page tokens to be used for efficient client-side parallel processing.
     *
     * @param  int $number The number of evenly distributed partitions to provide for client-side parallel processing. If unspecified, a reasonable set of partitions will be determined based on the total number of accessible items. (optional)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  \DateTime $begin_date The earliest date the student is involved with the program. Typically, this is the date the student becomes eligible for the program.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines. (optional)
     * @param  int $education_organization_id The identifier assigned to an education organization. (optional)
     * @param  int $program_education_organization_id The identifier assigned to an education organization. (optional)
     * @param  string $program_name The formal name of the program of instruction, training, services, or benefits available through federal, state, or local agencies. (optional)
     * @param  string $program_type_descriptor The type of program. (optional)
     * @param  string $student_unique_id A unique alphanumeric code assigned to a student. (optional)
     * @param  string $section504_disability_descriptor Defines one or more disabilities student has that qualifies them for a Section 504 plan. (optional)
     * @param  bool $accommodation_plan Indicates whether student has a Section 504 accommodation plan. (optional)
     * @param  bool $section504_eligibility Indicates whether student has a disability, either temporary or permenant, that qualifies student for Section 504 consideration. Selection of FALSE for this boolean is equivalent to marking student as &#39;Did Not Qualify&#39;. (optional)
     * @param  \DateTime $section504_eligibility_decision_date The month, day, and year on which the Section 504 eligibility decision is made. (optional)
     * @param  \DateTime $section504_meeting_date The month, day, and year on which the meeting with student&#39;s parent/guardian held to discuss the 504 eligibility of the student. (optional)
     * @param  string $reason_exited_descriptor The reason the student left the program within a school or district. (optional)
     * @param  \DateTime $end_date The month, day, and year on which the student exited the program or stopped receiving services.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines. (optional)
     * @param  string $id  (optional)
     * @param  bool $served_outside_of_regular_session Indicates whether the student received services during the summer session or between sessions. (optional)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStudentSection504ProgramAssociationsPartitions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getStudentSection504ProgramAssociationsPartitionsAsync($number = null, $min_change_version = null, $max_change_version = null, $begin_date = null, $education_organization_id = null, $program_education_organization_id = null, $program_name = null, $program_type_descriptor = null, $student_unique_id = null, $section504_disability_descriptor = null, $accommodation_plan = null, $section504_eligibility = null, $section504_eligibility_decision_date = null, $section504_meeting_date = null, $reason_exited_descriptor = null, $end_date = null, $id = null, $served_outside_of_regular_session = null, $use_snapshot = false, string $contentType = self::contentTypes['getStudentSection504ProgramAssociationsPartitions'][0])
    {
        return $this->getStudentSection504ProgramAssociationsPartitionsAsyncWithHttpInfo($number, $min_change_version, $max_change_version, $begin_date, $education_organization_id, $program_education_organization_id, $program_name, $program_type_descriptor, $student_unique_id, $section504_disability_descriptor, $accommodation_plan, $section504_eligibility, $section504_eligibility_decision_date, $section504_meeting_date, $reason_exited_descriptor, $end_date, $id, $served_outside_of_regular_session, $use_snapshot, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getStudentSection504ProgramAssociationsPartitionsAsyncWithHttpInfo
     *
     * Retrieves a set of page tokens to be used for efficient client-side parallel processing.
     *
     * @param  int $number The number of evenly distributed partitions to provide for client-side parallel processing. If unspecified, a reasonable set of partitions will be determined based on the total number of accessible items. (optional)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  \DateTime $begin_date The earliest date the student is involved with the program. Typically, this is the date the student becomes eligible for the program.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines. (optional)
     * @param  int $education_organization_id The identifier assigned to an education organization. (optional)
     * @param  int $program_education_organization_id The identifier assigned to an education organization. (optional)
     * @param  string $program_name The formal name of the program of instruction, training, services, or benefits available through federal, state, or local agencies. (optional)
     * @param  string $program_type_descriptor The type of program. (optional)
     * @param  string $student_unique_id A unique alphanumeric code assigned to a student. (optional)
     * @param  string $section504_disability_descriptor Defines one or more disabilities student has that qualifies them for a Section 504 plan. (optional)
     * @param  bool $accommodation_plan Indicates whether student has a Section 504 accommodation plan. (optional)
     * @param  bool $section504_eligibility Indicates whether student has a disability, either temporary or permenant, that qualifies student for Section 504 consideration. Selection of FALSE for this boolean is equivalent to marking student as &#39;Did Not Qualify&#39;. (optional)
     * @param  \DateTime $section504_eligibility_decision_date The month, day, and year on which the Section 504 eligibility decision is made. (optional)
     * @param  \DateTime $section504_meeting_date The month, day, and year on which the meeting with student&#39;s parent/guardian held to discuss the 504 eligibility of the student. (optional)
     * @param  string $reason_exited_descriptor The reason the student left the program within a school or district. (optional)
     * @param  \DateTime $end_date The month, day, and year on which the student exited the program or stopped receiving services.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines. (optional)
     * @param  string $id  (optional)
     * @param  bool $served_outside_of_regular_session Indicates whether the student received services during the summer session or between sessions. (optional)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStudentSection504ProgramAssociationsPartitions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getStudentSection504ProgramAssociationsPartitionsAsyncWithHttpInfo($number = null, $min_change_version = null, $max_change_version = null, $begin_date = null, $education_organization_id = null, $program_education_organization_id = null, $program_name = null, $program_type_descriptor = null, $student_unique_id = null, $section504_disability_descriptor = null, $accommodation_plan = null, $section504_eligibility = null, $section504_eligibility_decision_date = null, $section504_meeting_date = null, $reason_exited_descriptor = null, $end_date = null, $id = null, $served_outside_of_regular_session = null, $use_snapshot = false, string $contentType = self::contentTypes['getStudentSection504ProgramAssociationsPartitions'][0])
    {
        $returnType = '\Resources\Model\GetAcademicWeeksPartitions200Response';
        $request = $this->getStudentSection504ProgramAssociationsPartitionsRequest($number, $min_change_version, $max_change_version, $begin_date, $education_organization_id, $program_education_organization_id, $program_name, $program_type_descriptor, $student_unique_id, $section504_disability_descriptor, $accommodation_plan, $section504_eligibility, $section504_eligibility_decision_date, $section504_meeting_date, $reason_exited_descriptor, $end_date, $id, $served_outside_of_regular_session, $use_snapshot, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getStudentSection504ProgramAssociationsPartitions'
     *
     * @param  int $number The number of evenly distributed partitions to provide for client-side parallel processing. If unspecified, a reasonable set of partitions will be determined based on the total number of accessible items. (optional)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  \DateTime $begin_date The earliest date the student is involved with the program. Typically, this is the date the student becomes eligible for the program.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines. (optional)
     * @param  int $education_organization_id The identifier assigned to an education organization. (optional)
     * @param  int $program_education_organization_id The identifier assigned to an education organization. (optional)
     * @param  string $program_name The formal name of the program of instruction, training, services, or benefits available through federal, state, or local agencies. (optional)
     * @param  string $program_type_descriptor The type of program. (optional)
     * @param  string $student_unique_id A unique alphanumeric code assigned to a student. (optional)
     * @param  string $section504_disability_descriptor Defines one or more disabilities student has that qualifies them for a Section 504 plan. (optional)
     * @param  bool $accommodation_plan Indicates whether student has a Section 504 accommodation plan. (optional)
     * @param  bool $section504_eligibility Indicates whether student has a disability, either temporary or permenant, that qualifies student for Section 504 consideration. Selection of FALSE for this boolean is equivalent to marking student as &#39;Did Not Qualify&#39;. (optional)
     * @param  \DateTime $section504_eligibility_decision_date The month, day, and year on which the Section 504 eligibility decision is made. (optional)
     * @param  \DateTime $section504_meeting_date The month, day, and year on which the meeting with student&#39;s parent/guardian held to discuss the 504 eligibility of the student. (optional)
     * @param  string $reason_exited_descriptor The reason the student left the program within a school or district. (optional)
     * @param  \DateTime $end_date The month, day, and year on which the student exited the program or stopped receiving services.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines. (optional)
     * @param  string $id  (optional)
     * @param  bool $served_outside_of_regular_session Indicates whether the student received services during the summer session or between sessions. (optional)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStudentSection504ProgramAssociationsPartitions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getStudentSection504ProgramAssociationsPartitionsRequest($number = null, $min_change_version = null, $max_change_version = null, $begin_date = null, $education_organization_id = null, $program_education_organization_id = null, $program_name = null, $program_type_descriptor = null, $student_unique_id = null, $section504_disability_descriptor = null, $accommodation_plan = null, $section504_eligibility = null, $section504_eligibility_decision_date = null, $section504_meeting_date = null, $reason_exited_descriptor = null, $end_date = null, $id = null, $served_outside_of_regular_session = null, $use_snapshot = false, string $contentType = self::contentTypes['getStudentSection504ProgramAssociationsPartitions'][0])
    {

        if ($number !== null && $number > 200) {
            throw new \InvalidArgumentException('invalid value for "$number" when calling StudentSection504ProgramAssociationsApi.getStudentSection504ProgramAssociationsPartitions, must be smaller than or equal to 200.');
        }
        if ($number !== null && $number < 1) {
            throw new \InvalidArgumentException('invalid value for "$number" when calling StudentSection504ProgramAssociationsApi.getStudentSection504ProgramAssociationsPartitions, must be bigger than or equal to 1.');
        }
        





        if ($program_name !== null && strlen($program_name) > 60) {
            throw new \InvalidArgumentException('invalid length for "$program_name" when calling StudentSection504ProgramAssociationsApi.getStudentSection504ProgramAssociationsPartitions, must be smaller than or equal to 60.');
        }
        
        if ($program_type_descriptor !== null && strlen($program_type_descriptor) > 306) {
            throw new \InvalidArgumentException('invalid length for "$program_type_descriptor" when calling StudentSection504ProgramAssociationsApi.getStudentSection504ProgramAssociationsPartitions, must be smaller than or equal to 306.');
        }
        
        if ($student_unique_id !== null && strlen($student_unique_id) > 32) {
            throw new \InvalidArgumentException('invalid length for "$student_unique_id" when calling StudentSection504ProgramAssociationsApi.getStudentSection504ProgramAssociationsPartitions, must be smaller than or equal to 32.');
        }
        
        if ($section504_disability_descriptor !== null && strlen($section504_disability_descriptor) > 306) {
            throw new \InvalidArgumentException('invalid length for "$section504_disability_descriptor" when calling StudentSection504ProgramAssociationsApi.getStudentSection504ProgramAssociationsPartitions, must be smaller than or equal to 306.');
        }
        




        if ($reason_exited_descriptor !== null && strlen($reason_exited_descriptor) > 306) {
            throw new \InvalidArgumentException('invalid length for "$reason_exited_descriptor" when calling StudentSection504ProgramAssociationsApi.getStudentSection504ProgramAssociationsPartitions, must be smaller than or equal to 306.');
        }
        





        $resourcePath = '/ed-fi/studentSection504ProgramAssociations/partitions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $number,
            'number', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_change_version,
            'minChangeVersion', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_change_version,
            'maxChangeVersion', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $begin_date,
            'beginDate', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $education_organization_id,
            'educationOrganizationId', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $program_education_organization_id,
            'programEducationOrganizationId', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $program_name,
            'programName', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $program_type_descriptor,
            'programTypeDescriptor', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $student_unique_id,
            'studentUniqueId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $section504_disability_descriptor,
            'section504DisabilityDescriptor', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $accommodation_plan,
            'accommodationPlan', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $section504_eligibility,
            'section504Eligibility', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $section504_eligibility_decision_date,
            'section504EligibilityDecisionDate', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $section504_meeting_date,
            'section504MeetingDate', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $reason_exited_descriptor,
            'reasonExitedDescriptor', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $end_date,
            'endDate', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id,
            'id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $served_outside_of_regular_session,
            'servedOutsideOfRegularSession', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($use_snapshot !== null) {
            $headerParams['Use-Snapshot'] = ObjectSerializer::toHeaderValue($use_snapshot);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation keyChangesStudentSection504ProgramAssociations
     *
     * Retrieves resources key changes based on change version.
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['keyChangesStudentSection504ProgramAssociations'] to see the possible values for this operation
     *
     * @throws \Resources\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return |\Resources\Model\TrackedChangesEdFiStudentSection504ProgramAssociationKeyChange[]
     */
    public function keyChangesStudentSection504ProgramAssociations($offset = null, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $use_snapshot = false, string $contentType = self::contentTypes['keyChangesStudentSection504ProgramAssociations'][0])
    {
        list($response) = $this->keyChangesStudentSection504ProgramAssociationsWithHttpInfo($offset, $limit, $min_change_version, $max_change_version, $total_count, $use_snapshot, $contentType);
        return $response;
    }

    /**
     * Operation keyChangesStudentSection504ProgramAssociationsWithHttpInfo
     *
     * Retrieves resources key changes based on change version.
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['keyChangesStudentSection504ProgramAssociations'] to see the possible values for this operation
     *
     * @throws \Resources\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of |\Resources\Model\TrackedChangesEdFiStudentSection504ProgramAssociationKeyChange[], HTTP status code, HTTP response headers (array of strings)
     */
    public function keyChangesStudentSection504ProgramAssociationsWithHttpInfo($offset = null, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $use_snapshot = false, string $contentType = self::contentTypes['keyChangesStudentSection504ProgramAssociations'][0])
    {
        $request = $this->keyChangesStudentSection504ProgramAssociationsRequest($offset, $limit, $min_change_version, $max_change_version, $total_count, $use_snapshot, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Resources\Model\TrackedChangesEdFiStudentSection504ProgramAssociationKeyChange[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Resources\Model\TrackedChangesEdFiStudentSection504ProgramAssociationKeyChange[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Resources\Model\TrackedChangesEdFiStudentSection504ProgramAssociationKeyChange[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Resources\Model\TrackedChangesEdFiStudentSection504ProgramAssociationKeyChange[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Resources\Model\TrackedChangesEdFiStudentSection504ProgramAssociationKeyChange[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation keyChangesStudentSection504ProgramAssociationsAsync
     *
     * Retrieves resources key changes based on change version.
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['keyChangesStudentSection504ProgramAssociations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function keyChangesStudentSection504ProgramAssociationsAsync($offset = null, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $use_snapshot = false, string $contentType = self::contentTypes['keyChangesStudentSection504ProgramAssociations'][0])
    {
        return $this->keyChangesStudentSection504ProgramAssociationsAsyncWithHttpInfo($offset, $limit, $min_change_version, $max_change_version, $total_count, $use_snapshot, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation keyChangesStudentSection504ProgramAssociationsAsyncWithHttpInfo
     *
     * Retrieves resources key changes based on change version.
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['keyChangesStudentSection504ProgramAssociations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function keyChangesStudentSection504ProgramAssociationsAsyncWithHttpInfo($offset = null, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $use_snapshot = false, string $contentType = self::contentTypes['keyChangesStudentSection504ProgramAssociations'][0])
    {
        $returnType = '\Resources\Model\TrackedChangesEdFiStudentSection504ProgramAssociationKeyChange[]';
        $request = $this->keyChangesStudentSection504ProgramAssociationsRequest($offset, $limit, $min_change_version, $max_change_version, $total_count, $use_snapshot, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'keyChangesStudentSection504ProgramAssociations'
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. Must be false when using cursor paging (with pageToken). (optional, default to false)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['keyChangesStudentSection504ProgramAssociations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function keyChangesStudentSection504ProgramAssociationsRequest($offset = null, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $use_snapshot = false, string $contentType = self::contentTypes['keyChangesStudentSection504ProgramAssociations'][0])
    {


        if ($limit !== null && $limit > 500) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling StudentSection504ProgramAssociationsApi.keyChangesStudentSection504ProgramAssociations, must be smaller than or equal to 500.');
        }
        if ($limit !== null && $limit < 0) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling StudentSection504ProgramAssociationsApi.keyChangesStudentSection504ProgramAssociations, must be bigger than or equal to 0.');
        }
        





        $resourcePath = '/ed-fi/studentSection504ProgramAssociations/keyChanges';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_change_version,
            'minChangeVersion', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_change_version,
            'maxChangeVersion', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $total_count,
            'totalCount', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($use_snapshot !== null) {
            $headerParams['Use-Snapshot'] = ObjectSerializer::toHeaderValue($use_snapshot);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postStudentSection504ProgramAssociation
     *
     * Creates or updates resources based on the natural key values of the supplied resource.
     *
     * @param  \Resources\Model\EdFiStudentSection504ProgramAssociation $ed_fi_student_section504_program_association The JSON representation of the \&quot;studentSection504ProgramAssociation\&quot; resource to be created or updated. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postStudentSection504ProgramAssociation'] to see the possible values for this operation
     *
     * @throws \Resources\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function postStudentSection504ProgramAssociation($ed_fi_student_section504_program_association, string $contentType = self::contentTypes['postStudentSection504ProgramAssociation'][0])
    {
        $this->postStudentSection504ProgramAssociationWithHttpInfo($ed_fi_student_section504_program_association, $contentType);
    }

    /**
     * Operation postStudentSection504ProgramAssociationWithHttpInfo
     *
     * Creates or updates resources based on the natural key values of the supplied resource.
     *
     * @param  \Resources\Model\EdFiStudentSection504ProgramAssociation $ed_fi_student_section504_program_association The JSON representation of the \&quot;studentSection504ProgramAssociation\&quot; resource to be created or updated. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postStudentSection504ProgramAssociation'] to see the possible values for this operation
     *
     * @throws \Resources\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function postStudentSection504ProgramAssociationWithHttpInfo($ed_fi_student_section504_program_association, string $contentType = self::contentTypes['postStudentSection504ProgramAssociation'][0])
    {
        $request = $this->postStudentSection504ProgramAssociationRequest($ed_fi_student_section504_program_association, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation postStudentSection504ProgramAssociationAsync
     *
     * Creates or updates resources based on the natural key values of the supplied resource.
     *
     * @param  \Resources\Model\EdFiStudentSection504ProgramAssociation $ed_fi_student_section504_program_association The JSON representation of the \&quot;studentSection504ProgramAssociation\&quot; resource to be created or updated. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postStudentSection504ProgramAssociation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postStudentSection504ProgramAssociationAsync($ed_fi_student_section504_program_association, string $contentType = self::contentTypes['postStudentSection504ProgramAssociation'][0])
    {
        return $this->postStudentSection504ProgramAssociationAsyncWithHttpInfo($ed_fi_student_section504_program_association, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postStudentSection504ProgramAssociationAsyncWithHttpInfo
     *
     * Creates or updates resources based on the natural key values of the supplied resource.
     *
     * @param  \Resources\Model\EdFiStudentSection504ProgramAssociation $ed_fi_student_section504_program_association The JSON representation of the \&quot;studentSection504ProgramAssociation\&quot; resource to be created or updated. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postStudentSection504ProgramAssociation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postStudentSection504ProgramAssociationAsyncWithHttpInfo($ed_fi_student_section504_program_association, string $contentType = self::contentTypes['postStudentSection504ProgramAssociation'][0])
    {
        $returnType = '';
        $request = $this->postStudentSection504ProgramAssociationRequest($ed_fi_student_section504_program_association, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postStudentSection504ProgramAssociation'
     *
     * @param  \Resources\Model\EdFiStudentSection504ProgramAssociation $ed_fi_student_section504_program_association The JSON representation of the \&quot;studentSection504ProgramAssociation\&quot; resource to be created or updated. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postStudentSection504ProgramAssociation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postStudentSection504ProgramAssociationRequest($ed_fi_student_section504_program_association, string $contentType = self::contentTypes['postStudentSection504ProgramAssociation'][0])
    {

        // verify the required parameter 'ed_fi_student_section504_program_association' is set
        if ($ed_fi_student_section504_program_association === null || (is_array($ed_fi_student_section504_program_association) && count($ed_fi_student_section504_program_association) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ed_fi_student_section504_program_association when calling postStudentSection504ProgramAssociation'
            );
        }


        $resourcePath = '/ed-fi/studentSection504ProgramAssociations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($ed_fi_student_section504_program_association)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($ed_fi_student_section504_program_association));
            } else {
                $httpBody = $ed_fi_student_section504_program_association;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putStudentSection504ProgramAssociation
     *
     * Updates a resource based on the resource identifier.
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  \Resources\Model\EdFiStudentSection504ProgramAssociation $ed_fi_student_section504_program_association The JSON representation of the \&quot;studentSection504ProgramAssociation\&quot; resource to be created or updated. (required)
     * @param  string $if_match The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putStudentSection504ProgramAssociation'] to see the possible values for this operation
     *
     * @throws \Resources\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function putStudentSection504ProgramAssociation($id, $ed_fi_student_section504_program_association, $if_match = null, string $contentType = self::contentTypes['putStudentSection504ProgramAssociation'][0])
    {
        $this->putStudentSection504ProgramAssociationWithHttpInfo($id, $ed_fi_student_section504_program_association, $if_match, $contentType);
    }

    /**
     * Operation putStudentSection504ProgramAssociationWithHttpInfo
     *
     * Updates a resource based on the resource identifier.
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  \Resources\Model\EdFiStudentSection504ProgramAssociation $ed_fi_student_section504_program_association The JSON representation of the \&quot;studentSection504ProgramAssociation\&quot; resource to be created or updated. (required)
     * @param  string $if_match The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putStudentSection504ProgramAssociation'] to see the possible values for this operation
     *
     * @throws \Resources\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function putStudentSection504ProgramAssociationWithHttpInfo($id, $ed_fi_student_section504_program_association, $if_match = null, string $contentType = self::contentTypes['putStudentSection504ProgramAssociation'][0])
    {
        $request = $this->putStudentSection504ProgramAssociationRequest($id, $ed_fi_student_section504_program_association, $if_match, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation putStudentSection504ProgramAssociationAsync
     *
     * Updates a resource based on the resource identifier.
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  \Resources\Model\EdFiStudentSection504ProgramAssociation $ed_fi_student_section504_program_association The JSON representation of the \&quot;studentSection504ProgramAssociation\&quot; resource to be created or updated. (required)
     * @param  string $if_match The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putStudentSection504ProgramAssociation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putStudentSection504ProgramAssociationAsync($id, $ed_fi_student_section504_program_association, $if_match = null, string $contentType = self::contentTypes['putStudentSection504ProgramAssociation'][0])
    {
        return $this->putStudentSection504ProgramAssociationAsyncWithHttpInfo($id, $ed_fi_student_section504_program_association, $if_match, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putStudentSection504ProgramAssociationAsyncWithHttpInfo
     *
     * Updates a resource based on the resource identifier.
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  \Resources\Model\EdFiStudentSection504ProgramAssociation $ed_fi_student_section504_program_association The JSON representation of the \&quot;studentSection504ProgramAssociation\&quot; resource to be created or updated. (required)
     * @param  string $if_match The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putStudentSection504ProgramAssociation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putStudentSection504ProgramAssociationAsyncWithHttpInfo($id, $ed_fi_student_section504_program_association, $if_match = null, string $contentType = self::contentTypes['putStudentSection504ProgramAssociation'][0])
    {
        $returnType = '';
        $request = $this->putStudentSection504ProgramAssociationRequest($id, $ed_fi_student_section504_program_association, $if_match, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putStudentSection504ProgramAssociation'
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  \Resources\Model\EdFiStudentSection504ProgramAssociation $ed_fi_student_section504_program_association The JSON representation of the \&quot;studentSection504ProgramAssociation\&quot; resource to be created or updated. (required)
     * @param  string $if_match The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putStudentSection504ProgramAssociation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function putStudentSection504ProgramAssociationRequest($id, $ed_fi_student_section504_program_association, $if_match = null, string $contentType = self::contentTypes['putStudentSection504ProgramAssociation'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling putStudentSection504ProgramAssociation'
            );
        }

        // verify the required parameter 'ed_fi_student_section504_program_association' is set
        if ($ed_fi_student_section504_program_association === null || (is_array($ed_fi_student_section504_program_association) && count($ed_fi_student_section504_program_association) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ed_fi_student_section504_program_association when calling putStudentSection504ProgramAssociation'
            );
        }



        $resourcePath = '/ed-fi/studentSection504ProgramAssociations/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($if_match !== null) {
            $headerParams['If-Match'] = ObjectSerializer::toHeaderValue($if_match);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($ed_fi_student_section504_program_association)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($ed_fi_student_section504_program_association));
            } else {
                $httpBody = $ed_fi_student_section504_program_association;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
