<?php
/**
 * StaffsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Resources
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Resources\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Resources\ApiException;
use Resources\Configuration;
use Resources\HeaderSelector;
use Resources\ObjectSerializer;

/**
 * StaffsApi Class Doc Comment
 *
 * @category Class
 * @package  Resources
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class StaffsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'deleteStaffById' => [
            'application/json',
        ],
        'deletesStaffs' => [
            'application/json',
        ],
        'getStaffs' => [
            'application/json',
        ],
        'getStaffsById' => [
            'application/json',
        ],
        'keyChangesStaffs' => [
            'application/json',
        ],
        'postStaff' => [
            'application/json',
        ],
        'putStaff' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation deleteStaffById
     *
     * Deletes an existing resource using the resource identifier.
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  string $if_match The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteStaffById'] to see the possible values for this operation
     *
     * @throws \Resources\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteStaffById($id, $if_match = null, string $contentType = self::contentTypes['deleteStaffById'][0])
    {
        $this->deleteStaffByIdWithHttpInfo($id, $if_match, $contentType);
    }

    /**
     * Operation deleteStaffByIdWithHttpInfo
     *
     * Deletes an existing resource using the resource identifier.
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  string $if_match The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteStaffById'] to see the possible values for this operation
     *
     * @throws \Resources\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteStaffByIdWithHttpInfo($id, $if_match = null, string $contentType = self::contentTypes['deleteStaffById'][0])
    {
        $request = $this->deleteStaffByIdRequest($id, $if_match, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteStaffByIdAsync
     *
     * Deletes an existing resource using the resource identifier.
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  string $if_match The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteStaffById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteStaffByIdAsync($id, $if_match = null, string $contentType = self::contentTypes['deleteStaffById'][0])
    {
        return $this->deleteStaffByIdAsyncWithHttpInfo($id, $if_match, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteStaffByIdAsyncWithHttpInfo
     *
     * Deletes an existing resource using the resource identifier.
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  string $if_match The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteStaffById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteStaffByIdAsyncWithHttpInfo($id, $if_match = null, string $contentType = self::contentTypes['deleteStaffById'][0])
    {
        $returnType = '';
        $request = $this->deleteStaffByIdRequest($id, $if_match, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteStaffById'
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  string $if_match The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteStaffById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteStaffByIdRequest($id, $if_match = null, string $contentType = self::contentTypes['deleteStaffById'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteStaffById'
            );
        }



        $resourcePath = '/ed-fi/staffs/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($if_match !== null) {
            $headerParams['If-Match'] = ObjectSerializer::toHeaderValue($if_match);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deletesStaffs
     *
     * Retrieves deleted resources based on change version.
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional, default to 0)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletesStaffs'] to see the possible values for this operation
     *
     * @throws \Resources\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Resources\Model\TrackedChangesEdFiStaffDelete[]
     */
    public function deletesStaffs($offset = 0, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $use_snapshot = false, string $contentType = self::contentTypes['deletesStaffs'][0])
    {
        list($response) = $this->deletesStaffsWithHttpInfo($offset, $limit, $min_change_version, $max_change_version, $total_count, $use_snapshot, $contentType);
        return $response;
    }

    /**
     * Operation deletesStaffsWithHttpInfo
     *
     * Retrieves deleted resources based on change version.
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional, default to 0)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletesStaffs'] to see the possible values for this operation
     *
     * @throws \Resources\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Resources\Model\TrackedChangesEdFiStaffDelete[], HTTP status code, HTTP response headers (array of strings)
     */
    public function deletesStaffsWithHttpInfo($offset = 0, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $use_snapshot = false, string $contentType = self::contentTypes['deletesStaffs'][0])
    {
        $request = $this->deletesStaffsRequest($offset, $limit, $min_change_version, $max_change_version, $total_count, $use_snapshot, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Resources\Model\TrackedChangesEdFiStaffDelete[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Resources\Model\TrackedChangesEdFiStaffDelete[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Resources\Model\TrackedChangesEdFiStaffDelete[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Resources\Model\TrackedChangesEdFiStaffDelete[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Resources\Model\TrackedChangesEdFiStaffDelete[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deletesStaffsAsync
     *
     * Retrieves deleted resources based on change version.
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional, default to 0)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletesStaffs'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deletesStaffsAsync($offset = 0, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $use_snapshot = false, string $contentType = self::contentTypes['deletesStaffs'][0])
    {
        return $this->deletesStaffsAsyncWithHttpInfo($offset, $limit, $min_change_version, $max_change_version, $total_count, $use_snapshot, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deletesStaffsAsyncWithHttpInfo
     *
     * Retrieves deleted resources based on change version.
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional, default to 0)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletesStaffs'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deletesStaffsAsyncWithHttpInfo($offset = 0, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $use_snapshot = false, string $contentType = self::contentTypes['deletesStaffs'][0])
    {
        $returnType = '\Resources\Model\TrackedChangesEdFiStaffDelete[]';
        $request = $this->deletesStaffsRequest($offset, $limit, $min_change_version, $max_change_version, $total_count, $use_snapshot, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deletesStaffs'
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional, default to 0)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletesStaffs'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deletesStaffsRequest($offset = 0, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $use_snapshot = false, string $contentType = self::contentTypes['deletesStaffs'][0])
    {


        if ($limit !== null && $limit > 500) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling StaffsApi.deletesStaffs, must be smaller than or equal to 500.');
        }
        if ($limit !== null && $limit < 0) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling StaffsApi.deletesStaffs, must be bigger than or equal to 0.');
        }
        





        $resourcePath = '/ed-fi/staffs/deletes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_change_version,
            'minChangeVersion', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_change_version,
            'maxChangeVersion', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $total_count,
            'totalCount', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($use_snapshot !== null) {
            $headerParams['Use-Snapshot'] = ObjectSerializer::toHeaderValue($use_snapshot);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getStaffs
     *
     * Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional, default to 0)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)
     * @param  string $staff_unique_id A unique alphanumeric code assigned to a staff. (optional)
     * @param  string $person_id A unique alphanumeric code assigned to a person. (optional)
     * @param  string $source_system_descriptor This descriptor defines the originating record source system for the person. (optional)
     * @param  string $citizenship_status_descriptor An indicator of whether or not the person is a U.S. citizen. (optional)
     * @param  string $highest_completed_level_of_education_descriptor The extent of formal instruction an individual has received (e.g., the highest grade in school completed or its equivalent or the highest degree received). (optional)
     * @param  string $sex_descriptor The birth sex of the staff member. (optional)
     * @param  \DateTime $birth_date The month, day, and year on which an individual was born. (optional)
     * @param  string $first_name A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change. (optional)
     * @param  string $gender_identity The gender the staff member identifies themselves as. (optional)
     * @param  string $generation_code_suffix An appendage, if any, used to denote an individual&#39;s generation in his family (e.g., Jr., Sr., III). (optional)
     * @param  bool $highly_qualified_teacher An indication of whether a teacher is classified as highly qualified for his/her assignment according to state definition. This attribute indicates the teacher is highly qualified for ALL Sections being taught. (optional)
     * @param  bool $hispanic_latino_ethnicity An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, \&quot;Spanish origin,\&quot; can be used in addition to \&quot;Hispanic or Latino.\&quot; (optional)
     * @param  string $id  (optional)
     * @param  string $last_surname The name borne in common by members of a family. (optional)
     * @param  string $login_id The login ID for the user; used for security access control interface. (optional)
     * @param  string $maiden_name The individual&#39;s maiden name. (optional)
     * @param  string $middle_name A secondary name given to an individual at birth, baptism, or during another naming ceremony. (optional)
     * @param  string $personal_title_prefix A prefix used to denote the title, degree, position, or seniority of the individual. (optional)
     * @param  string $preferred_first_name The first name the individual prefers, if different from their legal first name (optional)
     * @param  string $preferred_last_surname The last name the individual prefers, if different from their legal last name (optional)
     * @param  float $years_of_prior_professional_experience The total number of years that an individual has previously held a similar professional position in one or more education institutions prior to the current school year. (optional)
     * @param  float $years_of_prior_teaching_experience The total number of years that an individual has previously held a teaching position in one or more education institutions prior to the current school year. (optional)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStaffs'] to see the possible values for this operation
     *
     * @throws \Resources\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Resources\Model\EdFiStaff[]
     */
    public function getStaffs($offset = 0, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $staff_unique_id = null, $person_id = null, $source_system_descriptor = null, $citizenship_status_descriptor = null, $highest_completed_level_of_education_descriptor = null, $sex_descriptor = null, $birth_date = null, $first_name = null, $gender_identity = null, $generation_code_suffix = null, $highly_qualified_teacher = null, $hispanic_latino_ethnicity = null, $id = null, $last_surname = null, $login_id = null, $maiden_name = null, $middle_name = null, $personal_title_prefix = null, $preferred_first_name = null, $preferred_last_surname = null, $years_of_prior_professional_experience = null, $years_of_prior_teaching_experience = null, $use_snapshot = false, string $contentType = self::contentTypes['getStaffs'][0])
    {
        list($response) = $this->getStaffsWithHttpInfo($offset, $limit, $min_change_version, $max_change_version, $total_count, $staff_unique_id, $person_id, $source_system_descriptor, $citizenship_status_descriptor, $highest_completed_level_of_education_descriptor, $sex_descriptor, $birth_date, $first_name, $gender_identity, $generation_code_suffix, $highly_qualified_teacher, $hispanic_latino_ethnicity, $id, $last_surname, $login_id, $maiden_name, $middle_name, $personal_title_prefix, $preferred_first_name, $preferred_last_surname, $years_of_prior_professional_experience, $years_of_prior_teaching_experience, $use_snapshot, $contentType);
        return $response;
    }

    /**
     * Operation getStaffsWithHttpInfo
     *
     * Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional, default to 0)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)
     * @param  string $staff_unique_id A unique alphanumeric code assigned to a staff. (optional)
     * @param  string $person_id A unique alphanumeric code assigned to a person. (optional)
     * @param  string $source_system_descriptor This descriptor defines the originating record source system for the person. (optional)
     * @param  string $citizenship_status_descriptor An indicator of whether or not the person is a U.S. citizen. (optional)
     * @param  string $highest_completed_level_of_education_descriptor The extent of formal instruction an individual has received (e.g., the highest grade in school completed or its equivalent or the highest degree received). (optional)
     * @param  string $sex_descriptor The birth sex of the staff member. (optional)
     * @param  \DateTime $birth_date The month, day, and year on which an individual was born. (optional)
     * @param  string $first_name A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change. (optional)
     * @param  string $gender_identity The gender the staff member identifies themselves as. (optional)
     * @param  string $generation_code_suffix An appendage, if any, used to denote an individual&#39;s generation in his family (e.g., Jr., Sr., III). (optional)
     * @param  bool $highly_qualified_teacher An indication of whether a teacher is classified as highly qualified for his/her assignment according to state definition. This attribute indicates the teacher is highly qualified for ALL Sections being taught. (optional)
     * @param  bool $hispanic_latino_ethnicity An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, \&quot;Spanish origin,\&quot; can be used in addition to \&quot;Hispanic or Latino.\&quot; (optional)
     * @param  string $id  (optional)
     * @param  string $last_surname The name borne in common by members of a family. (optional)
     * @param  string $login_id The login ID for the user; used for security access control interface. (optional)
     * @param  string $maiden_name The individual&#39;s maiden name. (optional)
     * @param  string $middle_name A secondary name given to an individual at birth, baptism, or during another naming ceremony. (optional)
     * @param  string $personal_title_prefix A prefix used to denote the title, degree, position, or seniority of the individual. (optional)
     * @param  string $preferred_first_name The first name the individual prefers, if different from their legal first name (optional)
     * @param  string $preferred_last_surname The last name the individual prefers, if different from their legal last name (optional)
     * @param  float $years_of_prior_professional_experience The total number of years that an individual has previously held a similar professional position in one or more education institutions prior to the current school year. (optional)
     * @param  float $years_of_prior_teaching_experience The total number of years that an individual has previously held a teaching position in one or more education institutions prior to the current school year. (optional)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStaffs'] to see the possible values for this operation
     *
     * @throws \Resources\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Resources\Model\EdFiStaff[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getStaffsWithHttpInfo($offset = 0, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $staff_unique_id = null, $person_id = null, $source_system_descriptor = null, $citizenship_status_descriptor = null, $highest_completed_level_of_education_descriptor = null, $sex_descriptor = null, $birth_date = null, $first_name = null, $gender_identity = null, $generation_code_suffix = null, $highly_qualified_teacher = null, $hispanic_latino_ethnicity = null, $id = null, $last_surname = null, $login_id = null, $maiden_name = null, $middle_name = null, $personal_title_prefix = null, $preferred_first_name = null, $preferred_last_surname = null, $years_of_prior_professional_experience = null, $years_of_prior_teaching_experience = null, $use_snapshot = false, string $contentType = self::contentTypes['getStaffs'][0])
    {
        $request = $this->getStaffsRequest($offset, $limit, $min_change_version, $max_change_version, $total_count, $staff_unique_id, $person_id, $source_system_descriptor, $citizenship_status_descriptor, $highest_completed_level_of_education_descriptor, $sex_descriptor, $birth_date, $first_name, $gender_identity, $generation_code_suffix, $highly_qualified_teacher, $hispanic_latino_ethnicity, $id, $last_surname, $login_id, $maiden_name, $middle_name, $personal_title_prefix, $preferred_first_name, $preferred_last_surname, $years_of_prior_professional_experience, $years_of_prior_teaching_experience, $use_snapshot, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Resources\Model\EdFiStaff[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Resources\Model\EdFiStaff[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Resources\Model\EdFiStaff[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Resources\Model\EdFiStaff[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Resources\Model\EdFiStaff[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getStaffsAsync
     *
     * Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional, default to 0)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)
     * @param  string $staff_unique_id A unique alphanumeric code assigned to a staff. (optional)
     * @param  string $person_id A unique alphanumeric code assigned to a person. (optional)
     * @param  string $source_system_descriptor This descriptor defines the originating record source system for the person. (optional)
     * @param  string $citizenship_status_descriptor An indicator of whether or not the person is a U.S. citizen. (optional)
     * @param  string $highest_completed_level_of_education_descriptor The extent of formal instruction an individual has received (e.g., the highest grade in school completed or its equivalent or the highest degree received). (optional)
     * @param  string $sex_descriptor The birth sex of the staff member. (optional)
     * @param  \DateTime $birth_date The month, day, and year on which an individual was born. (optional)
     * @param  string $first_name A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change. (optional)
     * @param  string $gender_identity The gender the staff member identifies themselves as. (optional)
     * @param  string $generation_code_suffix An appendage, if any, used to denote an individual&#39;s generation in his family (e.g., Jr., Sr., III). (optional)
     * @param  bool $highly_qualified_teacher An indication of whether a teacher is classified as highly qualified for his/her assignment according to state definition. This attribute indicates the teacher is highly qualified for ALL Sections being taught. (optional)
     * @param  bool $hispanic_latino_ethnicity An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, \&quot;Spanish origin,\&quot; can be used in addition to \&quot;Hispanic or Latino.\&quot; (optional)
     * @param  string $id  (optional)
     * @param  string $last_surname The name borne in common by members of a family. (optional)
     * @param  string $login_id The login ID for the user; used for security access control interface. (optional)
     * @param  string $maiden_name The individual&#39;s maiden name. (optional)
     * @param  string $middle_name A secondary name given to an individual at birth, baptism, or during another naming ceremony. (optional)
     * @param  string $personal_title_prefix A prefix used to denote the title, degree, position, or seniority of the individual. (optional)
     * @param  string $preferred_first_name The first name the individual prefers, if different from their legal first name (optional)
     * @param  string $preferred_last_surname The last name the individual prefers, if different from their legal last name (optional)
     * @param  float $years_of_prior_professional_experience The total number of years that an individual has previously held a similar professional position in one or more education institutions prior to the current school year. (optional)
     * @param  float $years_of_prior_teaching_experience The total number of years that an individual has previously held a teaching position in one or more education institutions prior to the current school year. (optional)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStaffs'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getStaffsAsync($offset = 0, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $staff_unique_id = null, $person_id = null, $source_system_descriptor = null, $citizenship_status_descriptor = null, $highest_completed_level_of_education_descriptor = null, $sex_descriptor = null, $birth_date = null, $first_name = null, $gender_identity = null, $generation_code_suffix = null, $highly_qualified_teacher = null, $hispanic_latino_ethnicity = null, $id = null, $last_surname = null, $login_id = null, $maiden_name = null, $middle_name = null, $personal_title_prefix = null, $preferred_first_name = null, $preferred_last_surname = null, $years_of_prior_professional_experience = null, $years_of_prior_teaching_experience = null, $use_snapshot = false, string $contentType = self::contentTypes['getStaffs'][0])
    {
        return $this->getStaffsAsyncWithHttpInfo($offset, $limit, $min_change_version, $max_change_version, $total_count, $staff_unique_id, $person_id, $source_system_descriptor, $citizenship_status_descriptor, $highest_completed_level_of_education_descriptor, $sex_descriptor, $birth_date, $first_name, $gender_identity, $generation_code_suffix, $highly_qualified_teacher, $hispanic_latino_ethnicity, $id, $last_surname, $login_id, $maiden_name, $middle_name, $personal_title_prefix, $preferred_first_name, $preferred_last_surname, $years_of_prior_professional_experience, $years_of_prior_teaching_experience, $use_snapshot, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getStaffsAsyncWithHttpInfo
     *
     * Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional, default to 0)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)
     * @param  string $staff_unique_id A unique alphanumeric code assigned to a staff. (optional)
     * @param  string $person_id A unique alphanumeric code assigned to a person. (optional)
     * @param  string $source_system_descriptor This descriptor defines the originating record source system for the person. (optional)
     * @param  string $citizenship_status_descriptor An indicator of whether or not the person is a U.S. citizen. (optional)
     * @param  string $highest_completed_level_of_education_descriptor The extent of formal instruction an individual has received (e.g., the highest grade in school completed or its equivalent or the highest degree received). (optional)
     * @param  string $sex_descriptor The birth sex of the staff member. (optional)
     * @param  \DateTime $birth_date The month, day, and year on which an individual was born. (optional)
     * @param  string $first_name A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change. (optional)
     * @param  string $gender_identity The gender the staff member identifies themselves as. (optional)
     * @param  string $generation_code_suffix An appendage, if any, used to denote an individual&#39;s generation in his family (e.g., Jr., Sr., III). (optional)
     * @param  bool $highly_qualified_teacher An indication of whether a teacher is classified as highly qualified for his/her assignment according to state definition. This attribute indicates the teacher is highly qualified for ALL Sections being taught. (optional)
     * @param  bool $hispanic_latino_ethnicity An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, \&quot;Spanish origin,\&quot; can be used in addition to \&quot;Hispanic or Latino.\&quot; (optional)
     * @param  string $id  (optional)
     * @param  string $last_surname The name borne in common by members of a family. (optional)
     * @param  string $login_id The login ID for the user; used for security access control interface. (optional)
     * @param  string $maiden_name The individual&#39;s maiden name. (optional)
     * @param  string $middle_name A secondary name given to an individual at birth, baptism, or during another naming ceremony. (optional)
     * @param  string $personal_title_prefix A prefix used to denote the title, degree, position, or seniority of the individual. (optional)
     * @param  string $preferred_first_name The first name the individual prefers, if different from their legal first name (optional)
     * @param  string $preferred_last_surname The last name the individual prefers, if different from their legal last name (optional)
     * @param  float $years_of_prior_professional_experience The total number of years that an individual has previously held a similar professional position in one or more education institutions prior to the current school year. (optional)
     * @param  float $years_of_prior_teaching_experience The total number of years that an individual has previously held a teaching position in one or more education institutions prior to the current school year. (optional)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStaffs'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getStaffsAsyncWithHttpInfo($offset = 0, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $staff_unique_id = null, $person_id = null, $source_system_descriptor = null, $citizenship_status_descriptor = null, $highest_completed_level_of_education_descriptor = null, $sex_descriptor = null, $birth_date = null, $first_name = null, $gender_identity = null, $generation_code_suffix = null, $highly_qualified_teacher = null, $hispanic_latino_ethnicity = null, $id = null, $last_surname = null, $login_id = null, $maiden_name = null, $middle_name = null, $personal_title_prefix = null, $preferred_first_name = null, $preferred_last_surname = null, $years_of_prior_professional_experience = null, $years_of_prior_teaching_experience = null, $use_snapshot = false, string $contentType = self::contentTypes['getStaffs'][0])
    {
        $returnType = '\Resources\Model\EdFiStaff[]';
        $request = $this->getStaffsRequest($offset, $limit, $min_change_version, $max_change_version, $total_count, $staff_unique_id, $person_id, $source_system_descriptor, $citizenship_status_descriptor, $highest_completed_level_of_education_descriptor, $sex_descriptor, $birth_date, $first_name, $gender_identity, $generation_code_suffix, $highly_qualified_teacher, $hispanic_latino_ethnicity, $id, $last_surname, $login_id, $maiden_name, $middle_name, $personal_title_prefix, $preferred_first_name, $preferred_last_surname, $years_of_prior_professional_experience, $years_of_prior_teaching_experience, $use_snapshot, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getStaffs'
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional, default to 0)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)
     * @param  string $staff_unique_id A unique alphanumeric code assigned to a staff. (optional)
     * @param  string $person_id A unique alphanumeric code assigned to a person. (optional)
     * @param  string $source_system_descriptor This descriptor defines the originating record source system for the person. (optional)
     * @param  string $citizenship_status_descriptor An indicator of whether or not the person is a U.S. citizen. (optional)
     * @param  string $highest_completed_level_of_education_descriptor The extent of formal instruction an individual has received (e.g., the highest grade in school completed or its equivalent or the highest degree received). (optional)
     * @param  string $sex_descriptor The birth sex of the staff member. (optional)
     * @param  \DateTime $birth_date The month, day, and year on which an individual was born. (optional)
     * @param  string $first_name A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change. (optional)
     * @param  string $gender_identity The gender the staff member identifies themselves as. (optional)
     * @param  string $generation_code_suffix An appendage, if any, used to denote an individual&#39;s generation in his family (e.g., Jr., Sr., III). (optional)
     * @param  bool $highly_qualified_teacher An indication of whether a teacher is classified as highly qualified for his/her assignment according to state definition. This attribute indicates the teacher is highly qualified for ALL Sections being taught. (optional)
     * @param  bool $hispanic_latino_ethnicity An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, \&quot;Spanish origin,\&quot; can be used in addition to \&quot;Hispanic or Latino.\&quot; (optional)
     * @param  string $id  (optional)
     * @param  string $last_surname The name borne in common by members of a family. (optional)
     * @param  string $login_id The login ID for the user; used for security access control interface. (optional)
     * @param  string $maiden_name The individual&#39;s maiden name. (optional)
     * @param  string $middle_name A secondary name given to an individual at birth, baptism, or during another naming ceremony. (optional)
     * @param  string $personal_title_prefix A prefix used to denote the title, degree, position, or seniority of the individual. (optional)
     * @param  string $preferred_first_name The first name the individual prefers, if different from their legal first name (optional)
     * @param  string $preferred_last_surname The last name the individual prefers, if different from their legal last name (optional)
     * @param  float $years_of_prior_professional_experience The total number of years that an individual has previously held a similar professional position in one or more education institutions prior to the current school year. (optional)
     * @param  float $years_of_prior_teaching_experience The total number of years that an individual has previously held a teaching position in one or more education institutions prior to the current school year. (optional)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStaffs'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getStaffsRequest($offset = 0, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $staff_unique_id = null, $person_id = null, $source_system_descriptor = null, $citizenship_status_descriptor = null, $highest_completed_level_of_education_descriptor = null, $sex_descriptor = null, $birth_date = null, $first_name = null, $gender_identity = null, $generation_code_suffix = null, $highly_qualified_teacher = null, $hispanic_latino_ethnicity = null, $id = null, $last_surname = null, $login_id = null, $maiden_name = null, $middle_name = null, $personal_title_prefix = null, $preferred_first_name = null, $preferred_last_surname = null, $years_of_prior_professional_experience = null, $years_of_prior_teaching_experience = null, $use_snapshot = false, string $contentType = self::contentTypes['getStaffs'][0])
    {


        if ($limit !== null && $limit > 500) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling StaffsApi.getStaffs, must be smaller than or equal to 500.');
        }
        if ($limit !== null && $limit < 0) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling StaffsApi.getStaffs, must be bigger than or equal to 0.');
        }
        



        if ($staff_unique_id !== null && strlen($staff_unique_id) > 32) {
            throw new \InvalidArgumentException('invalid length for "$staff_unique_id" when calling StaffsApi.getStaffs, must be smaller than or equal to 32.');
        }
        
        if ($person_id !== null && strlen($person_id) > 32) {
            throw new \InvalidArgumentException('invalid length for "$person_id" when calling StaffsApi.getStaffs, must be smaller than or equal to 32.');
        }
        
        if ($source_system_descriptor !== null && strlen($source_system_descriptor) > 306) {
            throw new \InvalidArgumentException('invalid length for "$source_system_descriptor" when calling StaffsApi.getStaffs, must be smaller than or equal to 306.');
        }
        
        if ($citizenship_status_descriptor !== null && strlen($citizenship_status_descriptor) > 306) {
            throw new \InvalidArgumentException('invalid length for "$citizenship_status_descriptor" when calling StaffsApi.getStaffs, must be smaller than or equal to 306.');
        }
        
        if ($highest_completed_level_of_education_descriptor !== null && strlen($highest_completed_level_of_education_descriptor) > 306) {
            throw new \InvalidArgumentException('invalid length for "$highest_completed_level_of_education_descriptor" when calling StaffsApi.getStaffs, must be smaller than or equal to 306.');
        }
        
        if ($sex_descriptor !== null && strlen($sex_descriptor) > 306) {
            throw new \InvalidArgumentException('invalid length for "$sex_descriptor" when calling StaffsApi.getStaffs, must be smaller than or equal to 306.');
        }
        

        if ($first_name !== null && strlen($first_name) > 75) {
            throw new \InvalidArgumentException('invalid length for "$first_name" when calling StaffsApi.getStaffs, must be smaller than or equal to 75.');
        }
        
        if ($gender_identity !== null && strlen($gender_identity) > 60) {
            throw new \InvalidArgumentException('invalid length for "$gender_identity" when calling StaffsApi.getStaffs, must be smaller than or equal to 60.');
        }
        
        if ($generation_code_suffix !== null && strlen($generation_code_suffix) > 10) {
            throw new \InvalidArgumentException('invalid length for "$generation_code_suffix" when calling StaffsApi.getStaffs, must be smaller than or equal to 10.');
        }
        



        if ($last_surname !== null && strlen($last_surname) > 75) {
            throw new \InvalidArgumentException('invalid length for "$last_surname" when calling StaffsApi.getStaffs, must be smaller than or equal to 75.');
        }
        
        if ($login_id !== null && strlen($login_id) > 60) {
            throw new \InvalidArgumentException('invalid length for "$login_id" when calling StaffsApi.getStaffs, must be smaller than or equal to 60.');
        }
        
        if ($maiden_name !== null && strlen($maiden_name) > 75) {
            throw new \InvalidArgumentException('invalid length for "$maiden_name" when calling StaffsApi.getStaffs, must be smaller than or equal to 75.');
        }
        
        if ($middle_name !== null && strlen($middle_name) > 75) {
            throw new \InvalidArgumentException('invalid length for "$middle_name" when calling StaffsApi.getStaffs, must be smaller than or equal to 75.');
        }
        
        if ($personal_title_prefix !== null && strlen($personal_title_prefix) > 30) {
            throw new \InvalidArgumentException('invalid length for "$personal_title_prefix" when calling StaffsApi.getStaffs, must be smaller than or equal to 30.');
        }
        
        if ($preferred_first_name !== null && strlen($preferred_first_name) > 75) {
            throw new \InvalidArgumentException('invalid length for "$preferred_first_name" when calling StaffsApi.getStaffs, must be smaller than or equal to 75.');
        }
        
        if ($preferred_last_surname !== null && strlen($preferred_last_surname) > 75) {
            throw new \InvalidArgumentException('invalid length for "$preferred_last_surname" when calling StaffsApi.getStaffs, must be smaller than or equal to 75.');
        }
        




        $resourcePath = '/ed-fi/staffs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_change_version,
            'minChangeVersion', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_change_version,
            'maxChangeVersion', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $total_count,
            'totalCount', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $staff_unique_id,
            'staffUniqueId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $person_id,
            'personId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $source_system_descriptor,
            'sourceSystemDescriptor', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $citizenship_status_descriptor,
            'citizenshipStatusDescriptor', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $highest_completed_level_of_education_descriptor,
            'highestCompletedLevelOfEducationDescriptor', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sex_descriptor,
            'sexDescriptor', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $birth_date,
            'birthDate', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $first_name,
            'firstName', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $gender_identity,
            'genderIdentity', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $generation_code_suffix,
            'generationCodeSuffix', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $highly_qualified_teacher,
            'highlyQualifiedTeacher', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $hispanic_latino_ethnicity,
            'hispanicLatinoEthnicity', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id,
            'id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $last_surname,
            'lastSurname', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $login_id,
            'loginId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $maiden_name,
            'maidenName', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $middle_name,
            'middleName', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $personal_title_prefix,
            'personalTitlePrefix', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $preferred_first_name,
            'preferredFirstName', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $preferred_last_surname,
            'preferredLastSurname', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $years_of_prior_professional_experience,
            'yearsOfPriorProfessionalExperience', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $years_of_prior_teaching_experience,
            'yearsOfPriorTeachingExperience', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($use_snapshot !== null) {
            $headerParams['Use-Snapshot'] = ObjectSerializer::toHeaderValue($use_snapshot);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getStaffsById
     *
     * Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  string $if_none_match The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStaffsById'] to see the possible values for this operation
     *
     * @throws \Resources\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Resources\Model\EdFiStaff
     */
    public function getStaffsById($id, $if_none_match = null, $use_snapshot = false, string $contentType = self::contentTypes['getStaffsById'][0])
    {
        list($response) = $this->getStaffsByIdWithHttpInfo($id, $if_none_match, $use_snapshot, $contentType);
        return $response;
    }

    /**
     * Operation getStaffsByIdWithHttpInfo
     *
     * Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  string $if_none_match The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStaffsById'] to see the possible values for this operation
     *
     * @throws \Resources\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Resources\Model\EdFiStaff, HTTP status code, HTTP response headers (array of strings)
     */
    public function getStaffsByIdWithHttpInfo($id, $if_none_match = null, $use_snapshot = false, string $contentType = self::contentTypes['getStaffsById'][0])
    {
        $request = $this->getStaffsByIdRequest($id, $if_none_match, $use_snapshot, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Resources\Model\EdFiStaff' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Resources\Model\EdFiStaff' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Resources\Model\EdFiStaff', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Resources\Model\EdFiStaff';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Resources\Model\EdFiStaff',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getStaffsByIdAsync
     *
     * Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  string $if_none_match The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStaffsById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getStaffsByIdAsync($id, $if_none_match = null, $use_snapshot = false, string $contentType = self::contentTypes['getStaffsById'][0])
    {
        return $this->getStaffsByIdAsyncWithHttpInfo($id, $if_none_match, $use_snapshot, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getStaffsByIdAsyncWithHttpInfo
     *
     * Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  string $if_none_match The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStaffsById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getStaffsByIdAsyncWithHttpInfo($id, $if_none_match = null, $use_snapshot = false, string $contentType = self::contentTypes['getStaffsById'][0])
    {
        $returnType = '\Resources\Model\EdFiStaff';
        $request = $this->getStaffsByIdRequest($id, $if_none_match, $use_snapshot, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getStaffsById'
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  string $if_none_match The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStaffsById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getStaffsByIdRequest($id, $if_none_match = null, $use_snapshot = false, string $contentType = self::contentTypes['getStaffsById'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getStaffsById'
            );
        }




        $resourcePath = '/ed-fi/staffs/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }
        // header params
        if ($use_snapshot !== null) {
            $headerParams['Use-Snapshot'] = ObjectSerializer::toHeaderValue($use_snapshot);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation keyChangesStaffs
     *
     * Retrieves resources key changes based on change version.
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional, default to 0)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['keyChangesStaffs'] to see the possible values for this operation
     *
     * @throws \Resources\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Resources\Model\TrackedChangesEdFiStaffKeyChange[]
     */
    public function keyChangesStaffs($offset = 0, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $use_snapshot = false, string $contentType = self::contentTypes['keyChangesStaffs'][0])
    {
        list($response) = $this->keyChangesStaffsWithHttpInfo($offset, $limit, $min_change_version, $max_change_version, $total_count, $use_snapshot, $contentType);
        return $response;
    }

    /**
     * Operation keyChangesStaffsWithHttpInfo
     *
     * Retrieves resources key changes based on change version.
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional, default to 0)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['keyChangesStaffs'] to see the possible values for this operation
     *
     * @throws \Resources\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Resources\Model\TrackedChangesEdFiStaffKeyChange[], HTTP status code, HTTP response headers (array of strings)
     */
    public function keyChangesStaffsWithHttpInfo($offset = 0, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $use_snapshot = false, string $contentType = self::contentTypes['keyChangesStaffs'][0])
    {
        $request = $this->keyChangesStaffsRequest($offset, $limit, $min_change_version, $max_change_version, $total_count, $use_snapshot, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Resources\Model\TrackedChangesEdFiStaffKeyChange[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Resources\Model\TrackedChangesEdFiStaffKeyChange[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Resources\Model\TrackedChangesEdFiStaffKeyChange[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Resources\Model\TrackedChangesEdFiStaffKeyChange[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Resources\Model\TrackedChangesEdFiStaffKeyChange[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation keyChangesStaffsAsync
     *
     * Retrieves resources key changes based on change version.
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional, default to 0)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['keyChangesStaffs'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function keyChangesStaffsAsync($offset = 0, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $use_snapshot = false, string $contentType = self::contentTypes['keyChangesStaffs'][0])
    {
        return $this->keyChangesStaffsAsyncWithHttpInfo($offset, $limit, $min_change_version, $max_change_version, $total_count, $use_snapshot, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation keyChangesStaffsAsyncWithHttpInfo
     *
     * Retrieves resources key changes based on change version.
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional, default to 0)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['keyChangesStaffs'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function keyChangesStaffsAsyncWithHttpInfo($offset = 0, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $use_snapshot = false, string $contentType = self::contentTypes['keyChangesStaffs'][0])
    {
        $returnType = '\Resources\Model\TrackedChangesEdFiStaffKeyChange[]';
        $request = $this->keyChangesStaffsRequest($offset, $limit, $min_change_version, $max_change_version, $total_count, $use_snapshot, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'keyChangesStaffs'
     *
     * @param  int $offset Indicates how many items should be skipped before returning results. (optional, default to 0)
     * @param  int $limit Indicates the maximum number of items that should be returned in the results. (optional, default to 25)
     * @param  int $min_change_version Used in synchronization to set sequence minimum ChangeVersion (optional)
     * @param  int $max_change_version Used in synchronization to set sequence maximum ChangeVersion (optional)
     * @param  bool $total_count Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)
     * @param  bool $use_snapshot Indicates if the configured Snapshot should be used. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['keyChangesStaffs'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function keyChangesStaffsRequest($offset = 0, $limit = 25, $min_change_version = null, $max_change_version = null, $total_count = false, $use_snapshot = false, string $contentType = self::contentTypes['keyChangesStaffs'][0])
    {


        if ($limit !== null && $limit > 500) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling StaffsApi.keyChangesStaffs, must be smaller than or equal to 500.');
        }
        if ($limit !== null && $limit < 0) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling StaffsApi.keyChangesStaffs, must be bigger than or equal to 0.');
        }
        





        $resourcePath = '/ed-fi/staffs/keyChanges';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_change_version,
            'minChangeVersion', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_change_version,
            'maxChangeVersion', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $total_count,
            'totalCount', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($use_snapshot !== null) {
            $headerParams['Use-Snapshot'] = ObjectSerializer::toHeaderValue($use_snapshot);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postStaff
     *
     * Creates or updates resources based on the natural key values of the supplied resource.
     *
     * @param  \Resources\Model\EdFiStaff $ed_fi_staff The JSON representation of the \&quot;staff\&quot; resource to be created or updated. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postStaff'] to see the possible values for this operation
     *
     * @throws \Resources\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function postStaff($ed_fi_staff, string $contentType = self::contentTypes['postStaff'][0])
    {
        $this->postStaffWithHttpInfo($ed_fi_staff, $contentType);
    }

    /**
     * Operation postStaffWithHttpInfo
     *
     * Creates or updates resources based on the natural key values of the supplied resource.
     *
     * @param  \Resources\Model\EdFiStaff $ed_fi_staff The JSON representation of the \&quot;staff\&quot; resource to be created or updated. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postStaff'] to see the possible values for this operation
     *
     * @throws \Resources\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function postStaffWithHttpInfo($ed_fi_staff, string $contentType = self::contentTypes['postStaff'][0])
    {
        $request = $this->postStaffRequest($ed_fi_staff, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation postStaffAsync
     *
     * Creates or updates resources based on the natural key values of the supplied resource.
     *
     * @param  \Resources\Model\EdFiStaff $ed_fi_staff The JSON representation of the \&quot;staff\&quot; resource to be created or updated. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postStaff'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postStaffAsync($ed_fi_staff, string $contentType = self::contentTypes['postStaff'][0])
    {
        return $this->postStaffAsyncWithHttpInfo($ed_fi_staff, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postStaffAsyncWithHttpInfo
     *
     * Creates or updates resources based on the natural key values of the supplied resource.
     *
     * @param  \Resources\Model\EdFiStaff $ed_fi_staff The JSON representation of the \&quot;staff\&quot; resource to be created or updated. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postStaff'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postStaffAsyncWithHttpInfo($ed_fi_staff, string $contentType = self::contentTypes['postStaff'][0])
    {
        $returnType = '';
        $request = $this->postStaffRequest($ed_fi_staff, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postStaff'
     *
     * @param  \Resources\Model\EdFiStaff $ed_fi_staff The JSON representation of the \&quot;staff\&quot; resource to be created or updated. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postStaff'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postStaffRequest($ed_fi_staff, string $contentType = self::contentTypes['postStaff'][0])
    {

        // verify the required parameter 'ed_fi_staff' is set
        if ($ed_fi_staff === null || (is_array($ed_fi_staff) && count($ed_fi_staff) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ed_fi_staff when calling postStaff'
            );
        }


        $resourcePath = '/ed-fi/staffs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($ed_fi_staff)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($ed_fi_staff));
            } else {
                $httpBody = $ed_fi_staff;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putStaff
     *
     * Updates a resource based on the resource identifier.
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  \Resources\Model\EdFiStaff $ed_fi_staff The JSON representation of the \&quot;staff\&quot; resource to be created or updated. (required)
     * @param  string $if_match The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putStaff'] to see the possible values for this operation
     *
     * @throws \Resources\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function putStaff($id, $ed_fi_staff, $if_match = null, string $contentType = self::contentTypes['putStaff'][0])
    {
        $this->putStaffWithHttpInfo($id, $ed_fi_staff, $if_match, $contentType);
    }

    /**
     * Operation putStaffWithHttpInfo
     *
     * Updates a resource based on the resource identifier.
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  \Resources\Model\EdFiStaff $ed_fi_staff The JSON representation of the \&quot;staff\&quot; resource to be created or updated. (required)
     * @param  string $if_match The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putStaff'] to see the possible values for this operation
     *
     * @throws \Resources\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function putStaffWithHttpInfo($id, $ed_fi_staff, $if_match = null, string $contentType = self::contentTypes['putStaff'][0])
    {
        $request = $this->putStaffRequest($id, $ed_fi_staff, $if_match, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation putStaffAsync
     *
     * Updates a resource based on the resource identifier.
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  \Resources\Model\EdFiStaff $ed_fi_staff The JSON representation of the \&quot;staff\&quot; resource to be created or updated. (required)
     * @param  string $if_match The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putStaff'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putStaffAsync($id, $ed_fi_staff, $if_match = null, string $contentType = self::contentTypes['putStaff'][0])
    {
        return $this->putStaffAsyncWithHttpInfo($id, $ed_fi_staff, $if_match, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putStaffAsyncWithHttpInfo
     *
     * Updates a resource based on the resource identifier.
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  \Resources\Model\EdFiStaff $ed_fi_staff The JSON representation of the \&quot;staff\&quot; resource to be created or updated. (required)
     * @param  string $if_match The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putStaff'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putStaffAsyncWithHttpInfo($id, $ed_fi_staff, $if_match = null, string $contentType = self::contentTypes['putStaff'][0])
    {
        $returnType = '';
        $request = $this->putStaffRequest($id, $ed_fi_staff, $if_match, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putStaff'
     *
     * @param  string $id A resource identifier that uniquely identifies the resource. (required)
     * @param  \Resources\Model\EdFiStaff $ed_fi_staff The JSON representation of the \&quot;staff\&quot; resource to be created or updated. (required)
     * @param  string $if_match The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putStaff'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function putStaffRequest($id, $ed_fi_staff, $if_match = null, string $contentType = self::contentTypes['putStaff'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling putStaff'
            );
        }

        // verify the required parameter 'ed_fi_staff' is set
        if ($ed_fi_staff === null || (is_array($ed_fi_staff) && count($ed_fi_staff) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ed_fi_staff when calling putStaff'
            );
        }



        $resourcePath = '/ed-fi/staffs/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($if_match !== null) {
            $headerParams['If-Match'] = ObjectSerializer::toHeaderValue($if_match);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($ed_fi_staff)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($ed_fi_staff));
            } else {
                $httpBody = $ed_fi_staff;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
