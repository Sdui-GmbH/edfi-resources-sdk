<?php
/**
 * TrackedChangesTpdmEvaluationElementRatingKey
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Resources
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Resources\Model;

use \ArrayAccess;
use \Resources\ObjectSerializer;

/**
 * TrackedChangesTpdmEvaluationElementRatingKey Class Doc Comment
 *
 * @category Class
 * @package  Resources
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TrackedChangesTpdmEvaluationElementRatingKey implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'trackedChanges_tpdm_evaluationElementRatingKey';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'education_organization_id' => 'int',
        'evaluation_element_title' => 'string',
        'evaluation_objective_title' => 'string',
        'evaluation_period_descriptor' => 'string',
        'evaluation_title' => 'string',
        'performance_evaluation_title' => 'string',
        'performance_evaluation_type_descriptor' => 'string',
        'school_year' => 'int',
        'term_descriptor' => 'string',
        'evaluation_date' => '\DateTime',
        'person_id' => 'string',
        'source_system_descriptor' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'education_organization_id' => 'int64',
        'evaluation_element_title' => null,
        'evaluation_objective_title' => null,
        'evaluation_period_descriptor' => null,
        'evaluation_title' => null,
        'performance_evaluation_title' => null,
        'performance_evaluation_type_descriptor' => null,
        'school_year' => 'int32',
        'term_descriptor' => null,
        'evaluation_date' => 'date-time',
        'person_id' => null,
        'source_system_descriptor' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'education_organization_id' => false,
        'evaluation_element_title' => false,
        'evaluation_objective_title' => false,
        'evaluation_period_descriptor' => false,
        'evaluation_title' => false,
        'performance_evaluation_title' => false,
        'performance_evaluation_type_descriptor' => false,
        'school_year' => false,
        'term_descriptor' => false,
        'evaluation_date' => false,
        'person_id' => false,
        'source_system_descriptor' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'education_organization_id' => 'educationOrganizationId',
        'evaluation_element_title' => 'evaluationElementTitle',
        'evaluation_objective_title' => 'evaluationObjectiveTitle',
        'evaluation_period_descriptor' => 'evaluationPeriodDescriptor',
        'evaluation_title' => 'evaluationTitle',
        'performance_evaluation_title' => 'performanceEvaluationTitle',
        'performance_evaluation_type_descriptor' => 'performanceEvaluationTypeDescriptor',
        'school_year' => 'schoolYear',
        'term_descriptor' => 'termDescriptor',
        'evaluation_date' => 'evaluationDate',
        'person_id' => 'personId',
        'source_system_descriptor' => 'sourceSystemDescriptor'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'education_organization_id' => 'setEducationOrganizationId',
        'evaluation_element_title' => 'setEvaluationElementTitle',
        'evaluation_objective_title' => 'setEvaluationObjectiveTitle',
        'evaluation_period_descriptor' => 'setEvaluationPeriodDescriptor',
        'evaluation_title' => 'setEvaluationTitle',
        'performance_evaluation_title' => 'setPerformanceEvaluationTitle',
        'performance_evaluation_type_descriptor' => 'setPerformanceEvaluationTypeDescriptor',
        'school_year' => 'setSchoolYear',
        'term_descriptor' => 'setTermDescriptor',
        'evaluation_date' => 'setEvaluationDate',
        'person_id' => 'setPersonId',
        'source_system_descriptor' => 'setSourceSystemDescriptor'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'education_organization_id' => 'getEducationOrganizationId',
        'evaluation_element_title' => 'getEvaluationElementTitle',
        'evaluation_objective_title' => 'getEvaluationObjectiveTitle',
        'evaluation_period_descriptor' => 'getEvaluationPeriodDescriptor',
        'evaluation_title' => 'getEvaluationTitle',
        'performance_evaluation_title' => 'getPerformanceEvaluationTitle',
        'performance_evaluation_type_descriptor' => 'getPerformanceEvaluationTypeDescriptor',
        'school_year' => 'getSchoolYear',
        'term_descriptor' => 'getTermDescriptor',
        'evaluation_date' => 'getEvaluationDate',
        'person_id' => 'getPersonId',
        'source_system_descriptor' => 'getSourceSystemDescriptor'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('education_organization_id', $data ?? [], null);
        $this->setIfExists('evaluation_element_title', $data ?? [], null);
        $this->setIfExists('evaluation_objective_title', $data ?? [], null);
        $this->setIfExists('evaluation_period_descriptor', $data ?? [], null);
        $this->setIfExists('evaluation_title', $data ?? [], null);
        $this->setIfExists('performance_evaluation_title', $data ?? [], null);
        $this->setIfExists('performance_evaluation_type_descriptor', $data ?? [], null);
        $this->setIfExists('school_year', $data ?? [], null);
        $this->setIfExists('term_descriptor', $data ?? [], null);
        $this->setIfExists('evaluation_date', $data ?? [], null);
        $this->setIfExists('person_id', $data ?? [], null);
        $this->setIfExists('source_system_descriptor', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['evaluation_element_title']) && (mb_strlen($this->container['evaluation_element_title']) > 255)) {
            $invalidProperties[] = "invalid value for 'evaluation_element_title', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['evaluation_element_title']) && (mb_strlen($this->container['evaluation_element_title']) < 1)) {
            $invalidProperties[] = "invalid value for 'evaluation_element_title', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['evaluation_objective_title']) && (mb_strlen($this->container['evaluation_objective_title']) > 50)) {
            $invalidProperties[] = "invalid value for 'evaluation_objective_title', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['evaluation_objective_title']) && (mb_strlen($this->container['evaluation_objective_title']) < 1)) {
            $invalidProperties[] = "invalid value for 'evaluation_objective_title', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['evaluation_period_descriptor']) && (mb_strlen($this->container['evaluation_period_descriptor']) > 306)) {
            $invalidProperties[] = "invalid value for 'evaluation_period_descriptor', the character length must be smaller than or equal to 306.";
        }

        if (!is_null($this->container['evaluation_title']) && (mb_strlen($this->container['evaluation_title']) > 50)) {
            $invalidProperties[] = "invalid value for 'evaluation_title', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['evaluation_title']) && (mb_strlen($this->container['evaluation_title']) < 1)) {
            $invalidProperties[] = "invalid value for 'evaluation_title', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['performance_evaluation_title']) && (mb_strlen($this->container['performance_evaluation_title']) > 50)) {
            $invalidProperties[] = "invalid value for 'performance_evaluation_title', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['performance_evaluation_title']) && (mb_strlen($this->container['performance_evaluation_title']) < 1)) {
            $invalidProperties[] = "invalid value for 'performance_evaluation_title', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['performance_evaluation_type_descriptor']) && (mb_strlen($this->container['performance_evaluation_type_descriptor']) > 306)) {
            $invalidProperties[] = "invalid value for 'performance_evaluation_type_descriptor', the character length must be smaller than or equal to 306.";
        }

        if (!is_null($this->container['term_descriptor']) && (mb_strlen($this->container['term_descriptor']) > 306)) {
            $invalidProperties[] = "invalid value for 'term_descriptor', the character length must be smaller than or equal to 306.";
        }

        if (!is_null($this->container['person_id']) && (mb_strlen($this->container['person_id']) > 32)) {
            $invalidProperties[] = "invalid value for 'person_id', the character length must be smaller than or equal to 32.";
        }

        if (!is_null($this->container['source_system_descriptor']) && (mb_strlen($this->container['source_system_descriptor']) > 306)) {
            $invalidProperties[] = "invalid value for 'source_system_descriptor', the character length must be smaller than or equal to 306.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets education_organization_id
     *
     * @return int|null
     */
    public function getEducationOrganizationId()
    {
        return $this->container['education_organization_id'];
    }

    /**
     * Sets education_organization_id
     *
     * @param int|null $education_organization_id The identifier assigned to an education organization.
     *
     * @return self
     */
    public function setEducationOrganizationId($education_organization_id)
    {
        if (is_null($education_organization_id)) {
            throw new \InvalidArgumentException('non-nullable education_organization_id cannot be null');
        }
        $this->container['education_organization_id'] = $education_organization_id;

        return $this;
    }

    /**
     * Gets evaluation_element_title
     *
     * @return string|null
     */
    public function getEvaluationElementTitle()
    {
        return $this->container['evaluation_element_title'];
    }

    /**
     * Sets evaluation_element_title
     *
     * @param string|null $evaluation_element_title The name or title of the evaluation element.
     *
     * @return self
     */
    public function setEvaluationElementTitle($evaluation_element_title)
    {
        if (is_null($evaluation_element_title)) {
            throw new \InvalidArgumentException('non-nullable evaluation_element_title cannot be null');
        }
        if ((mb_strlen($evaluation_element_title) > 255)) {
            throw new \InvalidArgumentException('invalid length for $evaluation_element_title when calling TrackedChangesTpdmEvaluationElementRatingKey., must be smaller than or equal to 255.');
        }
        if ((mb_strlen($evaluation_element_title) < 1)) {
            throw new \InvalidArgumentException('invalid length for $evaluation_element_title when calling TrackedChangesTpdmEvaluationElementRatingKey., must be bigger than or equal to 1.');
        }

        $this->container['evaluation_element_title'] = $evaluation_element_title;

        return $this;
    }

    /**
     * Gets evaluation_objective_title
     *
     * @return string|null
     */
    public function getEvaluationObjectiveTitle()
    {
        return $this->container['evaluation_objective_title'];
    }

    /**
     * Sets evaluation_objective_title
     *
     * @param string|null $evaluation_objective_title The name or title of the evaluation Objective.
     *
     * @return self
     */
    public function setEvaluationObjectiveTitle($evaluation_objective_title)
    {
        if (is_null($evaluation_objective_title)) {
            throw new \InvalidArgumentException('non-nullable evaluation_objective_title cannot be null');
        }
        if ((mb_strlen($evaluation_objective_title) > 50)) {
            throw new \InvalidArgumentException('invalid length for $evaluation_objective_title when calling TrackedChangesTpdmEvaluationElementRatingKey., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($evaluation_objective_title) < 1)) {
            throw new \InvalidArgumentException('invalid length for $evaluation_objective_title when calling TrackedChangesTpdmEvaluationElementRatingKey., must be bigger than or equal to 1.');
        }

        $this->container['evaluation_objective_title'] = $evaluation_objective_title;

        return $this;
    }

    /**
     * Gets evaluation_period_descriptor
     *
     * @return string|null
     */
    public function getEvaluationPeriodDescriptor()
    {
        return $this->container['evaluation_period_descriptor'];
    }

    /**
     * Sets evaluation_period_descriptor
     *
     * @param string|null $evaluation_period_descriptor The period for the evaluation.
     *
     * @return self
     */
    public function setEvaluationPeriodDescriptor($evaluation_period_descriptor)
    {
        if (is_null($evaluation_period_descriptor)) {
            throw new \InvalidArgumentException('non-nullable evaluation_period_descriptor cannot be null');
        }
        if ((mb_strlen($evaluation_period_descriptor) > 306)) {
            throw new \InvalidArgumentException('invalid length for $evaluation_period_descriptor when calling TrackedChangesTpdmEvaluationElementRatingKey., must be smaller than or equal to 306.');
        }

        $this->container['evaluation_period_descriptor'] = $evaluation_period_descriptor;

        return $this;
    }

    /**
     * Gets evaluation_title
     *
     * @return string|null
     */
    public function getEvaluationTitle()
    {
        return $this->container['evaluation_title'];
    }

    /**
     * Sets evaluation_title
     *
     * @param string|null $evaluation_title The name or title of the evaluation.
     *
     * @return self
     */
    public function setEvaluationTitle($evaluation_title)
    {
        if (is_null($evaluation_title)) {
            throw new \InvalidArgumentException('non-nullable evaluation_title cannot be null');
        }
        if ((mb_strlen($evaluation_title) > 50)) {
            throw new \InvalidArgumentException('invalid length for $evaluation_title when calling TrackedChangesTpdmEvaluationElementRatingKey., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($evaluation_title) < 1)) {
            throw new \InvalidArgumentException('invalid length for $evaluation_title when calling TrackedChangesTpdmEvaluationElementRatingKey., must be bigger than or equal to 1.');
        }

        $this->container['evaluation_title'] = $evaluation_title;

        return $this;
    }

    /**
     * Gets performance_evaluation_title
     *
     * @return string|null
     */
    public function getPerformanceEvaluationTitle()
    {
        return $this->container['performance_evaluation_title'];
    }

    /**
     * Sets performance_evaluation_title
     *
     * @param string|null $performance_evaluation_title An assigned unique identifier for the performance evaluation.
     *
     * @return self
     */
    public function setPerformanceEvaluationTitle($performance_evaluation_title)
    {
        if (is_null($performance_evaluation_title)) {
            throw new \InvalidArgumentException('non-nullable performance_evaluation_title cannot be null');
        }
        if ((mb_strlen($performance_evaluation_title) > 50)) {
            throw new \InvalidArgumentException('invalid length for $performance_evaluation_title when calling TrackedChangesTpdmEvaluationElementRatingKey., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($performance_evaluation_title) < 1)) {
            throw new \InvalidArgumentException('invalid length for $performance_evaluation_title when calling TrackedChangesTpdmEvaluationElementRatingKey., must be bigger than or equal to 1.');
        }

        $this->container['performance_evaluation_title'] = $performance_evaluation_title;

        return $this;
    }

    /**
     * Gets performance_evaluation_type_descriptor
     *
     * @return string|null
     */
    public function getPerformanceEvaluationTypeDescriptor()
    {
        return $this->container['performance_evaluation_type_descriptor'];
    }

    /**
     * Sets performance_evaluation_type_descriptor
     *
     * @param string|null $performance_evaluation_type_descriptor The type of performance evaluation conducted.
     *
     * @return self
     */
    public function setPerformanceEvaluationTypeDescriptor($performance_evaluation_type_descriptor)
    {
        if (is_null($performance_evaluation_type_descriptor)) {
            throw new \InvalidArgumentException('non-nullable performance_evaluation_type_descriptor cannot be null');
        }
        if ((mb_strlen($performance_evaluation_type_descriptor) > 306)) {
            throw new \InvalidArgumentException('invalid length for $performance_evaluation_type_descriptor when calling TrackedChangesTpdmEvaluationElementRatingKey., must be smaller than or equal to 306.');
        }

        $this->container['performance_evaluation_type_descriptor'] = $performance_evaluation_type_descriptor;

        return $this;
    }

    /**
     * Gets school_year
     *
     * @return int|null
     */
    public function getSchoolYear()
    {
        return $this->container['school_year'];
    }

    /**
     * Sets school_year
     *
     * @param int|null $school_year The identifier for the school year.
     *
     * @return self
     */
    public function setSchoolYear($school_year)
    {
        if (is_null($school_year)) {
            throw new \InvalidArgumentException('non-nullable school_year cannot be null');
        }
        $this->container['school_year'] = $school_year;

        return $this;
    }

    /**
     * Gets term_descriptor
     *
     * @return string|null
     */
    public function getTermDescriptor()
    {
        return $this->container['term_descriptor'];
    }

    /**
     * Sets term_descriptor
     *
     * @param string|null $term_descriptor The term for the session during the school year.
     *
     * @return self
     */
    public function setTermDescriptor($term_descriptor)
    {
        if (is_null($term_descriptor)) {
            throw new \InvalidArgumentException('non-nullable term_descriptor cannot be null');
        }
        if ((mb_strlen($term_descriptor) > 306)) {
            throw new \InvalidArgumentException('invalid length for $term_descriptor when calling TrackedChangesTpdmEvaluationElementRatingKey., must be smaller than or equal to 306.');
        }

        $this->container['term_descriptor'] = $term_descriptor;

        return $this;
    }

    /**
     * Gets evaluation_date
     *
     * @return \DateTime|null
     */
    public function getEvaluationDate()
    {
        return $this->container['evaluation_date'];
    }

    /**
     * Sets evaluation_date
     *
     * @param \DateTime|null $evaluation_date The date for the person's evaluation.
     *
     * @return self
     */
    public function setEvaluationDate($evaluation_date)
    {
        if (is_null($evaluation_date)) {
            throw new \InvalidArgumentException('non-nullable evaluation_date cannot be null');
        }
        $this->container['evaluation_date'] = $evaluation_date;

        return $this;
    }

    /**
     * Gets person_id
     *
     * @return string|null
     */
    public function getPersonId()
    {
        return $this->container['person_id'];
    }

    /**
     * Sets person_id
     *
     * @param string|null $person_id A unique alphanumeric code assigned to a person.
     *
     * @return self
     */
    public function setPersonId($person_id)
    {
        if (is_null($person_id)) {
            throw new \InvalidArgumentException('non-nullable person_id cannot be null');
        }
        if ((mb_strlen($person_id) > 32)) {
            throw new \InvalidArgumentException('invalid length for $person_id when calling TrackedChangesTpdmEvaluationElementRatingKey., must be smaller than or equal to 32.');
        }

        $this->container['person_id'] = $person_id;

        return $this;
    }

    /**
     * Gets source_system_descriptor
     *
     * @return string|null
     */
    public function getSourceSystemDescriptor()
    {
        return $this->container['source_system_descriptor'];
    }

    /**
     * Sets source_system_descriptor
     *
     * @param string|null $source_system_descriptor This descriptor defines the originating record source system for the person.
     *
     * @return self
     */
    public function setSourceSystemDescriptor($source_system_descriptor)
    {
        if (is_null($source_system_descriptor)) {
            throw new \InvalidArgumentException('non-nullable source_system_descriptor cannot be null');
        }
        if ((mb_strlen($source_system_descriptor) > 306)) {
            throw new \InvalidArgumentException('invalid length for $source_system_descriptor when calling TrackedChangesTpdmEvaluationElementRatingKey., must be smaller than or equal to 306.');
        }

        $this->container['source_system_descriptor'] = $source_system_descriptor;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


