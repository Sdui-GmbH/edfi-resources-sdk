<?php
/**
 * EdFiAssessmentContentStandard
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Resources
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Resources\Model;

use \ArrayAccess;
use \Resources\ObjectSerializer;

/**
 * EdFiAssessmentContentStandard Class Doc Comment
 *
 * @category Class
 * @package  Resources
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EdFiAssessmentContentStandard implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'edFi_assessmentContentStandard';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'publication_status_descriptor' => 'string',
        'begin_date' => '\DateTime',
        'end_date' => '\DateTime',
        'publication_date' => '\DateTime',
        'publication_year' => 'int',
        'title' => 'string',
        'uri' => 'string',
        'version' => 'string',
        'mandating_education_organization_reference' => '\Resources\Model\EdFiEducationOrganizationReference',
        'authors' => '\Resources\Model\EdFiAssessmentContentStandardAuthor[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'publication_status_descriptor' => null,
        'begin_date' => 'date',
        'end_date' => 'date',
        'publication_date' => 'date',
        'publication_year' => 'int32',
        'title' => null,
        'uri' => null,
        'version' => null,
        'mandating_education_organization_reference' => null,
        'authors' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'publication_status_descriptor' => true,
        'begin_date' => true,
        'end_date' => true,
        'publication_date' => true,
        'publication_year' => true,
        'title' => false,
        'uri' => true,
        'version' => true,
        'mandating_education_organization_reference' => false,
        'authors' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'publication_status_descriptor' => 'publicationStatusDescriptor',
        'begin_date' => 'beginDate',
        'end_date' => 'endDate',
        'publication_date' => 'publicationDate',
        'publication_year' => 'publicationYear',
        'title' => 'title',
        'uri' => 'uri',
        'version' => 'version',
        'mandating_education_organization_reference' => 'mandatingEducationOrganizationReference',
        'authors' => 'authors'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'publication_status_descriptor' => 'setPublicationStatusDescriptor',
        'begin_date' => 'setBeginDate',
        'end_date' => 'setEndDate',
        'publication_date' => 'setPublicationDate',
        'publication_year' => 'setPublicationYear',
        'title' => 'setTitle',
        'uri' => 'setUri',
        'version' => 'setVersion',
        'mandating_education_organization_reference' => 'setMandatingEducationOrganizationReference',
        'authors' => 'setAuthors'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'publication_status_descriptor' => 'getPublicationStatusDescriptor',
        'begin_date' => 'getBeginDate',
        'end_date' => 'getEndDate',
        'publication_date' => 'getPublicationDate',
        'publication_year' => 'getPublicationYear',
        'title' => 'getTitle',
        'uri' => 'getUri',
        'version' => 'getVersion',
        'mandating_education_organization_reference' => 'getMandatingEducationOrganizationReference',
        'authors' => 'getAuthors'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('publication_status_descriptor', $data ?? [], null);
        $this->setIfExists('begin_date', $data ?? [], null);
        $this->setIfExists('end_date', $data ?? [], null);
        $this->setIfExists('publication_date', $data ?? [], null);
        $this->setIfExists('publication_year', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('uri', $data ?? [], null);
        $this->setIfExists('version', $data ?? [], null);
        $this->setIfExists('mandating_education_organization_reference', $data ?? [], null);
        $this->setIfExists('authors', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['publication_status_descriptor']) && (mb_strlen($this->container['publication_status_descriptor']) > 306)) {
            $invalidProperties[] = "invalid value for 'publication_status_descriptor', the character length must be smaller than or equal to 306.";
        }

        if ($this->container['title'] === null) {
            $invalidProperties[] = "'title' can't be null";
        }
        if ((mb_strlen($this->container['title']) > 75)) {
            $invalidProperties[] = "invalid value for 'title', the character length must be smaller than or equal to 75.";
        }

        if ((mb_strlen($this->container['title']) < 1)) {
            $invalidProperties[] = "invalid value for 'title', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['uri']) && (mb_strlen($this->container['uri']) > 255)) {
            $invalidProperties[] = "invalid value for 'uri', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['uri']) && (mb_strlen($this->container['uri']) < 5)) {
            $invalidProperties[] = "invalid value for 'uri', the character length must be bigger than or equal to 5.";
        }

        if (!is_null($this->container['version']) && (mb_strlen($this->container['version']) > 50)) {
            $invalidProperties[] = "invalid value for 'version', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['version']) && (mb_strlen($this->container['version']) < 1)) {
            $invalidProperties[] = "invalid value for 'version', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets publication_status_descriptor
     *
     * @return string|null
     */
    public function getPublicationStatusDescriptor()
    {
        return $this->container['publication_status_descriptor'];
    }

    /**
     * Sets publication_status_descriptor
     *
     * @param string|null $publication_status_descriptor The publication status of the document (i.e., Adopted, Draft, Published, Deprecated, Unknown).
     *
     * @return self
     */
    public function setPublicationStatusDescriptor($publication_status_descriptor)
    {
        if (is_null($publication_status_descriptor)) {
            array_push($this->openAPINullablesSetToNull, 'publication_status_descriptor');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('publication_status_descriptor', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($publication_status_descriptor) && (mb_strlen($publication_status_descriptor) > 306)) {
            throw new \InvalidArgumentException('invalid length for $publication_status_descriptor when calling EdFiAssessmentContentStandard., must be smaller than or equal to 306.');
        }

        $this->container['publication_status_descriptor'] = $publication_status_descriptor;

        return $this;
    }

    /**
     * Gets begin_date
     *
     * @return \DateTime|null
     */
    public function getBeginDate()
    {
        return $this->container['begin_date'];
    }

    /**
     * Sets begin_date
     *
     * @param \DateTime|null $begin_date The beginning of the period during which this learning standard document is intended for use.
     *
     * @return self
     */
    public function setBeginDate($begin_date)
    {
        if (is_null($begin_date)) {
            array_push($this->openAPINullablesSetToNull, 'begin_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('begin_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['begin_date'] = $begin_date;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return \DateTime|null
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param \DateTime|null $end_date The end of the period during which this learning standard document is intended for use.
     *
     * @return self
     */
    public function setEndDate($end_date)
    {
        if (is_null($end_date)) {
            array_push($this->openAPINullablesSetToNull, 'end_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('end_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets publication_date
     *
     * @return \DateTime|null
     */
    public function getPublicationDate()
    {
        return $this->container['publication_date'];
    }

    /**
     * Sets publication_date
     *
     * @param \DateTime|null $publication_date The date on which this content was first published.
     *
     * @return self
     */
    public function setPublicationDate($publication_date)
    {
        if (is_null($publication_date)) {
            array_push($this->openAPINullablesSetToNull, 'publication_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('publication_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['publication_date'] = $publication_date;

        return $this;
    }

    /**
     * Gets publication_year
     *
     * @return int|null
     */
    public function getPublicationYear()
    {
        return $this->container['publication_year'];
    }

    /**
     * Sets publication_year
     *
     * @param int|null $publication_year The year at which this content was first published.
     *
     * @return self
     */
    public function setPublicationYear($publication_year)
    {
        if (is_null($publication_year)) {
            array_push($this->openAPINullablesSetToNull, 'publication_year');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('publication_year', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['publication_year'] = $publication_year;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title The name of the content standard, for example Common Core.
     *
     * @return self
     */
    public function setTitle($title)
    {
        if (is_null($title)) {
            throw new \InvalidArgumentException('non-nullable title cannot be null');
        }
        if ((mb_strlen($title) > 75)) {
            throw new \InvalidArgumentException('invalid length for $title when calling EdFiAssessmentContentStandard., must be smaller than or equal to 75.');
        }
        if ((mb_strlen($title) < 1)) {
            throw new \InvalidArgumentException('invalid length for $title when calling EdFiAssessmentContentStandard., must be bigger than or equal to 1.');
        }

        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets uri
     *
     * @return string|null
     */
    public function getUri()
    {
        return $this->container['uri'];
    }

    /**
     * Sets uri
     *
     * @param string|null $uri An unambiguous reference to the standards using a network-resolvable URI.
     *
     * @return self
     */
    public function setUri($uri)
    {
        if (is_null($uri)) {
            array_push($this->openAPINullablesSetToNull, 'uri');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('uri', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($uri) && (mb_strlen($uri) > 255)) {
            throw new \InvalidArgumentException('invalid length for $uri when calling EdFiAssessmentContentStandard., must be smaller than or equal to 255.');
        }
        if (!is_null($uri) && (mb_strlen($uri) < 5)) {
            throw new \InvalidArgumentException('invalid length for $uri when calling EdFiAssessmentContentStandard., must be bigger than or equal to 5.');
        }

        $this->container['uri'] = $uri;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string|null
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string|null $version The version identifier for the content.
     *
     * @return self
     */
    public function setVersion($version)
    {
        if (is_null($version)) {
            array_push($this->openAPINullablesSetToNull, 'version');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('version', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($version) && (mb_strlen($version) > 50)) {
            throw new \InvalidArgumentException('invalid length for $version when calling EdFiAssessmentContentStandard., must be smaller than or equal to 50.');
        }
        if (!is_null($version) && (mb_strlen($version) < 1)) {
            throw new \InvalidArgumentException('invalid length for $version when calling EdFiAssessmentContentStandard., must be bigger than or equal to 1.');
        }

        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets mandating_education_organization_reference
     *
     * @return \Resources\Model\EdFiEducationOrganizationReference|null
     */
    public function getMandatingEducationOrganizationReference()
    {
        return $this->container['mandating_education_organization_reference'];
    }

    /**
     * Sets mandating_education_organization_reference
     *
     * @param \Resources\Model\EdFiEducationOrganizationReference|null $mandating_education_organization_reference mandating_education_organization_reference
     *
     * @return self
     */
    public function setMandatingEducationOrganizationReference($mandating_education_organization_reference)
    {
        if (is_null($mandating_education_organization_reference)) {
            throw new \InvalidArgumentException('non-nullable mandating_education_organization_reference cannot be null');
        }
        $this->container['mandating_education_organization_reference'] = $mandating_education_organization_reference;

        return $this;
    }

    /**
     * Gets authors
     *
     * @return \Resources\Model\EdFiAssessmentContentStandardAuthor[]|null
     */
    public function getAuthors()
    {
        return $this->container['authors'];
    }

    /**
     * Sets authors
     *
     * @param \Resources\Model\EdFiAssessmentContentStandardAuthor[]|null $authors An unordered collection of assessmentContentStandardAuthors. The person or organization chiefly responsible for the intellectual content of the standard.
     *
     * @return self
     */
    public function setAuthors($authors)
    {
        if (is_null($authors)) {
            throw new \InvalidArgumentException('non-nullable authors cannot be null');
        }
        $this->container['authors'] = $authors;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


