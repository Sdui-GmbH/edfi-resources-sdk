<?php
/**
 * EdFiStudentEducationOrganizationAssociationAddress
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Resources
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Resources\Model;

use \ArrayAccess;
use \Resources\ObjectSerializer;

/**
 * EdFiStudentEducationOrganizationAssociationAddress Class Doc Comment
 *
 * @category Class
 * @package  Resources
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EdFiStudentEducationOrganizationAssociationAddress implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'edFi_studentEducationOrganizationAssociationAddress';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'address_type_descriptor' => 'string',
        'state_abbreviation_descriptor' => 'string',
        'city' => 'string',
        'postal_code' => 'string',
        'street_number_name' => 'string',
        'locale_descriptor' => 'string',
        'apartment_room_suite_number' => 'string',
        'building_site_number' => 'string',
        'congressional_district' => 'string',
        'county_fips_code' => 'string',
        'do_not_publish_indicator' => 'bool',
        'latitude' => 'string',
        'longitude' => 'string',
        'name_of_county' => 'string',
        'periods' => '\Resources\Model\EdFiStudentEducationOrganizationAssociationAddressPeriod[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'address_type_descriptor' => null,
        'state_abbreviation_descriptor' => null,
        'city' => null,
        'postal_code' => null,
        'street_number_name' => null,
        'locale_descriptor' => null,
        'apartment_room_suite_number' => null,
        'building_site_number' => null,
        'congressional_district' => null,
        'county_fips_code' => null,
        'do_not_publish_indicator' => null,
        'latitude' => null,
        'longitude' => null,
        'name_of_county' => null,
        'periods' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'address_type_descriptor' => false,
        'state_abbreviation_descriptor' => false,
        'city' => false,
        'postal_code' => false,
        'street_number_name' => false,
        'locale_descriptor' => true,
        'apartment_room_suite_number' => true,
        'building_site_number' => true,
        'congressional_district' => true,
        'county_fips_code' => true,
        'do_not_publish_indicator' => true,
        'latitude' => true,
        'longitude' => true,
        'name_of_county' => true,
        'periods' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'address_type_descriptor' => 'addressTypeDescriptor',
        'state_abbreviation_descriptor' => 'stateAbbreviationDescriptor',
        'city' => 'city',
        'postal_code' => 'postalCode',
        'street_number_name' => 'streetNumberName',
        'locale_descriptor' => 'localeDescriptor',
        'apartment_room_suite_number' => 'apartmentRoomSuiteNumber',
        'building_site_number' => 'buildingSiteNumber',
        'congressional_district' => 'congressionalDistrict',
        'county_fips_code' => 'countyFIPSCode',
        'do_not_publish_indicator' => 'doNotPublishIndicator',
        'latitude' => 'latitude',
        'longitude' => 'longitude',
        'name_of_county' => 'nameOfCounty',
        'periods' => 'periods'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'address_type_descriptor' => 'setAddressTypeDescriptor',
        'state_abbreviation_descriptor' => 'setStateAbbreviationDescriptor',
        'city' => 'setCity',
        'postal_code' => 'setPostalCode',
        'street_number_name' => 'setStreetNumberName',
        'locale_descriptor' => 'setLocaleDescriptor',
        'apartment_room_suite_number' => 'setApartmentRoomSuiteNumber',
        'building_site_number' => 'setBuildingSiteNumber',
        'congressional_district' => 'setCongressionalDistrict',
        'county_fips_code' => 'setCountyFipsCode',
        'do_not_publish_indicator' => 'setDoNotPublishIndicator',
        'latitude' => 'setLatitude',
        'longitude' => 'setLongitude',
        'name_of_county' => 'setNameOfCounty',
        'periods' => 'setPeriods'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'address_type_descriptor' => 'getAddressTypeDescriptor',
        'state_abbreviation_descriptor' => 'getStateAbbreviationDescriptor',
        'city' => 'getCity',
        'postal_code' => 'getPostalCode',
        'street_number_name' => 'getStreetNumberName',
        'locale_descriptor' => 'getLocaleDescriptor',
        'apartment_room_suite_number' => 'getApartmentRoomSuiteNumber',
        'building_site_number' => 'getBuildingSiteNumber',
        'congressional_district' => 'getCongressionalDistrict',
        'county_fips_code' => 'getCountyFipsCode',
        'do_not_publish_indicator' => 'getDoNotPublishIndicator',
        'latitude' => 'getLatitude',
        'longitude' => 'getLongitude',
        'name_of_county' => 'getNameOfCounty',
        'periods' => 'getPeriods'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('address_type_descriptor', $data ?? [], null);
        $this->setIfExists('state_abbreviation_descriptor', $data ?? [], null);
        $this->setIfExists('city', $data ?? [], null);
        $this->setIfExists('postal_code', $data ?? [], null);
        $this->setIfExists('street_number_name', $data ?? [], null);
        $this->setIfExists('locale_descriptor', $data ?? [], null);
        $this->setIfExists('apartment_room_suite_number', $data ?? [], null);
        $this->setIfExists('building_site_number', $data ?? [], null);
        $this->setIfExists('congressional_district', $data ?? [], null);
        $this->setIfExists('county_fips_code', $data ?? [], null);
        $this->setIfExists('do_not_publish_indicator', $data ?? [], null);
        $this->setIfExists('latitude', $data ?? [], null);
        $this->setIfExists('longitude', $data ?? [], null);
        $this->setIfExists('name_of_county', $data ?? [], null);
        $this->setIfExists('periods', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['address_type_descriptor'] === null) {
            $invalidProperties[] = "'address_type_descriptor' can't be null";
        }
        if ((mb_strlen($this->container['address_type_descriptor']) > 306)) {
            $invalidProperties[] = "invalid value for 'address_type_descriptor', the character length must be smaller than or equal to 306.";
        }

        if ($this->container['state_abbreviation_descriptor'] === null) {
            $invalidProperties[] = "'state_abbreviation_descriptor' can't be null";
        }
        if ((mb_strlen($this->container['state_abbreviation_descriptor']) > 306)) {
            $invalidProperties[] = "invalid value for 'state_abbreviation_descriptor', the character length must be smaller than or equal to 306.";
        }

        if ($this->container['city'] === null) {
            $invalidProperties[] = "'city' can't be null";
        }
        if ((mb_strlen($this->container['city']) > 30)) {
            $invalidProperties[] = "invalid value for 'city', the character length must be smaller than or equal to 30.";
        }

        if ((mb_strlen($this->container['city']) < 2)) {
            $invalidProperties[] = "invalid value for 'city', the character length must be bigger than or equal to 2.";
        }

        if ($this->container['postal_code'] === null) {
            $invalidProperties[] = "'postal_code' can't be null";
        }
        if ((mb_strlen($this->container['postal_code']) > 17)) {
            $invalidProperties[] = "invalid value for 'postal_code', the character length must be smaller than or equal to 17.";
        }

        if ($this->container['street_number_name'] === null) {
            $invalidProperties[] = "'street_number_name' can't be null";
        }
        if ((mb_strlen($this->container['street_number_name']) > 150)) {
            $invalidProperties[] = "invalid value for 'street_number_name', the character length must be smaller than or equal to 150.";
        }

        if (!is_null($this->container['locale_descriptor']) && (mb_strlen($this->container['locale_descriptor']) > 306)) {
            $invalidProperties[] = "invalid value for 'locale_descriptor', the character length must be smaller than or equal to 306.";
        }

        if (!is_null($this->container['apartment_room_suite_number']) && (mb_strlen($this->container['apartment_room_suite_number']) > 50)) {
            $invalidProperties[] = "invalid value for 'apartment_room_suite_number', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['building_site_number']) && (mb_strlen($this->container['building_site_number']) > 20)) {
            $invalidProperties[] = "invalid value for 'building_site_number', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['congressional_district']) && (mb_strlen($this->container['congressional_district']) > 30)) {
            $invalidProperties[] = "invalid value for 'congressional_district', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['county_fips_code']) && (mb_strlen($this->container['county_fips_code']) > 5)) {
            $invalidProperties[] = "invalid value for 'county_fips_code', the character length must be smaller than or equal to 5.";
        }

        if (!is_null($this->container['county_fips_code']) && (mb_strlen($this->container['county_fips_code']) < 3)) {
            $invalidProperties[] = "invalid value for 'county_fips_code', the character length must be bigger than or equal to 3.";
        }

        if (!is_null($this->container['latitude']) && (mb_strlen($this->container['latitude']) > 20)) {
            $invalidProperties[] = "invalid value for 'latitude', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['longitude']) && (mb_strlen($this->container['longitude']) > 20)) {
            $invalidProperties[] = "invalid value for 'longitude', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['name_of_county']) && (mb_strlen($this->container['name_of_county']) > 30)) {
            $invalidProperties[] = "invalid value for 'name_of_county', the character length must be smaller than or equal to 30.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets address_type_descriptor
     *
     * @return string
     */
    public function getAddressTypeDescriptor()
    {
        return $this->container['address_type_descriptor'];
    }

    /**
     * Sets address_type_descriptor
     *
     * @param string $address_type_descriptor The type of address listed for an individual or organization.    For example:  Physical Address, Mailing Address, Home Address, etc.)
     *
     * @return self
     */
    public function setAddressTypeDescriptor($address_type_descriptor)
    {
        if (is_null($address_type_descriptor)) {
            throw new \InvalidArgumentException('non-nullable address_type_descriptor cannot be null');
        }
        if ((mb_strlen($address_type_descriptor) > 306)) {
            throw new \InvalidArgumentException('invalid length for $address_type_descriptor when calling EdFiStudentEducationOrganizationAssociationAddress., must be smaller than or equal to 306.');
        }

        $this->container['address_type_descriptor'] = $address_type_descriptor;

        return $this;
    }

    /**
     * Gets state_abbreviation_descriptor
     *
     * @return string
     */
    public function getStateAbbreviationDescriptor()
    {
        return $this->container['state_abbreviation_descriptor'];
    }

    /**
     * Sets state_abbreviation_descriptor
     *
     * @param string $state_abbreviation_descriptor The abbreviation for the state (within the United States) or outlying area in which an address is located.
     *
     * @return self
     */
    public function setStateAbbreviationDescriptor($state_abbreviation_descriptor)
    {
        if (is_null($state_abbreviation_descriptor)) {
            throw new \InvalidArgumentException('non-nullable state_abbreviation_descriptor cannot be null');
        }
        if ((mb_strlen($state_abbreviation_descriptor) > 306)) {
            throw new \InvalidArgumentException('invalid length for $state_abbreviation_descriptor when calling EdFiStudentEducationOrganizationAssociationAddress., must be smaller than or equal to 306.');
        }

        $this->container['state_abbreviation_descriptor'] = $state_abbreviation_descriptor;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string $city The name of the city in which an address is located.
     *
     * @return self
     */
    public function setCity($city)
    {
        if (is_null($city)) {
            throw new \InvalidArgumentException('non-nullable city cannot be null');
        }
        if ((mb_strlen($city) > 30)) {
            throw new \InvalidArgumentException('invalid length for $city when calling EdFiStudentEducationOrganizationAssociationAddress., must be smaller than or equal to 30.');
        }
        if ((mb_strlen($city) < 2)) {
            throw new \InvalidArgumentException('invalid length for $city when calling EdFiStudentEducationOrganizationAssociationAddress., must be bigger than or equal to 2.');
        }

        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets postal_code
     *
     * @return string
     */
    public function getPostalCode()
    {
        return $this->container['postal_code'];
    }

    /**
     * Sets postal_code
     *
     * @param string $postal_code The five or nine digit zip code or overseas postal code portion of an address.
     *
     * @return self
     */
    public function setPostalCode($postal_code)
    {
        if (is_null($postal_code)) {
            throw new \InvalidArgumentException('non-nullable postal_code cannot be null');
        }
        if ((mb_strlen($postal_code) > 17)) {
            throw new \InvalidArgumentException('invalid length for $postal_code when calling EdFiStudentEducationOrganizationAssociationAddress., must be smaller than or equal to 17.');
        }

        $this->container['postal_code'] = $postal_code;

        return $this;
    }

    /**
     * Gets street_number_name
     *
     * @return string
     */
    public function getStreetNumberName()
    {
        return $this->container['street_number_name'];
    }

    /**
     * Sets street_number_name
     *
     * @param string $street_number_name The street number and street name or post office box number of an address.
     *
     * @return self
     */
    public function setStreetNumberName($street_number_name)
    {
        if (is_null($street_number_name)) {
            throw new \InvalidArgumentException('non-nullable street_number_name cannot be null');
        }
        if ((mb_strlen($street_number_name) > 150)) {
            throw new \InvalidArgumentException('invalid length for $street_number_name when calling EdFiStudentEducationOrganizationAssociationAddress., must be smaller than or equal to 150.');
        }

        $this->container['street_number_name'] = $street_number_name;

        return $this;
    }

    /**
     * Gets locale_descriptor
     *
     * @return string|null
     */
    public function getLocaleDescriptor()
    {
        return $this->container['locale_descriptor'];
    }

    /**
     * Sets locale_descriptor
     *
     * @param string|null $locale_descriptor A general geographic indicator that categorizes U.S. territory (e.g., City, Suburban).
     *
     * @return self
     */
    public function setLocaleDescriptor($locale_descriptor)
    {
        if (is_null($locale_descriptor)) {
            array_push($this->openAPINullablesSetToNull, 'locale_descriptor');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('locale_descriptor', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($locale_descriptor) && (mb_strlen($locale_descriptor) > 306)) {
            throw new \InvalidArgumentException('invalid length for $locale_descriptor when calling EdFiStudentEducationOrganizationAssociationAddress., must be smaller than or equal to 306.');
        }

        $this->container['locale_descriptor'] = $locale_descriptor;

        return $this;
    }

    /**
     * Gets apartment_room_suite_number
     *
     * @return string|null
     */
    public function getApartmentRoomSuiteNumber()
    {
        return $this->container['apartment_room_suite_number'];
    }

    /**
     * Sets apartment_room_suite_number
     *
     * @param string|null $apartment_room_suite_number The apartment, room, or suite number of an address.
     *
     * @return self
     */
    public function setApartmentRoomSuiteNumber($apartment_room_suite_number)
    {
        if (is_null($apartment_room_suite_number)) {
            array_push($this->openAPINullablesSetToNull, 'apartment_room_suite_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('apartment_room_suite_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($apartment_room_suite_number) && (mb_strlen($apartment_room_suite_number) > 50)) {
            throw new \InvalidArgumentException('invalid length for $apartment_room_suite_number when calling EdFiStudentEducationOrganizationAssociationAddress., must be smaller than or equal to 50.');
        }

        $this->container['apartment_room_suite_number'] = $apartment_room_suite_number;

        return $this;
    }

    /**
     * Gets building_site_number
     *
     * @return string|null
     */
    public function getBuildingSiteNumber()
    {
        return $this->container['building_site_number'];
    }

    /**
     * Sets building_site_number
     *
     * @param string|null $building_site_number The number of the building on the site, if more than one building shares the same address.
     *
     * @return self
     */
    public function setBuildingSiteNumber($building_site_number)
    {
        if (is_null($building_site_number)) {
            array_push($this->openAPINullablesSetToNull, 'building_site_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('building_site_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($building_site_number) && (mb_strlen($building_site_number) > 20)) {
            throw new \InvalidArgumentException('invalid length for $building_site_number when calling EdFiStudentEducationOrganizationAssociationAddress., must be smaller than or equal to 20.');
        }

        $this->container['building_site_number'] = $building_site_number;

        return $this;
    }

    /**
     * Gets congressional_district
     *
     * @return string|null
     */
    public function getCongressionalDistrict()
    {
        return $this->container['congressional_district'];
    }

    /**
     * Sets congressional_district
     *
     * @param string|null $congressional_district The congressional district in which an address is located.
     *
     * @return self
     */
    public function setCongressionalDistrict($congressional_district)
    {
        if (is_null($congressional_district)) {
            array_push($this->openAPINullablesSetToNull, 'congressional_district');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('congressional_district', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($congressional_district) && (mb_strlen($congressional_district) > 30)) {
            throw new \InvalidArgumentException('invalid length for $congressional_district when calling EdFiStudentEducationOrganizationAssociationAddress., must be smaller than or equal to 30.');
        }

        $this->container['congressional_district'] = $congressional_district;

        return $this;
    }

    /**
     * Gets county_fips_code
     *
     * @return string|null
     */
    public function getCountyFipsCode()
    {
        return $this->container['county_fips_code'];
    }

    /**
     * Sets county_fips_code
     *
     * @param string|null $county_fips_code The Federal Information Processing Standards (FIPS) numeric code for the county issued by the National Institute of Standards and Technology (NIST). Counties are considered to be the \"first-order subdivisions\" of each State and statistically equivalent entity, regardless of their local designations (county, parish, borough, etc.) Counties in different States will have the same code. A unique county number is created when combined with the 2-digit FIPS State Code.
     *
     * @return self
     */
    public function setCountyFipsCode($county_fips_code)
    {
        if (is_null($county_fips_code)) {
            array_push($this->openAPINullablesSetToNull, 'county_fips_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('county_fips_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($county_fips_code) && (mb_strlen($county_fips_code) > 5)) {
            throw new \InvalidArgumentException('invalid length for $county_fips_code when calling EdFiStudentEducationOrganizationAssociationAddress., must be smaller than or equal to 5.');
        }
        if (!is_null($county_fips_code) && (mb_strlen($county_fips_code) < 3)) {
            throw new \InvalidArgumentException('invalid length for $county_fips_code when calling EdFiStudentEducationOrganizationAssociationAddress., must be bigger than or equal to 3.');
        }

        $this->container['county_fips_code'] = $county_fips_code;

        return $this;
    }

    /**
     * Gets do_not_publish_indicator
     *
     * @return bool|null
     */
    public function getDoNotPublishIndicator()
    {
        return $this->container['do_not_publish_indicator'];
    }

    /**
     * Sets do_not_publish_indicator
     *
     * @param bool|null $do_not_publish_indicator An indication that the address should not be published.
     *
     * @return self
     */
    public function setDoNotPublishIndicator($do_not_publish_indicator)
    {
        if (is_null($do_not_publish_indicator)) {
            array_push($this->openAPINullablesSetToNull, 'do_not_publish_indicator');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('do_not_publish_indicator', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['do_not_publish_indicator'] = $do_not_publish_indicator;

        return $this;
    }

    /**
     * Gets latitude
     *
     * @return string|null
     */
    public function getLatitude()
    {
        return $this->container['latitude'];
    }

    /**
     * Sets latitude
     *
     * @param string|null $latitude The geographic latitude of the physical address.
     *
     * @return self
     */
    public function setLatitude($latitude)
    {
        if (is_null($latitude)) {
            array_push($this->openAPINullablesSetToNull, 'latitude');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('latitude', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($latitude) && (mb_strlen($latitude) > 20)) {
            throw new \InvalidArgumentException('invalid length for $latitude when calling EdFiStudentEducationOrganizationAssociationAddress., must be smaller than or equal to 20.');
        }

        $this->container['latitude'] = $latitude;

        return $this;
    }

    /**
     * Gets longitude
     *
     * @return string|null
     */
    public function getLongitude()
    {
        return $this->container['longitude'];
    }

    /**
     * Sets longitude
     *
     * @param string|null $longitude The geographic longitude of the physical address.
     *
     * @return self
     */
    public function setLongitude($longitude)
    {
        if (is_null($longitude)) {
            array_push($this->openAPINullablesSetToNull, 'longitude');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('longitude', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($longitude) && (mb_strlen($longitude) > 20)) {
            throw new \InvalidArgumentException('invalid length for $longitude when calling EdFiStudentEducationOrganizationAssociationAddress., must be smaller than or equal to 20.');
        }

        $this->container['longitude'] = $longitude;

        return $this;
    }

    /**
     * Gets name_of_county
     *
     * @return string|null
     */
    public function getNameOfCounty()
    {
        return $this->container['name_of_county'];
    }

    /**
     * Sets name_of_county
     *
     * @param string|null $name_of_county The name of the county, parish, borough, or comparable unit (within a state) in which an address is located.
     *
     * @return self
     */
    public function setNameOfCounty($name_of_county)
    {
        if (is_null($name_of_county)) {
            array_push($this->openAPINullablesSetToNull, 'name_of_county');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('name_of_county', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($name_of_county) && (mb_strlen($name_of_county) > 30)) {
            throw new \InvalidArgumentException('invalid length for $name_of_county when calling EdFiStudentEducationOrganizationAssociationAddress., must be smaller than or equal to 30.');
        }

        $this->container['name_of_county'] = $name_of_county;

        return $this;
    }

    /**
     * Gets periods
     *
     * @return \Resources\Model\EdFiStudentEducationOrganizationAssociationAddressPeriod[]|null
     */
    public function getPeriods()
    {
        return $this->container['periods'];
    }

    /**
     * Sets periods
     *
     * @param \Resources\Model\EdFiStudentEducationOrganizationAssociationAddressPeriod[]|null $periods An unordered collection of studentEducationOrganizationAssociationAddressPeriods. The time periods for which the address is valid. For physical addresses, the periods in which the person lived at that address.
     *
     * @return self
     */
    public function setPeriods($periods)
    {
        if (is_null($periods)) {
            throw new \InvalidArgumentException('non-nullable periods cannot be null');
        }
        $this->container['periods'] = $periods;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


