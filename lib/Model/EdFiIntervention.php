<?php
/**
 * EdFiIntervention
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Resources
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Resources\Model;

use \ArrayAccess;
use \Resources\ObjectSerializer;

/**
 * EdFiIntervention Class Doc Comment
 *
 * @category Class
 * @package  Resources
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EdFiIntervention implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'edFi_intervention';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'intervention_identification_code' => 'string',
        'education_organization_reference' => '\Resources\Model\EdFiEducationOrganizationReference',
        'appropriate_grade_levels' => '\Resources\Model\EdFiInterventionAppropriateGradeLevel[]',
        'appropriate_sexes' => '\Resources\Model\EdFiInterventionAppropriateSex[]',
        'begin_date' => '\DateTime',
        'delivery_method_descriptor' => 'string',
        'diagnoses' => '\Resources\Model\EdFiInterventionDiagnosis[]',
        'education_contents' => '\Resources\Model\EdFiInterventionEducationContent[]',
        'end_date' => '\DateTime',
        'intervention_class_descriptor' => 'string',
        'intervention_prescriptions' => '\Resources\Model\EdFiInterventionInterventionPrescription[]',
        'learning_resource_metadata_uris' => '\Resources\Model\EdFiInterventionLearningResourceMetadataURI[]',
        'max_dosage' => 'int',
        'meeting_times' => '\Resources\Model\EdFiInterventionMeetingTime[]',
        'min_dosage' => 'int',
        'namespace' => 'string',
        'population_serveds' => '\Resources\Model\EdFiInterventionPopulationServed[]',
        'staffs' => '\Resources\Model\EdFiInterventionStaff[]',
        'uris' => '\Resources\Model\EdFiInterventionURI[]',
        '_etag' => 'string',
        '_last_modified_date' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'intervention_identification_code' => null,
        'education_organization_reference' => null,
        'appropriate_grade_levels' => null,
        'appropriate_sexes' => null,
        'begin_date' => 'date',
        'delivery_method_descriptor' => null,
        'diagnoses' => null,
        'education_contents' => null,
        'end_date' => 'date',
        'intervention_class_descriptor' => null,
        'intervention_prescriptions' => null,
        'learning_resource_metadata_uris' => null,
        'max_dosage' => 'int32',
        'meeting_times' => null,
        'min_dosage' => 'int32',
        'namespace' => null,
        'population_serveds' => null,
        'staffs' => null,
        'uris' => null,
        '_etag' => null,
        '_last_modified_date' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'intervention_identification_code' => false,
        'education_organization_reference' => false,
        'appropriate_grade_levels' => false,
        'appropriate_sexes' => false,
        'begin_date' => false,
        'delivery_method_descriptor' => false,
        'diagnoses' => false,
        'education_contents' => false,
        'end_date' => true,
        'intervention_class_descriptor' => false,
        'intervention_prescriptions' => false,
        'learning_resource_metadata_uris' => false,
        'max_dosage' => true,
        'meeting_times' => false,
        'min_dosage' => true,
        'namespace' => true,
        'population_serveds' => false,
        'staffs' => false,
        'uris' => false,
        '_etag' => false,
        '_last_modified_date' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'intervention_identification_code' => 'interventionIdentificationCode',
        'education_organization_reference' => 'educationOrganizationReference',
        'appropriate_grade_levels' => 'appropriateGradeLevels',
        'appropriate_sexes' => 'appropriateSexes',
        'begin_date' => 'beginDate',
        'delivery_method_descriptor' => 'deliveryMethodDescriptor',
        'diagnoses' => 'diagnoses',
        'education_contents' => 'educationContents',
        'end_date' => 'endDate',
        'intervention_class_descriptor' => 'interventionClassDescriptor',
        'intervention_prescriptions' => 'interventionPrescriptions',
        'learning_resource_metadata_uris' => 'learningResourceMetadataURIs',
        'max_dosage' => 'maxDosage',
        'meeting_times' => 'meetingTimes',
        'min_dosage' => 'minDosage',
        'namespace' => 'namespace',
        'population_serveds' => 'populationServeds',
        'staffs' => 'staffs',
        'uris' => 'uris',
        '_etag' => '_etag',
        '_last_modified_date' => '_lastModifiedDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'intervention_identification_code' => 'setInterventionIdentificationCode',
        'education_organization_reference' => 'setEducationOrganizationReference',
        'appropriate_grade_levels' => 'setAppropriateGradeLevels',
        'appropriate_sexes' => 'setAppropriateSexes',
        'begin_date' => 'setBeginDate',
        'delivery_method_descriptor' => 'setDeliveryMethodDescriptor',
        'diagnoses' => 'setDiagnoses',
        'education_contents' => 'setEducationContents',
        'end_date' => 'setEndDate',
        'intervention_class_descriptor' => 'setInterventionClassDescriptor',
        'intervention_prescriptions' => 'setInterventionPrescriptions',
        'learning_resource_metadata_uris' => 'setLearningResourceMetadataUris',
        'max_dosage' => 'setMaxDosage',
        'meeting_times' => 'setMeetingTimes',
        'min_dosage' => 'setMinDosage',
        'namespace' => 'setNamespace',
        'population_serveds' => 'setPopulationServeds',
        'staffs' => 'setStaffs',
        'uris' => 'setUris',
        '_etag' => 'setEtag',
        '_last_modified_date' => 'setLastModifiedDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'intervention_identification_code' => 'getInterventionIdentificationCode',
        'education_organization_reference' => 'getEducationOrganizationReference',
        'appropriate_grade_levels' => 'getAppropriateGradeLevels',
        'appropriate_sexes' => 'getAppropriateSexes',
        'begin_date' => 'getBeginDate',
        'delivery_method_descriptor' => 'getDeliveryMethodDescriptor',
        'diagnoses' => 'getDiagnoses',
        'education_contents' => 'getEducationContents',
        'end_date' => 'getEndDate',
        'intervention_class_descriptor' => 'getInterventionClassDescriptor',
        'intervention_prescriptions' => 'getInterventionPrescriptions',
        'learning_resource_metadata_uris' => 'getLearningResourceMetadataUris',
        'max_dosage' => 'getMaxDosage',
        'meeting_times' => 'getMeetingTimes',
        'min_dosage' => 'getMinDosage',
        'namespace' => 'getNamespace',
        'population_serveds' => 'getPopulationServeds',
        'staffs' => 'getStaffs',
        'uris' => 'getUris',
        '_etag' => 'getEtag',
        '_last_modified_date' => 'getLastModifiedDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('intervention_identification_code', $data ?? [], null);
        $this->setIfExists('education_organization_reference', $data ?? [], null);
        $this->setIfExists('appropriate_grade_levels', $data ?? [], null);
        $this->setIfExists('appropriate_sexes', $data ?? [], null);
        $this->setIfExists('begin_date', $data ?? [], null);
        $this->setIfExists('delivery_method_descriptor', $data ?? [], null);
        $this->setIfExists('diagnoses', $data ?? [], null);
        $this->setIfExists('education_contents', $data ?? [], null);
        $this->setIfExists('end_date', $data ?? [], null);
        $this->setIfExists('intervention_class_descriptor', $data ?? [], null);
        $this->setIfExists('intervention_prescriptions', $data ?? [], null);
        $this->setIfExists('learning_resource_metadata_uris', $data ?? [], null);
        $this->setIfExists('max_dosage', $data ?? [], null);
        $this->setIfExists('meeting_times', $data ?? [], null);
        $this->setIfExists('min_dosage', $data ?? [], null);
        $this->setIfExists('namespace', $data ?? [], null);
        $this->setIfExists('population_serveds', $data ?? [], null);
        $this->setIfExists('staffs', $data ?? [], null);
        $this->setIfExists('uris', $data ?? [], null);
        $this->setIfExists('_etag', $data ?? [], null);
        $this->setIfExists('_last_modified_date', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['intervention_identification_code'] === null) {
            $invalidProperties[] = "'intervention_identification_code' can't be null";
        }
        if ((mb_strlen($this->container['intervention_identification_code']) > 60)) {
            $invalidProperties[] = "invalid value for 'intervention_identification_code', the character length must be smaller than or equal to 60.";
        }

        if ($this->container['education_organization_reference'] === null) {
            $invalidProperties[] = "'education_organization_reference' can't be null";
        }
        if ($this->container['begin_date'] === null) {
            $invalidProperties[] = "'begin_date' can't be null";
        }
        if ($this->container['delivery_method_descriptor'] === null) {
            $invalidProperties[] = "'delivery_method_descriptor' can't be null";
        }
        if ((mb_strlen($this->container['delivery_method_descriptor']) > 306)) {
            $invalidProperties[] = "invalid value for 'delivery_method_descriptor', the character length must be smaller than or equal to 306.";
        }

        if ($this->container['intervention_class_descriptor'] === null) {
            $invalidProperties[] = "'intervention_class_descriptor' can't be null";
        }
        if ((mb_strlen($this->container['intervention_class_descriptor']) > 306)) {
            $invalidProperties[] = "invalid value for 'intervention_class_descriptor', the character length must be smaller than or equal to 306.";
        }

        if (!is_null($this->container['namespace']) && (mb_strlen($this->container['namespace']) > 255)) {
            $invalidProperties[] = "invalid value for 'namespace', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['namespace']) && (mb_strlen($this->container['namespace']) < 5)) {
            $invalidProperties[] = "invalid value for 'namespace', the character length must be bigger than or equal to 5.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id 
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets intervention_identification_code
     *
     * @return string
     */
    public function getInterventionIdentificationCode()
    {
        return $this->container['intervention_identification_code'];
    }

    /**
     * Sets intervention_identification_code
     *
     * @param string $intervention_identification_code A unique number or alphanumeric code assigned to an intervention.
     *
     * @return self
     */
    public function setInterventionIdentificationCode($intervention_identification_code)
    {
        if (is_null($intervention_identification_code)) {
            throw new \InvalidArgumentException('non-nullable intervention_identification_code cannot be null');
        }
        if ((mb_strlen($intervention_identification_code) > 60)) {
            throw new \InvalidArgumentException('invalid length for $intervention_identification_code when calling EdFiIntervention., must be smaller than or equal to 60.');
        }

        $this->container['intervention_identification_code'] = $intervention_identification_code;

        return $this;
    }

    /**
     * Gets education_organization_reference
     *
     * @return \Resources\Model\EdFiEducationOrganizationReference
     */
    public function getEducationOrganizationReference()
    {
        return $this->container['education_organization_reference'];
    }

    /**
     * Sets education_organization_reference
     *
     * @param \Resources\Model\EdFiEducationOrganizationReference $education_organization_reference education_organization_reference
     *
     * @return self
     */
    public function setEducationOrganizationReference($education_organization_reference)
    {
        if (is_null($education_organization_reference)) {
            throw new \InvalidArgumentException('non-nullable education_organization_reference cannot be null');
        }
        $this->container['education_organization_reference'] = $education_organization_reference;

        return $this;
    }

    /**
     * Gets appropriate_grade_levels
     *
     * @return \Resources\Model\EdFiInterventionAppropriateGradeLevel[]|null
     */
    public function getAppropriateGradeLevels()
    {
        return $this->container['appropriate_grade_levels'];
    }

    /**
     * Sets appropriate_grade_levels
     *
     * @param \Resources\Model\EdFiInterventionAppropriateGradeLevel[]|null $appropriate_grade_levels An unordered collection of interventionAppropriateGradeLevels. Grade levels for the intervention. If omitted, considered generally applicable.
     *
     * @return self
     */
    public function setAppropriateGradeLevels($appropriate_grade_levels)
    {
        if (is_null($appropriate_grade_levels)) {
            throw new \InvalidArgumentException('non-nullable appropriate_grade_levels cannot be null');
        }
        $this->container['appropriate_grade_levels'] = $appropriate_grade_levels;

        return $this;
    }

    /**
     * Gets appropriate_sexes
     *
     * @return \Resources\Model\EdFiInterventionAppropriateSex[]|null
     */
    public function getAppropriateSexes()
    {
        return $this->container['appropriate_sexes'];
    }

    /**
     * Sets appropriate_sexes
     *
     * @param \Resources\Model\EdFiInterventionAppropriateSex[]|null $appropriate_sexes An unordered collection of interventionAppropriateSexes. Sexes for the intervention. If omitted, considered generally applicable.
     *
     * @return self
     */
    public function setAppropriateSexes($appropriate_sexes)
    {
        if (is_null($appropriate_sexes)) {
            throw new \InvalidArgumentException('non-nullable appropriate_sexes cannot be null');
        }
        $this->container['appropriate_sexes'] = $appropriate_sexes;

        return $this;
    }

    /**
     * Gets begin_date
     *
     * @return \DateTime
     */
    public function getBeginDate()
    {
        return $this->container['begin_date'];
    }

    /**
     * Sets begin_date
     *
     * @param \DateTime $begin_date The start date for the intervention implementation.
     *
     * @return self
     */
    public function setBeginDate($begin_date)
    {
        if (is_null($begin_date)) {
            throw new \InvalidArgumentException('non-nullable begin_date cannot be null');
        }
        $this->container['begin_date'] = $begin_date;

        return $this;
    }

    /**
     * Gets delivery_method_descriptor
     *
     * @return string
     */
    public function getDeliveryMethodDescriptor()
    {
        return $this->container['delivery_method_descriptor'];
    }

    /**
     * Sets delivery_method_descriptor
     *
     * @param string $delivery_method_descriptor The way in which an intervention was implemented.
     *
     * @return self
     */
    public function setDeliveryMethodDescriptor($delivery_method_descriptor)
    {
        if (is_null($delivery_method_descriptor)) {
            throw new \InvalidArgumentException('non-nullable delivery_method_descriptor cannot be null');
        }
        if ((mb_strlen($delivery_method_descriptor) > 306)) {
            throw new \InvalidArgumentException('invalid length for $delivery_method_descriptor when calling EdFiIntervention., must be smaller than or equal to 306.');
        }

        $this->container['delivery_method_descriptor'] = $delivery_method_descriptor;

        return $this;
    }

    /**
     * Gets diagnoses
     *
     * @return \Resources\Model\EdFiInterventionDiagnosis[]|null
     */
    public function getDiagnoses()
    {
        return $this->container['diagnoses'];
    }

    /**
     * Sets diagnoses
     *
     * @param \Resources\Model\EdFiInterventionDiagnosis[]|null $diagnoses An unordered collection of interventionDiagnoses. Targeted purpose of the intervention.
     *
     * @return self
     */
    public function setDiagnoses($diagnoses)
    {
        if (is_null($diagnoses)) {
            throw new \InvalidArgumentException('non-nullable diagnoses cannot be null');
        }
        $this->container['diagnoses'] = $diagnoses;

        return $this;
    }

    /**
     * Gets education_contents
     *
     * @return \Resources\Model\EdFiInterventionEducationContent[]|null
     */
    public function getEducationContents()
    {
        return $this->container['education_contents'];
    }

    /**
     * Sets education_contents
     *
     * @param \Resources\Model\EdFiInterventionEducationContent[]|null $education_contents An unordered collection of interventionEducationContents. Relates the education content source to the education content.
     *
     * @return self
     */
    public function setEducationContents($education_contents)
    {
        if (is_null($education_contents)) {
            throw new \InvalidArgumentException('non-nullable education_contents cannot be null');
        }
        $this->container['education_contents'] = $education_contents;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return \DateTime|null
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param \DateTime|null $end_date The end date for the intervention implementation.
     *
     * @return self
     */
    public function setEndDate($end_date)
    {
        if (is_null($end_date)) {
            array_push($this->openAPINullablesSetToNull, 'end_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('end_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets intervention_class_descriptor
     *
     * @return string
     */
    public function getInterventionClassDescriptor()
    {
        return $this->container['intervention_class_descriptor'];
    }

    /**
     * Sets intervention_class_descriptor
     *
     * @param string $intervention_class_descriptor The way in which an intervention is used: curriculum, supplement, or practice.
     *
     * @return self
     */
    public function setInterventionClassDescriptor($intervention_class_descriptor)
    {
        if (is_null($intervention_class_descriptor)) {
            throw new \InvalidArgumentException('non-nullable intervention_class_descriptor cannot be null');
        }
        if ((mb_strlen($intervention_class_descriptor) > 306)) {
            throw new \InvalidArgumentException('invalid length for $intervention_class_descriptor when calling EdFiIntervention., must be smaller than or equal to 306.');
        }

        $this->container['intervention_class_descriptor'] = $intervention_class_descriptor;

        return $this;
    }

    /**
     * Gets intervention_prescriptions
     *
     * @return \Resources\Model\EdFiInterventionInterventionPrescription[]|null
     */
    public function getInterventionPrescriptions()
    {
        return $this->container['intervention_prescriptions'];
    }

    /**
     * Sets intervention_prescriptions
     *
     * @param \Resources\Model\EdFiInterventionInterventionPrescription[]|null $intervention_prescriptions An unordered collection of interventionInterventionPrescriptions. The reference to the intervention prescription being followed in this intervention implementation.
     *
     * @return self
     */
    public function setInterventionPrescriptions($intervention_prescriptions)
    {
        if (is_null($intervention_prescriptions)) {
            throw new \InvalidArgumentException('non-nullable intervention_prescriptions cannot be null');
        }
        $this->container['intervention_prescriptions'] = $intervention_prescriptions;

        return $this;
    }

    /**
     * Gets learning_resource_metadata_uris
     *
     * @return \Resources\Model\EdFiInterventionLearningResourceMetadataURI[]|null
     */
    public function getLearningResourceMetadataUris()
    {
        return $this->container['learning_resource_metadata_uris'];
    }

    /**
     * Sets learning_resource_metadata_uris
     *
     * @param \Resources\Model\EdFiInterventionLearningResourceMetadataURI[]|null $learning_resource_metadata_uris An unordered collection of interventionLearningResourceMetadataURIs. The URI (typical a URL) pointing to the metadata entry in a LRMI metadata repository, which describes this content item.
     *
     * @return self
     */
    public function setLearningResourceMetadataUris($learning_resource_metadata_uris)
    {
        if (is_null($learning_resource_metadata_uris)) {
            throw new \InvalidArgumentException('non-nullable learning_resource_metadata_uris cannot be null');
        }
        $this->container['learning_resource_metadata_uris'] = $learning_resource_metadata_uris;

        return $this;
    }

    /**
     * Gets max_dosage
     *
     * @return int|null
     */
    public function getMaxDosage()
    {
        return $this->container['max_dosage'];
    }

    /**
     * Sets max_dosage
     *
     * @param int|null $max_dosage The maximum duration of time in minutes that may be assigned for the intervention.
     *
     * @return self
     */
    public function setMaxDosage($max_dosage)
    {
        if (is_null($max_dosage)) {
            array_push($this->openAPINullablesSetToNull, 'max_dosage');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_dosage', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_dosage'] = $max_dosage;

        return $this;
    }

    /**
     * Gets meeting_times
     *
     * @return \Resources\Model\EdFiInterventionMeetingTime[]|null
     */
    public function getMeetingTimes()
    {
        return $this->container['meeting_times'];
    }

    /**
     * Sets meeting_times
     *
     * @param \Resources\Model\EdFiInterventionMeetingTime[]|null $meeting_times An unordered collection of interventionMeetingTimes. The times at which this intervention is scheduled to meet.
     *
     * @return self
     */
    public function setMeetingTimes($meeting_times)
    {
        if (is_null($meeting_times)) {
            throw new \InvalidArgumentException('non-nullable meeting_times cannot be null');
        }
        $this->container['meeting_times'] = $meeting_times;

        return $this;
    }

    /**
     * Gets min_dosage
     *
     * @return int|null
     */
    public function getMinDosage()
    {
        return $this->container['min_dosage'];
    }

    /**
     * Sets min_dosage
     *
     * @param int|null $min_dosage The minimum duration of time in minutes that may be assigned for the intervention.
     *
     * @return self
     */
    public function setMinDosage($min_dosage)
    {
        if (is_null($min_dosage)) {
            array_push($this->openAPINullablesSetToNull, 'min_dosage');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('min_dosage', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['min_dosage'] = $min_dosage;

        return $this;
    }

    /**
     * Gets namespace
     *
     * @return string|null
     */
    public function getNamespace()
    {
        return $this->container['namespace'];
    }

    /**
     * Sets namespace
     *
     * @param string|null $namespace Namespace for the intervention.
     *
     * @return self
     */
    public function setNamespace($namespace)
    {
        if (is_null($namespace)) {
            array_push($this->openAPINullablesSetToNull, 'namespace');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('namespace', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($namespace) && (mb_strlen($namespace) > 255)) {
            throw new \InvalidArgumentException('invalid length for $namespace when calling EdFiIntervention., must be smaller than or equal to 255.');
        }
        if (!is_null($namespace) && (mb_strlen($namespace) < 5)) {
            throw new \InvalidArgumentException('invalid length for $namespace when calling EdFiIntervention., must be bigger than or equal to 5.');
        }

        $this->container['namespace'] = $namespace;

        return $this;
    }

    /**
     * Gets population_serveds
     *
     * @return \Resources\Model\EdFiInterventionPopulationServed[]|null
     */
    public function getPopulationServeds()
    {
        return $this->container['population_serveds'];
    }

    /**
     * Sets population_serveds
     *
     * @param \Resources\Model\EdFiInterventionPopulationServed[]|null $population_serveds An unordered collection of interventionPopulationServeds. A subset of students that are the focus of the intervention.
     *
     * @return self
     */
    public function setPopulationServeds($population_serveds)
    {
        if (is_null($population_serveds)) {
            throw new \InvalidArgumentException('non-nullable population_serveds cannot be null');
        }
        $this->container['population_serveds'] = $population_serveds;

        return $this;
    }

    /**
     * Gets staffs
     *
     * @return \Resources\Model\EdFiInterventionStaff[]|null
     */
    public function getStaffs()
    {
        return $this->container['staffs'];
    }

    /**
     * Sets staffs
     *
     * @param \Resources\Model\EdFiInterventionStaff[]|null $staffs An unordered collection of interventionStaffs. Relates the staff member associated with the Intervention.
     *
     * @return self
     */
    public function setStaffs($staffs)
    {
        if (is_null($staffs)) {
            throw new \InvalidArgumentException('non-nullable staffs cannot be null');
        }
        $this->container['staffs'] = $staffs;

        return $this;
    }

    /**
     * Gets uris
     *
     * @return \Resources\Model\EdFiInterventionURI[]|null
     */
    public function getUris()
    {
        return $this->container['uris'];
    }

    /**
     * Sets uris
     *
     * @param \Resources\Model\EdFiInterventionURI[]|null $uris An unordered collection of interventionURIs. The URI (typical a URL) pointing to an education content item.
     *
     * @return self
     */
    public function setUris($uris)
    {
        if (is_null($uris)) {
            throw new \InvalidArgumentException('non-nullable uris cannot be null');
        }
        $this->container['uris'] = $uris;

        return $this;
    }

    /**
     * Gets _etag
     *
     * @return string|null
     */
    public function getEtag()
    {
        return $this->container['_etag'];
    }

    /**
     * Sets _etag
     *
     * @param string|null $_etag A unique system-generated value that identifies the version of the resource.
     *
     * @return self
     */
    public function setEtag($_etag)
    {
        if (is_null($_etag)) {
            throw new \InvalidArgumentException('non-nullable _etag cannot be null');
        }
        $this->container['_etag'] = $_etag;

        return $this;
    }

    /**
     * Gets _last_modified_date
     *
     * @return \DateTime|null
     */
    public function getLastModifiedDate()
    {
        return $this->container['_last_modified_date'];
    }

    /**
     * Sets _last_modified_date
     *
     * @param \DateTime|null $_last_modified_date The date and time the resource was last modified.
     *
     * @return self
     */
    public function setLastModifiedDate($_last_modified_date)
    {
        if (is_null($_last_modified_date)) {
            throw new \InvalidArgumentException('non-nullable _last_modified_date cannot be null');
        }
        $this->container['_last_modified_date'] = $_last_modified_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


