<?php
/**
 * EdFiStudentEducationOrganizationAssociationDisplacedStudent
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Resources
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Resources\Model;

use \ArrayAccess;
use \Resources\ObjectSerializer;

/**
 * EdFiStudentEducationOrganizationAssociationDisplacedStudent Class Doc Comment
 *
 * @category Class
 * @package  Resources
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EdFiStudentEducationOrganizationAssociationDisplacedStudent implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'edFi_studentEducationOrganizationAssociationDisplacedStudent';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'displaced_student_status_descriptor' => 'string',
        'crisis_homelessness_indicator' => 'bool',
        'displaced_student_end_date' => '\DateTime',
        'displaced_student_start_date' => '\DateTime',
        'crisis_event_reference' => '\Resources\Model\EdFiCrisisEventReference'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'displaced_student_status_descriptor' => null,
        'crisis_homelessness_indicator' => null,
        'displaced_student_end_date' => 'date',
        'displaced_student_start_date' => 'date',
        'crisis_event_reference' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'displaced_student_status_descriptor' => false,
        'crisis_homelessness_indicator' => true,
        'displaced_student_end_date' => true,
        'displaced_student_start_date' => true,
        'crisis_event_reference' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'displaced_student_status_descriptor' => 'displacedStudentStatusDescriptor',
        'crisis_homelessness_indicator' => 'crisisHomelessnessIndicator',
        'displaced_student_end_date' => 'displacedStudentEndDate',
        'displaced_student_start_date' => 'displacedStudentStartDate',
        'crisis_event_reference' => 'crisisEventReference'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'displaced_student_status_descriptor' => 'setDisplacedStudentStatusDescriptor',
        'crisis_homelessness_indicator' => 'setCrisisHomelessnessIndicator',
        'displaced_student_end_date' => 'setDisplacedStudentEndDate',
        'displaced_student_start_date' => 'setDisplacedStudentStartDate',
        'crisis_event_reference' => 'setCrisisEventReference'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'displaced_student_status_descriptor' => 'getDisplacedStudentStatusDescriptor',
        'crisis_homelessness_indicator' => 'getCrisisHomelessnessIndicator',
        'displaced_student_end_date' => 'getDisplacedStudentEndDate',
        'displaced_student_start_date' => 'getDisplacedStudentStartDate',
        'crisis_event_reference' => 'getCrisisEventReference'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('displaced_student_status_descriptor', $data ?? [], null);
        $this->setIfExists('crisis_homelessness_indicator', $data ?? [], null);
        $this->setIfExists('displaced_student_end_date', $data ?? [], null);
        $this->setIfExists('displaced_student_start_date', $data ?? [], null);
        $this->setIfExists('crisis_event_reference', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['displaced_student_status_descriptor'] === null) {
            $invalidProperties[] = "'displaced_student_status_descriptor' can't be null";
        }
        if ((mb_strlen($this->container['displaced_student_status_descriptor']) > 306)) {
            $invalidProperties[] = "invalid value for 'displaced_student_status_descriptor', the character length must be smaller than or equal to 306.";
        }

        if ($this->container['crisis_event_reference'] === null) {
            $invalidProperties[] = "'crisis_event_reference' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets displaced_student_status_descriptor
     *
     * @return string
     */
    public function getDisplacedStudentStatusDescriptor()
    {
        return $this->container['displaced_student_status_descriptor'];
    }

    /**
     * Sets displaced_student_status_descriptor
     *
     * @param string $displaced_student_status_descriptor Indicates whether a student has been displaced as a result of a crisis event.
     *
     * @return self
     */
    public function setDisplacedStudentStatusDescriptor($displaced_student_status_descriptor)
    {
        if (is_null($displaced_student_status_descriptor)) {
            throw new \InvalidArgumentException('non-nullable displaced_student_status_descriptor cannot be null');
        }
        if ((mb_strlen($displaced_student_status_descriptor) > 306)) {
            throw new \InvalidArgumentException('invalid length for $displaced_student_status_descriptor when calling EdFiStudentEducationOrganizationAssociationDisplacedStudent., must be smaller than or equal to 306.');
        }

        $this->container['displaced_student_status_descriptor'] = $displaced_student_status_descriptor;

        return $this;
    }

    /**
     * Gets crisis_homelessness_indicator
     *
     * @return bool|null
     */
    public function getCrisisHomelessnessIndicator()
    {
        return $this->container['crisis_homelessness_indicator'];
    }

    /**
     * Sets crisis_homelessness_indicator
     *
     * @param bool|null $crisis_homelessness_indicator Any student considered homeless (defined by the McKinney-Vento Homeless Education Assistance Act as lacking a fixed, regular, and adequate nighttime residence) as a result of the crisis event.
     *
     * @return self
     */
    public function setCrisisHomelessnessIndicator($crisis_homelessness_indicator)
    {
        if (is_null($crisis_homelessness_indicator)) {
            array_push($this->openAPINullablesSetToNull, 'crisis_homelessness_indicator');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('crisis_homelessness_indicator', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['crisis_homelessness_indicator'] = $crisis_homelessness_indicator;

        return $this;
    }

    /**
     * Gets displaced_student_end_date
     *
     * @return \DateTime|null
     */
    public function getDisplacedStudentEndDate()
    {
        return $this->container['displaced_student_end_date'];
    }

    /**
     * Sets displaced_student_end_date
     *
     * @param \DateTime|null $displaced_student_end_date The date marking the end of the period during which a student is considered displaced due to a crisis event.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.
     *
     * @return self
     */
    public function setDisplacedStudentEndDate($displaced_student_end_date)
    {
        if (is_null($displaced_student_end_date)) {
            array_push($this->openAPINullablesSetToNull, 'displaced_student_end_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('displaced_student_end_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['displaced_student_end_date'] = $displaced_student_end_date;

        return $this;
    }

    /**
     * Gets displaced_student_start_date
     *
     * @return \DateTime|null
     */
    public function getDisplacedStudentStartDate()
    {
        return $this->container['displaced_student_start_date'];
    }

    /**
     * Sets displaced_student_start_date
     *
     * @param \DateTime|null $displaced_student_start_date The date on which a student is officially identified as displaced due to a crisis event.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.
     *
     * @return self
     */
    public function setDisplacedStudentStartDate($displaced_student_start_date)
    {
        if (is_null($displaced_student_start_date)) {
            array_push($this->openAPINullablesSetToNull, 'displaced_student_start_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('displaced_student_start_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['displaced_student_start_date'] = $displaced_student_start_date;

        return $this;
    }

    /**
     * Gets crisis_event_reference
     *
     * @return \Resources\Model\EdFiCrisisEventReference
     */
    public function getCrisisEventReference()
    {
        return $this->container['crisis_event_reference'];
    }

    /**
     * Sets crisis_event_reference
     *
     * @param \Resources\Model\EdFiCrisisEventReference $crisis_event_reference crisis_event_reference
     *
     * @return self
     */
    public function setCrisisEventReference($crisis_event_reference)
    {
        if (is_null($crisis_event_reference)) {
            throw new \InvalidArgumentException('non-nullable crisis_event_reference cannot be null');
        }
        $this->container['crisis_event_reference'] = $crisis_event_reference;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


