<?php
/**
 * EdFiCredential
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Resources
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Resources\Model;

use \ArrayAccess;
use \Resources\ObjectSerializer;

/**
 * EdFiCredential Class Doc Comment
 *
 * @category Class
 * @package  Resources
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EdFiCredential implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'edFi_credential';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'credential_identifier' => 'string',
        'state_of_issue_state_abbreviation_descriptor' => 'string',
        'academic_subjects' => '\Resources\Model\EdFiCredentialAcademicSubject[]',
        'credential_field_descriptor' => 'string',
        'credential_type_descriptor' => 'string',
        'effective_date' => '\DateTime',
        'endorsements' => '\Resources\Model\EdFiCredentialEndorsement[]',
        'expiration_date' => '\DateTime',
        'grade_levels' => '\Resources\Model\EdFiCredentialGradeLevel[]',
        'issuance_date' => '\DateTime',
        'namespace' => 'string',
        'teaching_credential_basis_descriptor' => 'string',
        'teaching_credential_descriptor' => 'string',
        '_etag' => 'string',
        '_last_modified_date' => '\DateTime',
        '_ext' => '\Resources\Model\CredentialExtensions'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'credential_identifier' => null,
        'state_of_issue_state_abbreviation_descriptor' => null,
        'academic_subjects' => null,
        'credential_field_descriptor' => null,
        'credential_type_descriptor' => null,
        'effective_date' => 'date',
        'endorsements' => null,
        'expiration_date' => 'date',
        'grade_levels' => null,
        'issuance_date' => 'date',
        'namespace' => null,
        'teaching_credential_basis_descriptor' => null,
        'teaching_credential_descriptor' => null,
        '_etag' => null,
        '_last_modified_date' => 'date-time',
        '_ext' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'credential_identifier' => false,
        'state_of_issue_state_abbreviation_descriptor' => false,
        'academic_subjects' => false,
        'credential_field_descriptor' => true,
        'credential_type_descriptor' => false,
        'effective_date' => true,
        'endorsements' => false,
        'expiration_date' => true,
        'grade_levels' => false,
        'issuance_date' => false,
        'namespace' => false,
        'teaching_credential_basis_descriptor' => true,
        'teaching_credential_descriptor' => true,
        '_etag' => false,
        '_last_modified_date' => false,
        '_ext' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'credential_identifier' => 'credentialIdentifier',
        'state_of_issue_state_abbreviation_descriptor' => 'stateOfIssueStateAbbreviationDescriptor',
        'academic_subjects' => 'academicSubjects',
        'credential_field_descriptor' => 'credentialFieldDescriptor',
        'credential_type_descriptor' => 'credentialTypeDescriptor',
        'effective_date' => 'effectiveDate',
        'endorsements' => 'endorsements',
        'expiration_date' => 'expirationDate',
        'grade_levels' => 'gradeLevels',
        'issuance_date' => 'issuanceDate',
        'namespace' => 'namespace',
        'teaching_credential_basis_descriptor' => 'teachingCredentialBasisDescriptor',
        'teaching_credential_descriptor' => 'teachingCredentialDescriptor',
        '_etag' => '_etag',
        '_last_modified_date' => '_lastModifiedDate',
        '_ext' => '_ext'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'credential_identifier' => 'setCredentialIdentifier',
        'state_of_issue_state_abbreviation_descriptor' => 'setStateOfIssueStateAbbreviationDescriptor',
        'academic_subjects' => 'setAcademicSubjects',
        'credential_field_descriptor' => 'setCredentialFieldDescriptor',
        'credential_type_descriptor' => 'setCredentialTypeDescriptor',
        'effective_date' => 'setEffectiveDate',
        'endorsements' => 'setEndorsements',
        'expiration_date' => 'setExpirationDate',
        'grade_levels' => 'setGradeLevels',
        'issuance_date' => 'setIssuanceDate',
        'namespace' => 'setNamespace',
        'teaching_credential_basis_descriptor' => 'setTeachingCredentialBasisDescriptor',
        'teaching_credential_descriptor' => 'setTeachingCredentialDescriptor',
        '_etag' => 'setEtag',
        '_last_modified_date' => 'setLastModifiedDate',
        '_ext' => 'setExt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'credential_identifier' => 'getCredentialIdentifier',
        'state_of_issue_state_abbreviation_descriptor' => 'getStateOfIssueStateAbbreviationDescriptor',
        'academic_subjects' => 'getAcademicSubjects',
        'credential_field_descriptor' => 'getCredentialFieldDescriptor',
        'credential_type_descriptor' => 'getCredentialTypeDescriptor',
        'effective_date' => 'getEffectiveDate',
        'endorsements' => 'getEndorsements',
        'expiration_date' => 'getExpirationDate',
        'grade_levels' => 'getGradeLevels',
        'issuance_date' => 'getIssuanceDate',
        'namespace' => 'getNamespace',
        'teaching_credential_basis_descriptor' => 'getTeachingCredentialBasisDescriptor',
        'teaching_credential_descriptor' => 'getTeachingCredentialDescriptor',
        '_etag' => 'getEtag',
        '_last_modified_date' => 'getLastModifiedDate',
        '_ext' => 'getExt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('credential_identifier', $data ?? [], null);
        $this->setIfExists('state_of_issue_state_abbreviation_descriptor', $data ?? [], null);
        $this->setIfExists('academic_subjects', $data ?? [], null);
        $this->setIfExists('credential_field_descriptor', $data ?? [], null);
        $this->setIfExists('credential_type_descriptor', $data ?? [], null);
        $this->setIfExists('effective_date', $data ?? [], null);
        $this->setIfExists('endorsements', $data ?? [], null);
        $this->setIfExists('expiration_date', $data ?? [], null);
        $this->setIfExists('grade_levels', $data ?? [], null);
        $this->setIfExists('issuance_date', $data ?? [], null);
        $this->setIfExists('namespace', $data ?? [], null);
        $this->setIfExists('teaching_credential_basis_descriptor', $data ?? [], null);
        $this->setIfExists('teaching_credential_descriptor', $data ?? [], null);
        $this->setIfExists('_etag', $data ?? [], null);
        $this->setIfExists('_last_modified_date', $data ?? [], null);
        $this->setIfExists('_ext', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['credential_identifier'] === null) {
            $invalidProperties[] = "'credential_identifier' can't be null";
        }
        if ((mb_strlen($this->container['credential_identifier']) > 60)) {
            $invalidProperties[] = "invalid value for 'credential_identifier', the character length must be smaller than or equal to 60.";
        }

        if ((mb_strlen($this->container['credential_identifier']) < 1)) {
            $invalidProperties[] = "invalid value for 'credential_identifier', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['state_of_issue_state_abbreviation_descriptor'] === null) {
            $invalidProperties[] = "'state_of_issue_state_abbreviation_descriptor' can't be null";
        }
        if ((mb_strlen($this->container['state_of_issue_state_abbreviation_descriptor']) > 306)) {
            $invalidProperties[] = "invalid value for 'state_of_issue_state_abbreviation_descriptor', the character length must be smaller than or equal to 306.";
        }

        if (!is_null($this->container['credential_field_descriptor']) && (mb_strlen($this->container['credential_field_descriptor']) > 306)) {
            $invalidProperties[] = "invalid value for 'credential_field_descriptor', the character length must be smaller than or equal to 306.";
        }

        if ($this->container['credential_type_descriptor'] === null) {
            $invalidProperties[] = "'credential_type_descriptor' can't be null";
        }
        if ((mb_strlen($this->container['credential_type_descriptor']) > 306)) {
            $invalidProperties[] = "invalid value for 'credential_type_descriptor', the character length must be smaller than or equal to 306.";
        }

        if ($this->container['issuance_date'] === null) {
            $invalidProperties[] = "'issuance_date' can't be null";
        }
        if ($this->container['namespace'] === null) {
            $invalidProperties[] = "'namespace' can't be null";
        }
        if ((mb_strlen($this->container['namespace']) > 255)) {
            $invalidProperties[] = "invalid value for 'namespace', the character length must be smaller than or equal to 255.";
        }

        if ((mb_strlen($this->container['namespace']) < 5)) {
            $invalidProperties[] = "invalid value for 'namespace', the character length must be bigger than or equal to 5.";
        }

        if (!is_null($this->container['teaching_credential_basis_descriptor']) && (mb_strlen($this->container['teaching_credential_basis_descriptor']) > 306)) {
            $invalidProperties[] = "invalid value for 'teaching_credential_basis_descriptor', the character length must be smaller than or equal to 306.";
        }

        if (!is_null($this->container['teaching_credential_descriptor']) && (mb_strlen($this->container['teaching_credential_descriptor']) > 306)) {
            $invalidProperties[] = "invalid value for 'teaching_credential_descriptor', the character length must be smaller than or equal to 306.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id 
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets credential_identifier
     *
     * @return string
     */
    public function getCredentialIdentifier()
    {
        return $this->container['credential_identifier'];
    }

    /**
     * Sets credential_identifier
     *
     * @param string $credential_identifier Identifier or serial number assigned to the credential.
     *
     * @return self
     */
    public function setCredentialIdentifier($credential_identifier)
    {
        if (is_null($credential_identifier)) {
            throw new \InvalidArgumentException('non-nullable credential_identifier cannot be null');
        }
        if ((mb_strlen($credential_identifier) > 60)) {
            throw new \InvalidArgumentException('invalid length for $credential_identifier when calling EdFiCredential., must be smaller than or equal to 60.');
        }
        if ((mb_strlen($credential_identifier) < 1)) {
            throw new \InvalidArgumentException('invalid length for $credential_identifier when calling EdFiCredential., must be bigger than or equal to 1.');
        }

        $this->container['credential_identifier'] = $credential_identifier;

        return $this;
    }

    /**
     * Gets state_of_issue_state_abbreviation_descriptor
     *
     * @return string
     */
    public function getStateOfIssueStateAbbreviationDescriptor()
    {
        return $this->container['state_of_issue_state_abbreviation_descriptor'];
    }

    /**
     * Sets state_of_issue_state_abbreviation_descriptor
     *
     * @param string $state_of_issue_state_abbreviation_descriptor The abbreviation for the name of the state (within the United States) or extra-state jurisdiction in which a license/credential was issued.
     *
     * @return self
     */
    public function setStateOfIssueStateAbbreviationDescriptor($state_of_issue_state_abbreviation_descriptor)
    {
        if (is_null($state_of_issue_state_abbreviation_descriptor)) {
            throw new \InvalidArgumentException('non-nullable state_of_issue_state_abbreviation_descriptor cannot be null');
        }
        if ((mb_strlen($state_of_issue_state_abbreviation_descriptor) > 306)) {
            throw new \InvalidArgumentException('invalid length for $state_of_issue_state_abbreviation_descriptor when calling EdFiCredential., must be smaller than or equal to 306.');
        }

        $this->container['state_of_issue_state_abbreviation_descriptor'] = $state_of_issue_state_abbreviation_descriptor;

        return $this;
    }

    /**
     * Gets academic_subjects
     *
     * @return \Resources\Model\EdFiCredentialAcademicSubject[]|null
     */
    public function getAcademicSubjects()
    {
        return $this->container['academic_subjects'];
    }

    /**
     * Sets academic_subjects
     *
     * @param \Resources\Model\EdFiCredentialAcademicSubject[]|null $academic_subjects An unordered collection of credentialAcademicSubjects. The academic subjects to which the credential pertains.
     *
     * @return self
     */
    public function setAcademicSubjects($academic_subjects)
    {
        if (is_null($academic_subjects)) {
            throw new \InvalidArgumentException('non-nullable academic_subjects cannot be null');
        }
        $this->container['academic_subjects'] = $academic_subjects;

        return $this;
    }

    /**
     * Gets credential_field_descriptor
     *
     * @return string|null
     */
    public function getCredentialFieldDescriptor()
    {
        return $this->container['credential_field_descriptor'];
    }

    /**
     * Sets credential_field_descriptor
     *
     * @param string|null $credential_field_descriptor The field of certification for the certificate (e.g., Mathematics, Music).
     *
     * @return self
     */
    public function setCredentialFieldDescriptor($credential_field_descriptor)
    {
        if (is_null($credential_field_descriptor)) {
            array_push($this->openAPINullablesSetToNull, 'credential_field_descriptor');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('credential_field_descriptor', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($credential_field_descriptor) && (mb_strlen($credential_field_descriptor) > 306)) {
            throw new \InvalidArgumentException('invalid length for $credential_field_descriptor when calling EdFiCredential., must be smaller than or equal to 306.');
        }

        $this->container['credential_field_descriptor'] = $credential_field_descriptor;

        return $this;
    }

    /**
     * Gets credential_type_descriptor
     *
     * @return string
     */
    public function getCredentialTypeDescriptor()
    {
        return $this->container['credential_type_descriptor'];
    }

    /**
     * Sets credential_type_descriptor
     *
     * @param string $credential_type_descriptor An indication of the category of credential an individual holds.
     *
     * @return self
     */
    public function setCredentialTypeDescriptor($credential_type_descriptor)
    {
        if (is_null($credential_type_descriptor)) {
            throw new \InvalidArgumentException('non-nullable credential_type_descriptor cannot be null');
        }
        if ((mb_strlen($credential_type_descriptor) > 306)) {
            throw new \InvalidArgumentException('invalid length for $credential_type_descriptor when calling EdFiCredential., must be smaller than or equal to 306.');
        }

        $this->container['credential_type_descriptor'] = $credential_type_descriptor;

        return $this;
    }

    /**
     * Gets effective_date
     *
     * @return \DateTime|null
     */
    public function getEffectiveDate()
    {
        return $this->container['effective_date'];
    }

    /**
     * Sets effective_date
     *
     * @param \DateTime|null $effective_date The year, month and day on which an active credential held by an individual was issued.
     *
     * @return self
     */
    public function setEffectiveDate($effective_date)
    {
        if (is_null($effective_date)) {
            array_push($this->openAPINullablesSetToNull, 'effective_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('effective_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['effective_date'] = $effective_date;

        return $this;
    }

    /**
     * Gets endorsements
     *
     * @return \Resources\Model\EdFiCredentialEndorsement[]|null
     */
    public function getEndorsements()
    {
        return $this->container['endorsements'];
    }

    /**
     * Sets endorsements
     *
     * @param \Resources\Model\EdFiCredentialEndorsement[]|null $endorsements An unordered collection of credentialEndorsements. Endorsements are attachments to teaching certificates and indicate areas of specialization.
     *
     * @return self
     */
    public function setEndorsements($endorsements)
    {
        if (is_null($endorsements)) {
            throw new \InvalidArgumentException('non-nullable endorsements cannot be null');
        }
        $this->container['endorsements'] = $endorsements;

        return $this;
    }

    /**
     * Gets expiration_date
     *
     * @return \DateTime|null
     */
    public function getExpirationDate()
    {
        return $this->container['expiration_date'];
    }

    /**
     * Sets expiration_date
     *
     * @param \DateTime|null $expiration_date The month, day, and year on which an active credential held by an individual will expire.
     *
     * @return self
     */
    public function setExpirationDate($expiration_date)
    {
        if (is_null($expiration_date)) {
            array_push($this->openAPINullablesSetToNull, 'expiration_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('expiration_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['expiration_date'] = $expiration_date;

        return $this;
    }

    /**
     * Gets grade_levels
     *
     * @return \Resources\Model\EdFiCredentialGradeLevel[]|null
     */
    public function getGradeLevels()
    {
        return $this->container['grade_levels'];
    }

    /**
     * Sets grade_levels
     *
     * @param \Resources\Model\EdFiCredentialGradeLevel[]|null $grade_levels An unordered collection of credentialGradeLevels. The grade level(s) certified for teaching.
     *
     * @return self
     */
    public function setGradeLevels($grade_levels)
    {
        if (is_null($grade_levels)) {
            throw new \InvalidArgumentException('non-nullable grade_levels cannot be null');
        }
        $this->container['grade_levels'] = $grade_levels;

        return $this;
    }

    /**
     * Gets issuance_date
     *
     * @return \DateTime
     */
    public function getIssuanceDate()
    {
        return $this->container['issuance_date'];
    }

    /**
     * Sets issuance_date
     *
     * @param \DateTime $issuance_date The month, day, and year on which an active credential was issued to an individual.
     *
     * @return self
     */
    public function setIssuanceDate($issuance_date)
    {
        if (is_null($issuance_date)) {
            throw new \InvalidArgumentException('non-nullable issuance_date cannot be null');
        }
        $this->container['issuance_date'] = $issuance_date;

        return $this;
    }

    /**
     * Gets namespace
     *
     * @return string
     */
    public function getNamespace()
    {
        return $this->container['namespace'];
    }

    /**
     * Sets namespace
     *
     * @param string $namespace Namespace for the credential.
     *
     * @return self
     */
    public function setNamespace($namespace)
    {
        if (is_null($namespace)) {
            throw new \InvalidArgumentException('non-nullable namespace cannot be null');
        }
        if ((mb_strlen($namespace) > 255)) {
            throw new \InvalidArgumentException('invalid length for $namespace when calling EdFiCredential., must be smaller than or equal to 255.');
        }
        if ((mb_strlen($namespace) < 5)) {
            throw new \InvalidArgumentException('invalid length for $namespace when calling EdFiCredential., must be bigger than or equal to 5.');
        }

        $this->container['namespace'] = $namespace;

        return $this;
    }

    /**
     * Gets teaching_credential_basis_descriptor
     *
     * @return string|null
     */
    public function getTeachingCredentialBasisDescriptor()
    {
        return $this->container['teaching_credential_basis_descriptor'];
    }

    /**
     * Sets teaching_credential_basis_descriptor
     *
     * @param string|null $teaching_credential_basis_descriptor An indication of the pre-determined criteria for granting the teaching credential that an individual holds.
     *
     * @return self
     */
    public function setTeachingCredentialBasisDescriptor($teaching_credential_basis_descriptor)
    {
        if (is_null($teaching_credential_basis_descriptor)) {
            array_push($this->openAPINullablesSetToNull, 'teaching_credential_basis_descriptor');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('teaching_credential_basis_descriptor', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($teaching_credential_basis_descriptor) && (mb_strlen($teaching_credential_basis_descriptor) > 306)) {
            throw new \InvalidArgumentException('invalid length for $teaching_credential_basis_descriptor when calling EdFiCredential., must be smaller than or equal to 306.');
        }

        $this->container['teaching_credential_basis_descriptor'] = $teaching_credential_basis_descriptor;

        return $this;
    }

    /**
     * Gets teaching_credential_descriptor
     *
     * @return string|null
     */
    public function getTeachingCredentialDescriptor()
    {
        return $this->container['teaching_credential_descriptor'];
    }

    /**
     * Sets teaching_credential_descriptor
     *
     * @param string|null $teaching_credential_descriptor An indication of the category of a legal document giving authorization to perform teaching assignment services.
     *
     * @return self
     */
    public function setTeachingCredentialDescriptor($teaching_credential_descriptor)
    {
        if (is_null($teaching_credential_descriptor)) {
            array_push($this->openAPINullablesSetToNull, 'teaching_credential_descriptor');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('teaching_credential_descriptor', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($teaching_credential_descriptor) && (mb_strlen($teaching_credential_descriptor) > 306)) {
            throw new \InvalidArgumentException('invalid length for $teaching_credential_descriptor when calling EdFiCredential., must be smaller than or equal to 306.');
        }

        $this->container['teaching_credential_descriptor'] = $teaching_credential_descriptor;

        return $this;
    }

    /**
     * Gets _etag
     *
     * @return string|null
     */
    public function getEtag()
    {
        return $this->container['_etag'];
    }

    /**
     * Sets _etag
     *
     * @param string|null $_etag A unique system-generated value that identifies the version of the resource.
     *
     * @return self
     */
    public function setEtag($_etag)
    {
        if (is_null($_etag)) {
            throw new \InvalidArgumentException('non-nullable _etag cannot be null');
        }
        $this->container['_etag'] = $_etag;

        return $this;
    }

    /**
     * Gets _last_modified_date
     *
     * @return \DateTime|null
     */
    public function getLastModifiedDate()
    {
        return $this->container['_last_modified_date'];
    }

    /**
     * Sets _last_modified_date
     *
     * @param \DateTime|null $_last_modified_date The date and time the resource was last modified.
     *
     * @return self
     */
    public function setLastModifiedDate($_last_modified_date)
    {
        if (is_null($_last_modified_date)) {
            throw new \InvalidArgumentException('non-nullable _last_modified_date cannot be null');
        }
        $this->container['_last_modified_date'] = $_last_modified_date;

        return $this;
    }

    /**
     * Gets _ext
     *
     * @return \Resources\Model\CredentialExtensions|null
     */
    public function getExt()
    {
        return $this->container['_ext'];
    }

    /**
     * Sets _ext
     *
     * @param \Resources\Model\CredentialExtensions|null $_ext _ext
     *
     * @return self
     */
    public function setExt($_ext)
    {
        if (is_null($_ext)) {
            throw new \InvalidArgumentException('non-nullable _ext cannot be null');
        }
        $this->container['_ext'] = $_ext;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


