<?php
/**
 * EdFiEducationContent
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Resources
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Resources\Model;

use \ArrayAccess;
use \Resources\ObjectSerializer;

/**
 * EdFiEducationContent Class Doc Comment
 *
 * @category Class
 * @package  Resources
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EdFiEducationContent implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'edFi_educationContent';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'content_identifier' => 'string',
        'learning_standard_reference' => '\Resources\Model\EdFiLearningStandardReference',
        'additional_authors_indicator' => 'bool',
        'appropriate_grade_levels' => '\Resources\Model\EdFiEducationContentAppropriateGradeLevel[]',
        'appropriate_sexes' => '\Resources\Model\EdFiEducationContentAppropriateSex[]',
        'authors' => '\Resources\Model\EdFiEducationContentAuthor[]',
        'content_class_descriptor' => 'string',
        'cost' => 'float',
        'cost_rate_descriptor' => 'string',
        'derivative_source_education_contents' => '\Resources\Model\EdFiEducationContentDerivativeSourceEducationContent[]',
        'derivative_source_learning_resource_metadata_uris' => '\Resources\Model\EdFiEducationContentDerivativeSourceLearningResourceMetadataURI[]',
        'derivative_source_uris' => '\Resources\Model\EdFiEducationContentDerivativeSourceURI[]',
        'description' => 'string',
        'interactivity_style_descriptor' => 'string',
        'languages' => '\Resources\Model\EdFiEducationContentLanguage[]',
        'learning_resource_metadata_uri' => 'string',
        'namespace' => 'string',
        'publication_date' => '\DateTime',
        'publication_year' => 'int',
        'publisher' => 'string',
        'short_description' => 'string',
        'time_required' => 'string',
        'use_rights_url' => 'string',
        'version' => 'string',
        '_etag' => 'string',
        '_last_modified_date' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'content_identifier' => null,
        'learning_standard_reference' => null,
        'additional_authors_indicator' => null,
        'appropriate_grade_levels' => null,
        'appropriate_sexes' => null,
        'authors' => null,
        'content_class_descriptor' => null,
        'cost' => 'double',
        'cost_rate_descriptor' => null,
        'derivative_source_education_contents' => null,
        'derivative_source_learning_resource_metadata_uris' => null,
        'derivative_source_uris' => null,
        'description' => null,
        'interactivity_style_descriptor' => null,
        'languages' => null,
        'learning_resource_metadata_uri' => null,
        'namespace' => null,
        'publication_date' => 'date',
        'publication_year' => 'int32',
        'publisher' => null,
        'short_description' => null,
        'time_required' => null,
        'use_rights_url' => null,
        'version' => null,
        '_etag' => null,
        '_last_modified_date' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'content_identifier' => false,
        'learning_standard_reference' => false,
        'additional_authors_indicator' => true,
        'appropriate_grade_levels' => false,
        'appropriate_sexes' => false,
        'authors' => false,
        'content_class_descriptor' => true,
        'cost' => true,
        'cost_rate_descriptor' => true,
        'derivative_source_education_contents' => false,
        'derivative_source_learning_resource_metadata_uris' => false,
        'derivative_source_uris' => false,
        'description' => true,
        'interactivity_style_descriptor' => true,
        'languages' => false,
        'learning_resource_metadata_uri' => true,
        'namespace' => false,
        'publication_date' => true,
        'publication_year' => true,
        'publisher' => true,
        'short_description' => true,
        'time_required' => true,
        'use_rights_url' => true,
        'version' => true,
        '_etag' => false,
        '_last_modified_date' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'content_identifier' => 'contentIdentifier',
        'learning_standard_reference' => 'learningStandardReference',
        'additional_authors_indicator' => 'additionalAuthorsIndicator',
        'appropriate_grade_levels' => 'appropriateGradeLevels',
        'appropriate_sexes' => 'appropriateSexes',
        'authors' => 'authors',
        'content_class_descriptor' => 'contentClassDescriptor',
        'cost' => 'cost',
        'cost_rate_descriptor' => 'costRateDescriptor',
        'derivative_source_education_contents' => 'derivativeSourceEducationContents',
        'derivative_source_learning_resource_metadata_uris' => 'derivativeSourceLearningResourceMetadataURIs',
        'derivative_source_uris' => 'derivativeSourceURIs',
        'description' => 'description',
        'interactivity_style_descriptor' => 'interactivityStyleDescriptor',
        'languages' => 'languages',
        'learning_resource_metadata_uri' => 'learningResourceMetadataURI',
        'namespace' => 'namespace',
        'publication_date' => 'publicationDate',
        'publication_year' => 'publicationYear',
        'publisher' => 'publisher',
        'short_description' => 'shortDescription',
        'time_required' => 'timeRequired',
        'use_rights_url' => 'useRightsURL',
        'version' => 'version',
        '_etag' => '_etag',
        '_last_modified_date' => '_lastModifiedDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'content_identifier' => 'setContentIdentifier',
        'learning_standard_reference' => 'setLearningStandardReference',
        'additional_authors_indicator' => 'setAdditionalAuthorsIndicator',
        'appropriate_grade_levels' => 'setAppropriateGradeLevels',
        'appropriate_sexes' => 'setAppropriateSexes',
        'authors' => 'setAuthors',
        'content_class_descriptor' => 'setContentClassDescriptor',
        'cost' => 'setCost',
        'cost_rate_descriptor' => 'setCostRateDescriptor',
        'derivative_source_education_contents' => 'setDerivativeSourceEducationContents',
        'derivative_source_learning_resource_metadata_uris' => 'setDerivativeSourceLearningResourceMetadataUris',
        'derivative_source_uris' => 'setDerivativeSourceUris',
        'description' => 'setDescription',
        'interactivity_style_descriptor' => 'setInteractivityStyleDescriptor',
        'languages' => 'setLanguages',
        'learning_resource_metadata_uri' => 'setLearningResourceMetadataUri',
        'namespace' => 'setNamespace',
        'publication_date' => 'setPublicationDate',
        'publication_year' => 'setPublicationYear',
        'publisher' => 'setPublisher',
        'short_description' => 'setShortDescription',
        'time_required' => 'setTimeRequired',
        'use_rights_url' => 'setUseRightsUrl',
        'version' => 'setVersion',
        '_etag' => 'setEtag',
        '_last_modified_date' => 'setLastModifiedDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'content_identifier' => 'getContentIdentifier',
        'learning_standard_reference' => 'getLearningStandardReference',
        'additional_authors_indicator' => 'getAdditionalAuthorsIndicator',
        'appropriate_grade_levels' => 'getAppropriateGradeLevels',
        'appropriate_sexes' => 'getAppropriateSexes',
        'authors' => 'getAuthors',
        'content_class_descriptor' => 'getContentClassDescriptor',
        'cost' => 'getCost',
        'cost_rate_descriptor' => 'getCostRateDescriptor',
        'derivative_source_education_contents' => 'getDerivativeSourceEducationContents',
        'derivative_source_learning_resource_metadata_uris' => 'getDerivativeSourceLearningResourceMetadataUris',
        'derivative_source_uris' => 'getDerivativeSourceUris',
        'description' => 'getDescription',
        'interactivity_style_descriptor' => 'getInteractivityStyleDescriptor',
        'languages' => 'getLanguages',
        'learning_resource_metadata_uri' => 'getLearningResourceMetadataUri',
        'namespace' => 'getNamespace',
        'publication_date' => 'getPublicationDate',
        'publication_year' => 'getPublicationYear',
        'publisher' => 'getPublisher',
        'short_description' => 'getShortDescription',
        'time_required' => 'getTimeRequired',
        'use_rights_url' => 'getUseRightsUrl',
        'version' => 'getVersion',
        '_etag' => 'getEtag',
        '_last_modified_date' => 'getLastModifiedDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('content_identifier', $data ?? [], null);
        $this->setIfExists('learning_standard_reference', $data ?? [], null);
        $this->setIfExists('additional_authors_indicator', $data ?? [], null);
        $this->setIfExists('appropriate_grade_levels', $data ?? [], null);
        $this->setIfExists('appropriate_sexes', $data ?? [], null);
        $this->setIfExists('authors', $data ?? [], null);
        $this->setIfExists('content_class_descriptor', $data ?? [], null);
        $this->setIfExists('cost', $data ?? [], null);
        $this->setIfExists('cost_rate_descriptor', $data ?? [], null);
        $this->setIfExists('derivative_source_education_contents', $data ?? [], null);
        $this->setIfExists('derivative_source_learning_resource_metadata_uris', $data ?? [], null);
        $this->setIfExists('derivative_source_uris', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('interactivity_style_descriptor', $data ?? [], null);
        $this->setIfExists('languages', $data ?? [], null);
        $this->setIfExists('learning_resource_metadata_uri', $data ?? [], null);
        $this->setIfExists('namespace', $data ?? [], null);
        $this->setIfExists('publication_date', $data ?? [], null);
        $this->setIfExists('publication_year', $data ?? [], null);
        $this->setIfExists('publisher', $data ?? [], null);
        $this->setIfExists('short_description', $data ?? [], null);
        $this->setIfExists('time_required', $data ?? [], null);
        $this->setIfExists('use_rights_url', $data ?? [], null);
        $this->setIfExists('version', $data ?? [], null);
        $this->setIfExists('_etag', $data ?? [], null);
        $this->setIfExists('_last_modified_date', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['content_identifier'] === null) {
            $invalidProperties[] = "'content_identifier' can't be null";
        }
        if ((mb_strlen($this->container['content_identifier']) > 225)) {
            $invalidProperties[] = "invalid value for 'content_identifier', the character length must be smaller than or equal to 225.";
        }

        if (!is_null($this->container['content_class_descriptor']) && (mb_strlen($this->container['content_class_descriptor']) > 306)) {
            $invalidProperties[] = "invalid value for 'content_class_descriptor', the character length must be smaller than or equal to 306.";
        }

        if (!is_null($this->container['cost']) && ($this->container['cost'] > 922337203685477.6)) {
            $invalidProperties[] = "invalid value for 'cost', must be smaller than or equal to 922337203685477.6.";
        }

        if (!is_null($this->container['cost']) && ($this->container['cost'] < -922337203685477.6)) {
            $invalidProperties[] = "invalid value for 'cost', must be bigger than or equal to -922337203685477.6.";
        }

        if (!is_null($this->container['cost_rate_descriptor']) && (mb_strlen($this->container['cost_rate_descriptor']) > 306)) {
            $invalidProperties[] = "invalid value for 'cost_rate_descriptor', the character length must be smaller than or equal to 306.";
        }

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 1024)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 1024.";
        }

        if (!is_null($this->container['interactivity_style_descriptor']) && (mb_strlen($this->container['interactivity_style_descriptor']) > 306)) {
            $invalidProperties[] = "invalid value for 'interactivity_style_descriptor', the character length must be smaller than or equal to 306.";
        }

        if (!is_null($this->container['learning_resource_metadata_uri']) && (mb_strlen($this->container['learning_resource_metadata_uri']) > 255)) {
            $invalidProperties[] = "invalid value for 'learning_resource_metadata_uri', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['learning_resource_metadata_uri']) && (mb_strlen($this->container['learning_resource_metadata_uri']) < 5)) {
            $invalidProperties[] = "invalid value for 'learning_resource_metadata_uri', the character length must be bigger than or equal to 5.";
        }

        if ($this->container['namespace'] === null) {
            $invalidProperties[] = "'namespace' can't be null";
        }
        if ((mb_strlen($this->container['namespace']) > 255)) {
            $invalidProperties[] = "invalid value for 'namespace', the character length must be smaller than or equal to 255.";
        }

        if ((mb_strlen($this->container['namespace']) < 5)) {
            $invalidProperties[] = "invalid value for 'namespace', the character length must be bigger than or equal to 5.";
        }

        if (!is_null($this->container['publisher']) && (mb_strlen($this->container['publisher']) > 50)) {
            $invalidProperties[] = "invalid value for 'publisher', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['short_description']) && (mb_strlen($this->container['short_description']) > 75)) {
            $invalidProperties[] = "invalid value for 'short_description', the character length must be smaller than or equal to 75.";
        }

        if (!is_null($this->container['time_required']) && (mb_strlen($this->container['time_required']) > 30)) {
            $invalidProperties[] = "invalid value for 'time_required', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['use_rights_url']) && (mb_strlen($this->container['use_rights_url']) > 255)) {
            $invalidProperties[] = "invalid value for 'use_rights_url', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['use_rights_url']) && (mb_strlen($this->container['use_rights_url']) < 5)) {
            $invalidProperties[] = "invalid value for 'use_rights_url', the character length must be bigger than or equal to 5.";
        }

        if (!is_null($this->container['version']) && (mb_strlen($this->container['version']) > 10)) {
            $invalidProperties[] = "invalid value for 'version', the character length must be smaller than or equal to 10.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id 
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets content_identifier
     *
     * @return string
     */
    public function getContentIdentifier()
    {
        return $this->container['content_identifier'];
    }

    /**
     * Sets content_identifier
     *
     * @param string $content_identifier A unique identifier for the education content.
     *
     * @return self
     */
    public function setContentIdentifier($content_identifier)
    {
        if (is_null($content_identifier)) {
            throw new \InvalidArgumentException('non-nullable content_identifier cannot be null');
        }
        if ((mb_strlen($content_identifier) > 225)) {
            throw new \InvalidArgumentException('invalid length for $content_identifier when calling EdFiEducationContent., must be smaller than or equal to 225.');
        }

        $this->container['content_identifier'] = $content_identifier;

        return $this;
    }

    /**
     * Gets learning_standard_reference
     *
     * @return \Resources\Model\EdFiLearningStandardReference|null
     */
    public function getLearningStandardReference()
    {
        return $this->container['learning_standard_reference'];
    }

    /**
     * Sets learning_standard_reference
     *
     * @param \Resources\Model\EdFiLearningStandardReference|null $learning_standard_reference learning_standard_reference
     *
     * @return self
     */
    public function setLearningStandardReference($learning_standard_reference)
    {
        if (is_null($learning_standard_reference)) {
            throw new \InvalidArgumentException('non-nullable learning_standard_reference cannot be null');
        }
        $this->container['learning_standard_reference'] = $learning_standard_reference;

        return $this;
    }

    /**
     * Gets additional_authors_indicator
     *
     * @return bool|null
     */
    public function getAdditionalAuthorsIndicator()
    {
        return $this->container['additional_authors_indicator'];
    }

    /**
     * Sets additional_authors_indicator
     *
     * @param bool|null $additional_authors_indicator Indicates whether there are additional un-named authors. In a research report, this is often marked by the abbreviation \"et al\".
     *
     * @return self
     */
    public function setAdditionalAuthorsIndicator($additional_authors_indicator)
    {
        if (is_null($additional_authors_indicator)) {
            array_push($this->openAPINullablesSetToNull, 'additional_authors_indicator');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('additional_authors_indicator', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['additional_authors_indicator'] = $additional_authors_indicator;

        return $this;
    }

    /**
     * Gets appropriate_grade_levels
     *
     * @return \Resources\Model\EdFiEducationContentAppropriateGradeLevel[]|null
     */
    public function getAppropriateGradeLevels()
    {
        return $this->container['appropriate_grade_levels'];
    }

    /**
     * Sets appropriate_grade_levels
     *
     * @param \Resources\Model\EdFiEducationContentAppropriateGradeLevel[]|null $appropriate_grade_levels An unordered collection of educationContentAppropriateGradeLevels. Grade levels for which this education content is applicable. If omitted, considered generally applicable.
     *
     * @return self
     */
    public function setAppropriateGradeLevels($appropriate_grade_levels)
    {
        if (is_null($appropriate_grade_levels)) {
            throw new \InvalidArgumentException('non-nullable appropriate_grade_levels cannot be null');
        }
        $this->container['appropriate_grade_levels'] = $appropriate_grade_levels;

        return $this;
    }

    /**
     * Gets appropriate_sexes
     *
     * @return \Resources\Model\EdFiEducationContentAppropriateSex[]|null
     */
    public function getAppropriateSexes()
    {
        return $this->container['appropriate_sexes'];
    }

    /**
     * Sets appropriate_sexes
     *
     * @param \Resources\Model\EdFiEducationContentAppropriateSex[]|null $appropriate_sexes An unordered collection of educationContentAppropriateSexes. Sexes for which this education content is applicable. If omitted, considered generally applicable.
     *
     * @return self
     */
    public function setAppropriateSexes($appropriate_sexes)
    {
        if (is_null($appropriate_sexes)) {
            throw new \InvalidArgumentException('non-nullable appropriate_sexes cannot be null');
        }
        $this->container['appropriate_sexes'] = $appropriate_sexes;

        return $this;
    }

    /**
     * Gets authors
     *
     * @return \Resources\Model\EdFiEducationContentAuthor[]|null
     */
    public function getAuthors()
    {
        return $this->container['authors'];
    }

    /**
     * Sets authors
     *
     * @param \Resources\Model\EdFiEducationContentAuthor[]|null $authors An unordered collection of educationContentAuthors. The individual credited with the creation of the resource.
     *
     * @return self
     */
    public function setAuthors($authors)
    {
        if (is_null($authors)) {
            throw new \InvalidArgumentException('non-nullable authors cannot be null');
        }
        $this->container['authors'] = $authors;

        return $this;
    }

    /**
     * Gets content_class_descriptor
     *
     * @return string|null
     */
    public function getContentClassDescriptor()
    {
        return $this->container['content_class_descriptor'];
    }

    /**
     * Sets content_class_descriptor
     *
     * @param string|null $content_class_descriptor The predominate type or kind characterizing the learning resource.
     *
     * @return self
     */
    public function setContentClassDescriptor($content_class_descriptor)
    {
        if (is_null($content_class_descriptor)) {
            array_push($this->openAPINullablesSetToNull, 'content_class_descriptor');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('content_class_descriptor', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($content_class_descriptor) && (mb_strlen($content_class_descriptor) > 306)) {
            throw new \InvalidArgumentException('invalid length for $content_class_descriptor when calling EdFiEducationContent., must be smaller than or equal to 306.');
        }

        $this->container['content_class_descriptor'] = $content_class_descriptor;

        return $this;
    }

    /**
     * Gets cost
     *
     * @return float|null
     */
    public function getCost()
    {
        return $this->container['cost'];
    }

    /**
     * Sets cost
     *
     * @param float|null $cost An amount that has to be paid or spent to buy or obtain the education content.
     *
     * @return self
     */
    public function setCost($cost)
    {
        if (is_null($cost)) {
            array_push($this->openAPINullablesSetToNull, 'cost');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cost', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($cost) && ($cost > 922337203685477.6)) {
            throw new \InvalidArgumentException('invalid value for $cost when calling EdFiEducationContent., must be smaller than or equal to 922337203685477.6.');
        }
        if (!is_null($cost) && ($cost < -922337203685477.6)) {
            throw new \InvalidArgumentException('invalid value for $cost when calling EdFiEducationContent., must be bigger than or equal to -922337203685477.6.');
        }

        $this->container['cost'] = $cost;

        return $this;
    }

    /**
     * Gets cost_rate_descriptor
     *
     * @return string|null
     */
    public function getCostRateDescriptor()
    {
        return $this->container['cost_rate_descriptor'];
    }

    /**
     * Sets cost_rate_descriptor
     *
     * @param string|null $cost_rate_descriptor The rate by which the cost applies.
     *
     * @return self
     */
    public function setCostRateDescriptor($cost_rate_descriptor)
    {
        if (is_null($cost_rate_descriptor)) {
            array_push($this->openAPINullablesSetToNull, 'cost_rate_descriptor');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cost_rate_descriptor', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($cost_rate_descriptor) && (mb_strlen($cost_rate_descriptor) > 306)) {
            throw new \InvalidArgumentException('invalid length for $cost_rate_descriptor when calling EdFiEducationContent., must be smaller than or equal to 306.');
        }

        $this->container['cost_rate_descriptor'] = $cost_rate_descriptor;

        return $this;
    }

    /**
     * Gets derivative_source_education_contents
     *
     * @return \Resources\Model\EdFiEducationContentDerivativeSourceEducationContent[]|null
     */
    public function getDerivativeSourceEducationContents()
    {
        return $this->container['derivative_source_education_contents'];
    }

    /**
     * Sets derivative_source_education_contents
     *
     * @param \Resources\Model\EdFiEducationContentDerivativeSourceEducationContent[]|null $derivative_source_education_contents An unordered collection of educationContentDerivativeSourceEducationContents. Relates the education content source to the education content.
     *
     * @return self
     */
    public function setDerivativeSourceEducationContents($derivative_source_education_contents)
    {
        if (is_null($derivative_source_education_contents)) {
            throw new \InvalidArgumentException('non-nullable derivative_source_education_contents cannot be null');
        }
        $this->container['derivative_source_education_contents'] = $derivative_source_education_contents;

        return $this;
    }

    /**
     * Gets derivative_source_learning_resource_metadata_uris
     *
     * @return \Resources\Model\EdFiEducationContentDerivativeSourceLearningResourceMetadataURI[]|null
     */
    public function getDerivativeSourceLearningResourceMetadataUris()
    {
        return $this->container['derivative_source_learning_resource_metadata_uris'];
    }

    /**
     * Sets derivative_source_learning_resource_metadata_uris
     *
     * @param \Resources\Model\EdFiEducationContentDerivativeSourceLearningResourceMetadataURI[]|null $derivative_source_learning_resource_metadata_uris An unordered collection of educationContentDerivativeSourceLearningResourceMetadataURIs. The URI (typical a URL) pointing to the metadata entry in a LRMI metadata repository, which describes this content item.
     *
     * @return self
     */
    public function setDerivativeSourceLearningResourceMetadataUris($derivative_source_learning_resource_metadata_uris)
    {
        if (is_null($derivative_source_learning_resource_metadata_uris)) {
            throw new \InvalidArgumentException('non-nullable derivative_source_learning_resource_metadata_uris cannot be null');
        }
        $this->container['derivative_source_learning_resource_metadata_uris'] = $derivative_source_learning_resource_metadata_uris;

        return $this;
    }

    /**
     * Gets derivative_source_uris
     *
     * @return \Resources\Model\EdFiEducationContentDerivativeSourceURI[]|null
     */
    public function getDerivativeSourceUris()
    {
        return $this->container['derivative_source_uris'];
    }

    /**
     * Sets derivative_source_uris
     *
     * @param \Resources\Model\EdFiEducationContentDerivativeSourceURI[]|null $derivative_source_uris An unordered collection of educationContentDerivativeSourceURIs. The URI (typical a URL) pointing to an education content item.
     *
     * @return self
     */
    public function setDerivativeSourceUris($derivative_source_uris)
    {
        if (is_null($derivative_source_uris)) {
            throw new \InvalidArgumentException('non-nullable derivative_source_uris cannot be null');
        }
        $this->container['derivative_source_uris'] = $derivative_source_uris;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description An extended written representation of the education content.
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($description) && (mb_strlen($description) > 1024)) {
            throw new \InvalidArgumentException('invalid length for $description when calling EdFiEducationContent., must be smaller than or equal to 1024.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets interactivity_style_descriptor
     *
     * @return string|null
     */
    public function getInteractivityStyleDescriptor()
    {
        return $this->container['interactivity_style_descriptor'];
    }

    /**
     * Sets interactivity_style_descriptor
     *
     * @param string|null $interactivity_style_descriptor The predominate mode of learning supported by the learning resource. Acceptable values are active, expositive, or mixed.
     *
     * @return self
     */
    public function setInteractivityStyleDescriptor($interactivity_style_descriptor)
    {
        if (is_null($interactivity_style_descriptor)) {
            array_push($this->openAPINullablesSetToNull, 'interactivity_style_descriptor');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('interactivity_style_descriptor', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($interactivity_style_descriptor) && (mb_strlen($interactivity_style_descriptor) > 306)) {
            throw new \InvalidArgumentException('invalid length for $interactivity_style_descriptor when calling EdFiEducationContent., must be smaller than or equal to 306.');
        }

        $this->container['interactivity_style_descriptor'] = $interactivity_style_descriptor;

        return $this;
    }

    /**
     * Gets languages
     *
     * @return \Resources\Model\EdFiEducationContentLanguage[]|null
     */
    public function getLanguages()
    {
        return $this->container['languages'];
    }

    /**
     * Sets languages
     *
     * @param \Resources\Model\EdFiEducationContentLanguage[]|null $languages An unordered collection of educationContentLanguages. An indication of the languages in which the Education Content is designed.
     *
     * @return self
     */
    public function setLanguages($languages)
    {
        if (is_null($languages)) {
            throw new \InvalidArgumentException('non-nullable languages cannot be null');
        }
        $this->container['languages'] = $languages;

        return $this;
    }

    /**
     * Gets learning_resource_metadata_uri
     *
     * @return string|null
     */
    public function getLearningResourceMetadataUri()
    {
        return $this->container['learning_resource_metadata_uri'];
    }

    /**
     * Sets learning_resource_metadata_uri
     *
     * @param string|null $learning_resource_metadata_uri The URI (typical a URL) pointing to the metadata entry in a LRMI metadata repository, which describes this content item.
     *
     * @return self
     */
    public function setLearningResourceMetadataUri($learning_resource_metadata_uri)
    {
        if (is_null($learning_resource_metadata_uri)) {
            array_push($this->openAPINullablesSetToNull, 'learning_resource_metadata_uri');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('learning_resource_metadata_uri', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($learning_resource_metadata_uri) && (mb_strlen($learning_resource_metadata_uri) > 255)) {
            throw new \InvalidArgumentException('invalid length for $learning_resource_metadata_uri when calling EdFiEducationContent., must be smaller than or equal to 255.');
        }
        if (!is_null($learning_resource_metadata_uri) && (mb_strlen($learning_resource_metadata_uri) < 5)) {
            throw new \InvalidArgumentException('invalid length for $learning_resource_metadata_uri when calling EdFiEducationContent., must be bigger than or equal to 5.');
        }

        $this->container['learning_resource_metadata_uri'] = $learning_resource_metadata_uri;

        return $this;
    }

    /**
     * Gets namespace
     *
     * @return string
     */
    public function getNamespace()
    {
        return $this->container['namespace'];
    }

    /**
     * Sets namespace
     *
     * @param string $namespace Namespace for the education content.
     *
     * @return self
     */
    public function setNamespace($namespace)
    {
        if (is_null($namespace)) {
            throw new \InvalidArgumentException('non-nullable namespace cannot be null');
        }
        if ((mb_strlen($namespace) > 255)) {
            throw new \InvalidArgumentException('invalid length for $namespace when calling EdFiEducationContent., must be smaller than or equal to 255.');
        }
        if ((mb_strlen($namespace) < 5)) {
            throw new \InvalidArgumentException('invalid length for $namespace when calling EdFiEducationContent., must be bigger than or equal to 5.');
        }

        $this->container['namespace'] = $namespace;

        return $this;
    }

    /**
     * Gets publication_date
     *
     * @return \DateTime|null
     */
    public function getPublicationDate()
    {
        return $this->container['publication_date'];
    }

    /**
     * Sets publication_date
     *
     * @param \DateTime|null $publication_date The date on which this content was first published.
     *
     * @return self
     */
    public function setPublicationDate($publication_date)
    {
        if (is_null($publication_date)) {
            array_push($this->openAPINullablesSetToNull, 'publication_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('publication_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['publication_date'] = $publication_date;

        return $this;
    }

    /**
     * Gets publication_year
     *
     * @return int|null
     */
    public function getPublicationYear()
    {
        return $this->container['publication_year'];
    }

    /**
     * Sets publication_year
     *
     * @param int|null $publication_year The year at which this content was first published.
     *
     * @return self
     */
    public function setPublicationYear($publication_year)
    {
        if (is_null($publication_year)) {
            array_push($this->openAPINullablesSetToNull, 'publication_year');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('publication_year', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['publication_year'] = $publication_year;

        return $this;
    }

    /**
     * Gets publisher
     *
     * @return string|null
     */
    public function getPublisher()
    {
        return $this->container['publisher'];
    }

    /**
     * Sets publisher
     *
     * @param string|null $publisher The organization credited with publishing the resource.
     *
     * @return self
     */
    public function setPublisher($publisher)
    {
        if (is_null($publisher)) {
            array_push($this->openAPINullablesSetToNull, 'publisher');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('publisher', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($publisher) && (mb_strlen($publisher) > 50)) {
            throw new \InvalidArgumentException('invalid length for $publisher when calling EdFiEducationContent., must be smaller than or equal to 50.');
        }

        $this->container['publisher'] = $publisher;

        return $this;
    }

    /**
     * Gets short_description
     *
     * @return string|null
     */
    public function getShortDescription()
    {
        return $this->container['short_description'];
    }

    /**
     * Sets short_description
     *
     * @param string|null $short_description A short description or name of the entity.
     *
     * @return self
     */
    public function setShortDescription($short_description)
    {
        if (is_null($short_description)) {
            array_push($this->openAPINullablesSetToNull, 'short_description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('short_description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($short_description) && (mb_strlen($short_description) > 75)) {
            throw new \InvalidArgumentException('invalid length for $short_description when calling EdFiEducationContent., must be smaller than or equal to 75.');
        }

        $this->container['short_description'] = $short_description;

        return $this;
    }

    /**
     * Gets time_required
     *
     * @return string|null
     */
    public function getTimeRequired()
    {
        return $this->container['time_required'];
    }

    /**
     * Sets time_required
     *
     * @param string|null $time_required Approximate or typical time that it takes to work with or through this learning resource for the typical intended target audience expressed in minutes.
     *
     * @return self
     */
    public function setTimeRequired($time_required)
    {
        if (is_null($time_required)) {
            array_push($this->openAPINullablesSetToNull, 'time_required');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('time_required', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($time_required) && (mb_strlen($time_required) > 30)) {
            throw new \InvalidArgumentException('invalid length for $time_required when calling EdFiEducationContent., must be smaller than or equal to 30.');
        }

        $this->container['time_required'] = $time_required;

        return $this;
    }

    /**
     * Gets use_rights_url
     *
     * @return string|null
     */
    public function getUseRightsUrl()
    {
        return $this->container['use_rights_url'];
    }

    /**
     * Sets use_rights_url
     *
     * @param string|null $use_rights_url The URL where the owner specifies permissions for using the resource.
     *
     * @return self
     */
    public function setUseRightsUrl($use_rights_url)
    {
        if (is_null($use_rights_url)) {
            array_push($this->openAPINullablesSetToNull, 'use_rights_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('use_rights_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($use_rights_url) && (mb_strlen($use_rights_url) > 255)) {
            throw new \InvalidArgumentException('invalid length for $use_rights_url when calling EdFiEducationContent., must be smaller than or equal to 255.');
        }
        if (!is_null($use_rights_url) && (mb_strlen($use_rights_url) < 5)) {
            throw new \InvalidArgumentException('invalid length for $use_rights_url when calling EdFiEducationContent., must be bigger than or equal to 5.');
        }

        $this->container['use_rights_url'] = $use_rights_url;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string|null
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string|null $version The version identifier for the content.
     *
     * @return self
     */
    public function setVersion($version)
    {
        if (is_null($version)) {
            array_push($this->openAPINullablesSetToNull, 'version');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('version', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($version) && (mb_strlen($version) > 10)) {
            throw new \InvalidArgumentException('invalid length for $version when calling EdFiEducationContent., must be smaller than or equal to 10.');
        }

        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets _etag
     *
     * @return string|null
     */
    public function getEtag()
    {
        return $this->container['_etag'];
    }

    /**
     * Sets _etag
     *
     * @param string|null $_etag A unique system-generated value that identifies the version of the resource.
     *
     * @return self
     */
    public function setEtag($_etag)
    {
        if (is_null($_etag)) {
            throw new \InvalidArgumentException('non-nullable _etag cannot be null');
        }
        $this->container['_etag'] = $_etag;

        return $this;
    }

    /**
     * Gets _last_modified_date
     *
     * @return \DateTime|null
     */
    public function getLastModifiedDate()
    {
        return $this->container['_last_modified_date'];
    }

    /**
     * Sets _last_modified_date
     *
     * @param \DateTime|null $_last_modified_date The date and time the resource was last modified.
     *
     * @return self
     */
    public function setLastModifiedDate($_last_modified_date)
    {
        if (is_null($_last_modified_date)) {
            throw new \InvalidArgumentException('non-nullable _last_modified_date cannot be null');
        }
        $this->container['_last_modified_date'] = $_last_modified_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


