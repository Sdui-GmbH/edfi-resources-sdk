<?php
/**
 * EdFiPostSecondaryInstitution
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * EdFiPostSecondaryInstitution Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EdFiPostSecondaryInstitution implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'edFi_postSecondaryInstitution';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'categories' => '\OpenAPI\Client\Model\EdFiEducationOrganizationCategory[]',
        'post_secondary_institution_id' => 'int',
        'addresses' => '\OpenAPI\Client\Model\EdFiEducationOrganizationAddress[]',
        'administrative_funding_control_descriptor' => 'string',
        'identification_codes' => '\OpenAPI\Client\Model\EdFiEducationOrganizationIdentificationCode[]',
        'indicators' => '\OpenAPI\Client\Model\EdFiEducationOrganizationIndicator[]',
        'institution_telephones' => '\OpenAPI\Client\Model\EdFiEducationOrganizationInstitutionTelephone[]',
        'international_addresses' => '\OpenAPI\Client\Model\EdFiEducationOrganizationInternationalAddress[]',
        'medium_of_instructions' => '\OpenAPI\Client\Model\EdFiPostSecondaryInstitutionMediumOfInstruction[]',
        'name_of_institution' => 'string',
        'operational_status_descriptor' => 'string',
        'post_secondary_institution_level_descriptor' => 'string',
        'short_name_of_institution' => 'string',
        'web_site' => 'string',
        '_etag' => 'string',
        '_last_modified_date' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'categories' => null,
        'post_secondary_institution_id' => 'int64',
        'addresses' => null,
        'administrative_funding_control_descriptor' => null,
        'identification_codes' => null,
        'indicators' => null,
        'institution_telephones' => null,
        'international_addresses' => null,
        'medium_of_instructions' => null,
        'name_of_institution' => null,
        'operational_status_descriptor' => null,
        'post_secondary_institution_level_descriptor' => null,
        'short_name_of_institution' => null,
        'web_site' => null,
        '_etag' => null,
        '_last_modified_date' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'categories' => false,
        'post_secondary_institution_id' => false,
        'addresses' => false,
        'administrative_funding_control_descriptor' => true,
        'identification_codes' => false,
        'indicators' => false,
        'institution_telephones' => false,
        'international_addresses' => false,
        'medium_of_instructions' => false,
        'name_of_institution' => false,
        'operational_status_descriptor' => true,
        'post_secondary_institution_level_descriptor' => true,
        'short_name_of_institution' => true,
        'web_site' => true,
        '_etag' => false,
        '_last_modified_date' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'categories' => 'categories',
        'post_secondary_institution_id' => 'postSecondaryInstitutionId',
        'addresses' => 'addresses',
        'administrative_funding_control_descriptor' => 'administrativeFundingControlDescriptor',
        'identification_codes' => 'identificationCodes',
        'indicators' => 'indicators',
        'institution_telephones' => 'institutionTelephones',
        'international_addresses' => 'internationalAddresses',
        'medium_of_instructions' => 'mediumOfInstructions',
        'name_of_institution' => 'nameOfInstitution',
        'operational_status_descriptor' => 'operationalStatusDescriptor',
        'post_secondary_institution_level_descriptor' => 'postSecondaryInstitutionLevelDescriptor',
        'short_name_of_institution' => 'shortNameOfInstitution',
        'web_site' => 'webSite',
        '_etag' => '_etag',
        '_last_modified_date' => '_lastModifiedDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'categories' => 'setCategories',
        'post_secondary_institution_id' => 'setPostSecondaryInstitutionId',
        'addresses' => 'setAddresses',
        'administrative_funding_control_descriptor' => 'setAdministrativeFundingControlDescriptor',
        'identification_codes' => 'setIdentificationCodes',
        'indicators' => 'setIndicators',
        'institution_telephones' => 'setInstitutionTelephones',
        'international_addresses' => 'setInternationalAddresses',
        'medium_of_instructions' => 'setMediumOfInstructions',
        'name_of_institution' => 'setNameOfInstitution',
        'operational_status_descriptor' => 'setOperationalStatusDescriptor',
        'post_secondary_institution_level_descriptor' => 'setPostSecondaryInstitutionLevelDescriptor',
        'short_name_of_institution' => 'setShortNameOfInstitution',
        'web_site' => 'setWebSite',
        '_etag' => 'setEtag',
        '_last_modified_date' => 'setLastModifiedDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'categories' => 'getCategories',
        'post_secondary_institution_id' => 'getPostSecondaryInstitutionId',
        'addresses' => 'getAddresses',
        'administrative_funding_control_descriptor' => 'getAdministrativeFundingControlDescriptor',
        'identification_codes' => 'getIdentificationCodes',
        'indicators' => 'getIndicators',
        'institution_telephones' => 'getInstitutionTelephones',
        'international_addresses' => 'getInternationalAddresses',
        'medium_of_instructions' => 'getMediumOfInstructions',
        'name_of_institution' => 'getNameOfInstitution',
        'operational_status_descriptor' => 'getOperationalStatusDescriptor',
        'post_secondary_institution_level_descriptor' => 'getPostSecondaryInstitutionLevelDescriptor',
        'short_name_of_institution' => 'getShortNameOfInstitution',
        'web_site' => 'getWebSite',
        '_etag' => 'getEtag',
        '_last_modified_date' => 'getLastModifiedDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('categories', $data ?? [], null);
        $this->setIfExists('post_secondary_institution_id', $data ?? [], null);
        $this->setIfExists('addresses', $data ?? [], null);
        $this->setIfExists('administrative_funding_control_descriptor', $data ?? [], null);
        $this->setIfExists('identification_codes', $data ?? [], null);
        $this->setIfExists('indicators', $data ?? [], null);
        $this->setIfExists('institution_telephones', $data ?? [], null);
        $this->setIfExists('international_addresses', $data ?? [], null);
        $this->setIfExists('medium_of_instructions', $data ?? [], null);
        $this->setIfExists('name_of_institution', $data ?? [], null);
        $this->setIfExists('operational_status_descriptor', $data ?? [], null);
        $this->setIfExists('post_secondary_institution_level_descriptor', $data ?? [], null);
        $this->setIfExists('short_name_of_institution', $data ?? [], null);
        $this->setIfExists('web_site', $data ?? [], null);
        $this->setIfExists('_etag', $data ?? [], null);
        $this->setIfExists('_last_modified_date', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['categories'] === null) {
            $invalidProperties[] = "'categories' can't be null";
        }
        if ($this->container['post_secondary_institution_id'] === null) {
            $invalidProperties[] = "'post_secondary_institution_id' can't be null";
        }
        if (!is_null($this->container['administrative_funding_control_descriptor']) && (mb_strlen($this->container['administrative_funding_control_descriptor']) > 306)) {
            $invalidProperties[] = "invalid value for 'administrative_funding_control_descriptor', the character length must be smaller than or equal to 306.";
        }

        if ($this->container['name_of_institution'] === null) {
            $invalidProperties[] = "'name_of_institution' can't be null";
        }
        if ((mb_strlen($this->container['name_of_institution']) > 75)) {
            $invalidProperties[] = "invalid value for 'name_of_institution', the character length must be smaller than or equal to 75.";
        }

        if ((mb_strlen($this->container['name_of_institution']) < 1)) {
            $invalidProperties[] = "invalid value for 'name_of_institution', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['operational_status_descriptor']) && (mb_strlen($this->container['operational_status_descriptor']) > 306)) {
            $invalidProperties[] = "invalid value for 'operational_status_descriptor', the character length must be smaller than or equal to 306.";
        }

        if (!is_null($this->container['post_secondary_institution_level_descriptor']) && (mb_strlen($this->container['post_secondary_institution_level_descriptor']) > 306)) {
            $invalidProperties[] = "invalid value for 'post_secondary_institution_level_descriptor', the character length must be smaller than or equal to 306.";
        }

        if (!is_null($this->container['short_name_of_institution']) && (mb_strlen($this->container['short_name_of_institution']) > 75)) {
            $invalidProperties[] = "invalid value for 'short_name_of_institution', the character length must be smaller than or equal to 75.";
        }

        if (!is_null($this->container['short_name_of_institution']) && (mb_strlen($this->container['short_name_of_institution']) < 1)) {
            $invalidProperties[] = "invalid value for 'short_name_of_institution', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['web_site']) && (mb_strlen($this->container['web_site']) > 255)) {
            $invalidProperties[] = "invalid value for 'web_site', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['web_site']) && (mb_strlen($this->container['web_site']) < 5)) {
            $invalidProperties[] = "invalid value for 'web_site', the character length must be bigger than or equal to 5.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id 
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets categories
     *
     * @return \OpenAPI\Client\Model\EdFiEducationOrganizationCategory[]
     */
    public function getCategories()
    {
        return $this->container['categories'];
    }

    /**
     * Sets categories
     *
     * @param \OpenAPI\Client\Model\EdFiEducationOrganizationCategory[] $categories An unordered collection of educationOrganizationCategories. The classification of the education agency within the geographic boundaries of a state according to the level of administrative and operational control granted by the state.
     *
     * @return self
     */
    public function setCategories($categories)
    {
        if (is_null($categories)) {
            throw new \InvalidArgumentException('non-nullable categories cannot be null');
        }
        $this->container['categories'] = $categories;

        return $this;
    }

    /**
     * Gets post_secondary_institution_id
     *
     * @return int
     */
    public function getPostSecondaryInstitutionId()
    {
        return $this->container['post_secondary_institution_id'];
    }

    /**
     * Sets post_secondary_institution_id
     *
     * @param int $post_secondary_institution_id The ID of the post secondary institution.
     *
     * @return self
     */
    public function setPostSecondaryInstitutionId($post_secondary_institution_id)
    {
        if (is_null($post_secondary_institution_id)) {
            throw new \InvalidArgumentException('non-nullable post_secondary_institution_id cannot be null');
        }
        $this->container['post_secondary_institution_id'] = $post_secondary_institution_id;

        return $this;
    }

    /**
     * Gets addresses
     *
     * @return \OpenAPI\Client\Model\EdFiEducationOrganizationAddress[]|null
     */
    public function getAddresses()
    {
        return $this->container['addresses'];
    }

    /**
     * Sets addresses
     *
     * @param \OpenAPI\Client\Model\EdFiEducationOrganizationAddress[]|null $addresses An unordered collection of educationOrganizationAddresses. The set of elements that describes an address for the education entity, including the street address, city, state, ZIP code, and ZIP code + 4.
     *
     * @return self
     */
    public function setAddresses($addresses)
    {
        if (is_null($addresses)) {
            throw new \InvalidArgumentException('non-nullable addresses cannot be null');
        }
        $this->container['addresses'] = $addresses;

        return $this;
    }

    /**
     * Gets administrative_funding_control_descriptor
     *
     * @return string|null
     */
    public function getAdministrativeFundingControlDescriptor()
    {
        return $this->container['administrative_funding_control_descriptor'];
    }

    /**
     * Sets administrative_funding_control_descriptor
     *
     * @param string|null $administrative_funding_control_descriptor A classification of whether a postsecondary institution is operated by publicly elected or appointed officials (public control) or by privately elected or appointed officials and derives its major source of funds from private sources (private control).
     *
     * @return self
     */
    public function setAdministrativeFundingControlDescriptor($administrative_funding_control_descriptor)
    {
        if (is_null($administrative_funding_control_descriptor)) {
            array_push($this->openAPINullablesSetToNull, 'administrative_funding_control_descriptor');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('administrative_funding_control_descriptor', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($administrative_funding_control_descriptor) && (mb_strlen($administrative_funding_control_descriptor) > 306)) {
            throw new \InvalidArgumentException('invalid length for $administrative_funding_control_descriptor when calling EdFiPostSecondaryInstitution., must be smaller than or equal to 306.');
        }

        $this->container['administrative_funding_control_descriptor'] = $administrative_funding_control_descriptor;

        return $this;
    }

    /**
     * Gets identification_codes
     *
     * @return \OpenAPI\Client\Model\EdFiEducationOrganizationIdentificationCode[]|null
     */
    public function getIdentificationCodes()
    {
        return $this->container['identification_codes'];
    }

    /**
     * Sets identification_codes
     *
     * @param \OpenAPI\Client\Model\EdFiEducationOrganizationIdentificationCode[]|null $identification_codes An unordered collection of educationOrganizationIdentificationCodes. A unique number or alphanumeric code assigned to an education organization by a school, school system, a state, or other agency or entity.
     *
     * @return self
     */
    public function setIdentificationCodes($identification_codes)
    {
        if (is_null($identification_codes)) {
            throw new \InvalidArgumentException('non-nullable identification_codes cannot be null');
        }
        $this->container['identification_codes'] = $identification_codes;

        return $this;
    }

    /**
     * Gets indicators
     *
     * @return \OpenAPI\Client\Model\EdFiEducationOrganizationIndicator[]|null
     */
    public function getIndicators()
    {
        return $this->container['indicators'];
    }

    /**
     * Sets indicators
     *
     * @param \OpenAPI\Client\Model\EdFiEducationOrganizationIndicator[]|null $indicators An unordered collection of educationOrganizationIndicators. An indicator or metric of an education organization.
     *
     * @return self
     */
    public function setIndicators($indicators)
    {
        if (is_null($indicators)) {
            throw new \InvalidArgumentException('non-nullable indicators cannot be null');
        }
        $this->container['indicators'] = $indicators;

        return $this;
    }

    /**
     * Gets institution_telephones
     *
     * @return \OpenAPI\Client\Model\EdFiEducationOrganizationInstitutionTelephone[]|null
     */
    public function getInstitutionTelephones()
    {
        return $this->container['institution_telephones'];
    }

    /**
     * Sets institution_telephones
     *
     * @param \OpenAPI\Client\Model\EdFiEducationOrganizationInstitutionTelephone[]|null $institution_telephones An unordered collection of educationOrganizationInstitutionTelephones. The 10-digit telephone number, including the area code, for the education entity.
     *
     * @return self
     */
    public function setInstitutionTelephones($institution_telephones)
    {
        if (is_null($institution_telephones)) {
            throw new \InvalidArgumentException('non-nullable institution_telephones cannot be null');
        }
        $this->container['institution_telephones'] = $institution_telephones;

        return $this;
    }

    /**
     * Gets international_addresses
     *
     * @return \OpenAPI\Client\Model\EdFiEducationOrganizationInternationalAddress[]|null
     */
    public function getInternationalAddresses()
    {
        return $this->container['international_addresses'];
    }

    /**
     * Sets international_addresses
     *
     * @param \OpenAPI\Client\Model\EdFiEducationOrganizationInternationalAddress[]|null $international_addresses An unordered collection of educationOrganizationInternationalAddresses. The set of elements that describes the international physical location of the education entity.
     *
     * @return self
     */
    public function setInternationalAddresses($international_addresses)
    {
        if (is_null($international_addresses)) {
            throw new \InvalidArgumentException('non-nullable international_addresses cannot be null');
        }
        $this->container['international_addresses'] = $international_addresses;

        return $this;
    }

    /**
     * Gets medium_of_instructions
     *
     * @return \OpenAPI\Client\Model\EdFiPostSecondaryInstitutionMediumOfInstruction[]|null
     */
    public function getMediumOfInstructions()
    {
        return $this->container['medium_of_instructions'];
    }

    /**
     * Sets medium_of_instructions
     *
     * @param \OpenAPI\Client\Model\EdFiPostSecondaryInstitutionMediumOfInstruction[]|null $medium_of_instructions An unordered collection of postSecondaryInstitutionMediumOfInstructions. The categories in which an institution serves the students.
     *
     * @return self
     */
    public function setMediumOfInstructions($medium_of_instructions)
    {
        if (is_null($medium_of_instructions)) {
            throw new \InvalidArgumentException('non-nullable medium_of_instructions cannot be null');
        }
        $this->container['medium_of_instructions'] = $medium_of_instructions;

        return $this;
    }

    /**
     * Gets name_of_institution
     *
     * @return string
     */
    public function getNameOfInstitution()
    {
        return $this->container['name_of_institution'];
    }

    /**
     * Sets name_of_institution
     *
     * @param string $name_of_institution The full, legally accepted name of the institution.
     *
     * @return self
     */
    public function setNameOfInstitution($name_of_institution)
    {
        if (is_null($name_of_institution)) {
            throw new \InvalidArgumentException('non-nullable name_of_institution cannot be null');
        }
        if ((mb_strlen($name_of_institution) > 75)) {
            throw new \InvalidArgumentException('invalid length for $name_of_institution when calling EdFiPostSecondaryInstitution., must be smaller than or equal to 75.');
        }
        if ((mb_strlen($name_of_institution) < 1)) {
            throw new \InvalidArgumentException('invalid length for $name_of_institution when calling EdFiPostSecondaryInstitution., must be bigger than or equal to 1.');
        }

        $this->container['name_of_institution'] = $name_of_institution;

        return $this;
    }

    /**
     * Gets operational_status_descriptor
     *
     * @return string|null
     */
    public function getOperationalStatusDescriptor()
    {
        return $this->container['operational_status_descriptor'];
    }

    /**
     * Sets operational_status_descriptor
     *
     * @param string|null $operational_status_descriptor The current operational status of the education organization (e.g., active, inactive).
     *
     * @return self
     */
    public function setOperationalStatusDescriptor($operational_status_descriptor)
    {
        if (is_null($operational_status_descriptor)) {
            array_push($this->openAPINullablesSetToNull, 'operational_status_descriptor');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('operational_status_descriptor', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($operational_status_descriptor) && (mb_strlen($operational_status_descriptor) > 306)) {
            throw new \InvalidArgumentException('invalid length for $operational_status_descriptor when calling EdFiPostSecondaryInstitution., must be smaller than or equal to 306.');
        }

        $this->container['operational_status_descriptor'] = $operational_status_descriptor;

        return $this;
    }

    /**
     * Gets post_secondary_institution_level_descriptor
     *
     * @return string|null
     */
    public function getPostSecondaryInstitutionLevelDescriptor()
    {
        return $this->container['post_secondary_institution_level_descriptor'];
    }

    /**
     * Sets post_secondary_institution_level_descriptor
     *
     * @param string|null $post_secondary_institution_level_descriptor A classification of whether a post secondary institution's highest level of offering is a program of 4-years or higher (4 year), 2-but-less-than 4-years (2 year), or less than 2-years.
     *
     * @return self
     */
    public function setPostSecondaryInstitutionLevelDescriptor($post_secondary_institution_level_descriptor)
    {
        if (is_null($post_secondary_institution_level_descriptor)) {
            array_push($this->openAPINullablesSetToNull, 'post_secondary_institution_level_descriptor');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('post_secondary_institution_level_descriptor', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($post_secondary_institution_level_descriptor) && (mb_strlen($post_secondary_institution_level_descriptor) > 306)) {
            throw new \InvalidArgumentException('invalid length for $post_secondary_institution_level_descriptor when calling EdFiPostSecondaryInstitution., must be smaller than or equal to 306.');
        }

        $this->container['post_secondary_institution_level_descriptor'] = $post_secondary_institution_level_descriptor;

        return $this;
    }

    /**
     * Gets short_name_of_institution
     *
     * @return string|null
     */
    public function getShortNameOfInstitution()
    {
        return $this->container['short_name_of_institution'];
    }

    /**
     * Sets short_name_of_institution
     *
     * @param string|null $short_name_of_institution A short name for the institution.
     *
     * @return self
     */
    public function setShortNameOfInstitution($short_name_of_institution)
    {
        if (is_null($short_name_of_institution)) {
            array_push($this->openAPINullablesSetToNull, 'short_name_of_institution');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('short_name_of_institution', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($short_name_of_institution) && (mb_strlen($short_name_of_institution) > 75)) {
            throw new \InvalidArgumentException('invalid length for $short_name_of_institution when calling EdFiPostSecondaryInstitution., must be smaller than or equal to 75.');
        }
        if (!is_null($short_name_of_institution) && (mb_strlen($short_name_of_institution) < 1)) {
            throw new \InvalidArgumentException('invalid length for $short_name_of_institution when calling EdFiPostSecondaryInstitution., must be bigger than or equal to 1.');
        }

        $this->container['short_name_of_institution'] = $short_name_of_institution;

        return $this;
    }

    /**
     * Gets web_site
     *
     * @return string|null
     */
    public function getWebSite()
    {
        return $this->container['web_site'];
    }

    /**
     * Sets web_site
     *
     * @param string|null $web_site The public web site address (URL) for the education organization.
     *
     * @return self
     */
    public function setWebSite($web_site)
    {
        if (is_null($web_site)) {
            array_push($this->openAPINullablesSetToNull, 'web_site');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('web_site', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($web_site) && (mb_strlen($web_site) > 255)) {
            throw new \InvalidArgumentException('invalid length for $web_site when calling EdFiPostSecondaryInstitution., must be smaller than or equal to 255.');
        }
        if (!is_null($web_site) && (mb_strlen($web_site) < 5)) {
            throw new \InvalidArgumentException('invalid length for $web_site when calling EdFiPostSecondaryInstitution., must be bigger than or equal to 5.');
        }

        $this->container['web_site'] = $web_site;

        return $this;
    }

    /**
     * Gets _etag
     *
     * @return string|null
     */
    public function getEtag()
    {
        return $this->container['_etag'];
    }

    /**
     * Sets _etag
     *
     * @param string|null $_etag A unique system-generated value that identifies the version of the resource.
     *
     * @return self
     */
    public function setEtag($_etag)
    {
        if (is_null($_etag)) {
            throw new \InvalidArgumentException('non-nullable _etag cannot be null');
        }
        $this->container['_etag'] = $_etag;

        return $this;
    }

    /**
     * Gets _last_modified_date
     *
     * @return \DateTime|null
     */
    public function getLastModifiedDate()
    {
        return $this->container['_last_modified_date'];
    }

    /**
     * Sets _last_modified_date
     *
     * @param \DateTime|null $_last_modified_date The date and time the resource was last modified.
     *
     * @return self
     */
    public function setLastModifiedDate($_last_modified_date)
    {
        if (is_null($_last_modified_date)) {
            throw new \InvalidArgumentException('non-nullable _last_modified_date cannot be null');
        }
        $this->container['_last_modified_date'] = $_last_modified_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


