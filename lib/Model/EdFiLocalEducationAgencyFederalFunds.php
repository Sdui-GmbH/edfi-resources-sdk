<?php
/**
 * EdFiLocalEducationAgencyFederalFunds
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Resources
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Resources\Model;

use \ArrayAccess;
use \Resources\ObjectSerializer;

/**
 * EdFiLocalEducationAgencyFederalFunds Class Doc Comment
 *
 * @category Class
 * @package  Resources
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EdFiLocalEducationAgencyFederalFunds implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'edFi_localEducationAgencyFederalFunds';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'fiscal_year' => 'int',
        'innovative_dollars_spent' => 'float',
        'innovative_dollars_spent_strategic_priorities' => 'float',
        'innovative_programs_funds_received' => 'float',
        'school_improvement_allocation' => 'float',
        'school_improvement_reserved_funds_percentage' => 'float',
        'state_assessment_administration_funding' => 'float',
        'supplemental_educational_services_funds_spent' => 'float',
        'supplemental_educational_services_per_pupil_expenditure' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'fiscal_year' => 'int32',
        'innovative_dollars_spent' => 'double',
        'innovative_dollars_spent_strategic_priorities' => 'double',
        'innovative_programs_funds_received' => 'double',
        'school_improvement_allocation' => 'double',
        'school_improvement_reserved_funds_percentage' => 'double',
        'state_assessment_administration_funding' => 'double',
        'supplemental_educational_services_funds_spent' => 'double',
        'supplemental_educational_services_per_pupil_expenditure' => 'double'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'fiscal_year' => false,
        'innovative_dollars_spent' => true,
        'innovative_dollars_spent_strategic_priorities' => true,
        'innovative_programs_funds_received' => true,
        'school_improvement_allocation' => true,
        'school_improvement_reserved_funds_percentage' => true,
        'state_assessment_administration_funding' => true,
        'supplemental_educational_services_funds_spent' => true,
        'supplemental_educational_services_per_pupil_expenditure' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'fiscal_year' => 'fiscalYear',
        'innovative_dollars_spent' => 'innovativeDollarsSpent',
        'innovative_dollars_spent_strategic_priorities' => 'innovativeDollarsSpentStrategicPriorities',
        'innovative_programs_funds_received' => 'innovativeProgramsFundsReceived',
        'school_improvement_allocation' => 'schoolImprovementAllocation',
        'school_improvement_reserved_funds_percentage' => 'schoolImprovementReservedFundsPercentage',
        'state_assessment_administration_funding' => 'stateAssessmentAdministrationFunding',
        'supplemental_educational_services_funds_spent' => 'supplementalEducationalServicesFundsSpent',
        'supplemental_educational_services_per_pupil_expenditure' => 'supplementalEducationalServicesPerPupilExpenditure'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'fiscal_year' => 'setFiscalYear',
        'innovative_dollars_spent' => 'setInnovativeDollarsSpent',
        'innovative_dollars_spent_strategic_priorities' => 'setInnovativeDollarsSpentStrategicPriorities',
        'innovative_programs_funds_received' => 'setInnovativeProgramsFundsReceived',
        'school_improvement_allocation' => 'setSchoolImprovementAllocation',
        'school_improvement_reserved_funds_percentage' => 'setSchoolImprovementReservedFundsPercentage',
        'state_assessment_administration_funding' => 'setStateAssessmentAdministrationFunding',
        'supplemental_educational_services_funds_spent' => 'setSupplementalEducationalServicesFundsSpent',
        'supplemental_educational_services_per_pupil_expenditure' => 'setSupplementalEducationalServicesPerPupilExpenditure'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'fiscal_year' => 'getFiscalYear',
        'innovative_dollars_spent' => 'getInnovativeDollarsSpent',
        'innovative_dollars_spent_strategic_priorities' => 'getInnovativeDollarsSpentStrategicPriorities',
        'innovative_programs_funds_received' => 'getInnovativeProgramsFundsReceived',
        'school_improvement_allocation' => 'getSchoolImprovementAllocation',
        'school_improvement_reserved_funds_percentage' => 'getSchoolImprovementReservedFundsPercentage',
        'state_assessment_administration_funding' => 'getStateAssessmentAdministrationFunding',
        'supplemental_educational_services_funds_spent' => 'getSupplementalEducationalServicesFundsSpent',
        'supplemental_educational_services_per_pupil_expenditure' => 'getSupplementalEducationalServicesPerPupilExpenditure'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('fiscal_year', $data ?? [], null);
        $this->setIfExists('innovative_dollars_spent', $data ?? [], null);
        $this->setIfExists('innovative_dollars_spent_strategic_priorities', $data ?? [], null);
        $this->setIfExists('innovative_programs_funds_received', $data ?? [], null);
        $this->setIfExists('school_improvement_allocation', $data ?? [], null);
        $this->setIfExists('school_improvement_reserved_funds_percentage', $data ?? [], null);
        $this->setIfExists('state_assessment_administration_funding', $data ?? [], null);
        $this->setIfExists('supplemental_educational_services_funds_spent', $data ?? [], null);
        $this->setIfExists('supplemental_educational_services_per_pupil_expenditure', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['fiscal_year'] === null) {
            $invalidProperties[] = "'fiscal_year' can't be null";
        }
        if (!is_null($this->container['innovative_dollars_spent']) && ($this->container['innovative_dollars_spent'] > 922337203685477.6)) {
            $invalidProperties[] = "invalid value for 'innovative_dollars_spent', must be smaller than or equal to 922337203685477.6.";
        }

        if (!is_null($this->container['innovative_dollars_spent']) && ($this->container['innovative_dollars_spent'] < -922337203685477.6)) {
            $invalidProperties[] = "invalid value for 'innovative_dollars_spent', must be bigger than or equal to -922337203685477.6.";
        }

        if (!is_null($this->container['innovative_dollars_spent_strategic_priorities']) && ($this->container['innovative_dollars_spent_strategic_priorities'] > 922337203685477.6)) {
            $invalidProperties[] = "invalid value for 'innovative_dollars_spent_strategic_priorities', must be smaller than or equal to 922337203685477.6.";
        }

        if (!is_null($this->container['innovative_dollars_spent_strategic_priorities']) && ($this->container['innovative_dollars_spent_strategic_priorities'] < -922337203685477.6)) {
            $invalidProperties[] = "invalid value for 'innovative_dollars_spent_strategic_priorities', must be bigger than or equal to -922337203685477.6.";
        }

        if (!is_null($this->container['innovative_programs_funds_received']) && ($this->container['innovative_programs_funds_received'] > 922337203685477.6)) {
            $invalidProperties[] = "invalid value for 'innovative_programs_funds_received', must be smaller than or equal to 922337203685477.6.";
        }

        if (!is_null($this->container['innovative_programs_funds_received']) && ($this->container['innovative_programs_funds_received'] < -922337203685477.6)) {
            $invalidProperties[] = "invalid value for 'innovative_programs_funds_received', must be bigger than or equal to -922337203685477.6.";
        }

        if (!is_null($this->container['school_improvement_allocation']) && ($this->container['school_improvement_allocation'] > 922337203685477.6)) {
            $invalidProperties[] = "invalid value for 'school_improvement_allocation', must be smaller than or equal to 922337203685477.6.";
        }

        if (!is_null($this->container['school_improvement_allocation']) && ($this->container['school_improvement_allocation'] < -922337203685477.6)) {
            $invalidProperties[] = "invalid value for 'school_improvement_allocation', must be bigger than or equal to -922337203685477.6.";
        }

        if (!is_null($this->container['school_improvement_reserved_funds_percentage']) && ($this->container['school_improvement_reserved_funds_percentage'] > 9.9999)) {
            $invalidProperties[] = "invalid value for 'school_improvement_reserved_funds_percentage', must be smaller than or equal to 9.9999.";
        }

        if (!is_null($this->container['school_improvement_reserved_funds_percentage']) && ($this->container['school_improvement_reserved_funds_percentage'] < -9.9999)) {
            $invalidProperties[] = "invalid value for 'school_improvement_reserved_funds_percentage', must be bigger than or equal to -9.9999.";
        }

        if (!is_null($this->container['state_assessment_administration_funding']) && ($this->container['state_assessment_administration_funding'] > 9.9999)) {
            $invalidProperties[] = "invalid value for 'state_assessment_administration_funding', must be smaller than or equal to 9.9999.";
        }

        if (!is_null($this->container['state_assessment_administration_funding']) && ($this->container['state_assessment_administration_funding'] < -9.9999)) {
            $invalidProperties[] = "invalid value for 'state_assessment_administration_funding', must be bigger than or equal to -9.9999.";
        }

        if (!is_null($this->container['supplemental_educational_services_funds_spent']) && ($this->container['supplemental_educational_services_funds_spent'] > 922337203685477.6)) {
            $invalidProperties[] = "invalid value for 'supplemental_educational_services_funds_spent', must be smaller than or equal to 922337203685477.6.";
        }

        if (!is_null($this->container['supplemental_educational_services_funds_spent']) && ($this->container['supplemental_educational_services_funds_spent'] < -922337203685477.6)) {
            $invalidProperties[] = "invalid value for 'supplemental_educational_services_funds_spent', must be bigger than or equal to -922337203685477.6.";
        }

        if (!is_null($this->container['supplemental_educational_services_per_pupil_expenditure']) && ($this->container['supplemental_educational_services_per_pupil_expenditure'] > 922337203685477.6)) {
            $invalidProperties[] = "invalid value for 'supplemental_educational_services_per_pupil_expenditure', must be smaller than or equal to 922337203685477.6.";
        }

        if (!is_null($this->container['supplemental_educational_services_per_pupil_expenditure']) && ($this->container['supplemental_educational_services_per_pupil_expenditure'] < -922337203685477.6)) {
            $invalidProperties[] = "invalid value for 'supplemental_educational_services_per_pupil_expenditure', must be bigger than or equal to -922337203685477.6.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets fiscal_year
     *
     * @return int
     */
    public function getFiscalYear()
    {
        return $this->container['fiscal_year'];
    }

    /**
     * Sets fiscal_year
     *
     * @param int $fiscal_year The fiscal year for which the federal funds are received.
     *
     * @return self
     */
    public function setFiscalYear($fiscal_year)
    {
        if (is_null($fiscal_year)) {
            throw new \InvalidArgumentException('non-nullable fiscal_year cannot be null');
        }
        $this->container['fiscal_year'] = $fiscal_year;

        return $this;
    }

    /**
     * Gets innovative_dollars_spent
     *
     * @return float|null
     */
    public function getInnovativeDollarsSpent()
    {
        return $this->container['innovative_dollars_spent'];
    }

    /**
     * Sets innovative_dollars_spent
     *
     * @param float|null $innovative_dollars_spent The total Title V, Part A funds expended by LEAs.
     *
     * @return self
     */
    public function setInnovativeDollarsSpent($innovative_dollars_spent)
    {
        if (is_null($innovative_dollars_spent)) {
            array_push($this->openAPINullablesSetToNull, 'innovative_dollars_spent');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('innovative_dollars_spent', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($innovative_dollars_spent) && ($innovative_dollars_spent > 922337203685477.6)) {
            throw new \InvalidArgumentException('invalid value for $innovative_dollars_spent when calling EdFiLocalEducationAgencyFederalFunds., must be smaller than or equal to 922337203685477.6.');
        }
        if (!is_null($innovative_dollars_spent) && ($innovative_dollars_spent < -922337203685477.6)) {
            throw new \InvalidArgumentException('invalid value for $innovative_dollars_spent when calling EdFiLocalEducationAgencyFederalFunds., must be bigger than or equal to -922337203685477.6.');
        }

        $this->container['innovative_dollars_spent'] = $innovative_dollars_spent;

        return $this;
    }

    /**
     * Gets innovative_dollars_spent_strategic_priorities
     *
     * @return float|null
     */
    public function getInnovativeDollarsSpentStrategicPriorities()
    {
        return $this->container['innovative_dollars_spent_strategic_priorities'];
    }

    /**
     * Sets innovative_dollars_spent_strategic_priorities
     *
     * @param float|null $innovative_dollars_spent_strategic_priorities The total amount of Title V, Part A funds expended by LEAs for the four strategic priorities.
     *
     * @return self
     */
    public function setInnovativeDollarsSpentStrategicPriorities($innovative_dollars_spent_strategic_priorities)
    {
        if (is_null($innovative_dollars_spent_strategic_priorities)) {
            array_push($this->openAPINullablesSetToNull, 'innovative_dollars_spent_strategic_priorities');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('innovative_dollars_spent_strategic_priorities', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($innovative_dollars_spent_strategic_priorities) && ($innovative_dollars_spent_strategic_priorities > 922337203685477.6)) {
            throw new \InvalidArgumentException('invalid value for $innovative_dollars_spent_strategic_priorities when calling EdFiLocalEducationAgencyFederalFunds., must be smaller than or equal to 922337203685477.6.');
        }
        if (!is_null($innovative_dollars_spent_strategic_priorities) && ($innovative_dollars_spent_strategic_priorities < -922337203685477.6)) {
            throw new \InvalidArgumentException('invalid value for $innovative_dollars_spent_strategic_priorities when calling EdFiLocalEducationAgencyFederalFunds., must be bigger than or equal to -922337203685477.6.');
        }

        $this->container['innovative_dollars_spent_strategic_priorities'] = $innovative_dollars_spent_strategic_priorities;

        return $this;
    }

    /**
     * Gets innovative_programs_funds_received
     *
     * @return float|null
     */
    public function getInnovativeProgramsFundsReceived()
    {
        return $this->container['innovative_programs_funds_received'];
    }

    /**
     * Sets innovative_programs_funds_received
     *
     * @param float|null $innovative_programs_funds_received The total Title V, Part A funds received by LEAs.
     *
     * @return self
     */
    public function setInnovativeProgramsFundsReceived($innovative_programs_funds_received)
    {
        if (is_null($innovative_programs_funds_received)) {
            array_push($this->openAPINullablesSetToNull, 'innovative_programs_funds_received');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('innovative_programs_funds_received', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($innovative_programs_funds_received) && ($innovative_programs_funds_received > 922337203685477.6)) {
            throw new \InvalidArgumentException('invalid value for $innovative_programs_funds_received when calling EdFiLocalEducationAgencyFederalFunds., must be smaller than or equal to 922337203685477.6.');
        }
        if (!is_null($innovative_programs_funds_received) && ($innovative_programs_funds_received < -922337203685477.6)) {
            throw new \InvalidArgumentException('invalid value for $innovative_programs_funds_received when calling EdFiLocalEducationAgencyFederalFunds., must be bigger than or equal to -922337203685477.6.');
        }

        $this->container['innovative_programs_funds_received'] = $innovative_programs_funds_received;

        return $this;
    }

    /**
     * Gets school_improvement_allocation
     *
     * @return float|null
     */
    public function getSchoolImprovementAllocation()
    {
        return $this->container['school_improvement_allocation'];
    }

    /**
     * Sets school_improvement_allocation
     *
     * @param float|null $school_improvement_allocation The amount of Section 1003(a) and 1003(g) allocations to LEAs.
     *
     * @return self
     */
    public function setSchoolImprovementAllocation($school_improvement_allocation)
    {
        if (is_null($school_improvement_allocation)) {
            array_push($this->openAPINullablesSetToNull, 'school_improvement_allocation');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('school_improvement_allocation', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($school_improvement_allocation) && ($school_improvement_allocation > 922337203685477.6)) {
            throw new \InvalidArgumentException('invalid value for $school_improvement_allocation when calling EdFiLocalEducationAgencyFederalFunds., must be smaller than or equal to 922337203685477.6.');
        }
        if (!is_null($school_improvement_allocation) && ($school_improvement_allocation < -922337203685477.6)) {
            throw new \InvalidArgumentException('invalid value for $school_improvement_allocation when calling EdFiLocalEducationAgencyFederalFunds., must be bigger than or equal to -922337203685477.6.');
        }

        $this->container['school_improvement_allocation'] = $school_improvement_allocation;

        return $this;
    }

    /**
     * Gets school_improvement_reserved_funds_percentage
     *
     * @return float|null
     */
    public function getSchoolImprovementReservedFundsPercentage()
    {
        return $this->container['school_improvement_reserved_funds_percentage'];
    }

    /**
     * Sets school_improvement_reserved_funds_percentage
     *
     * @param float|null $school_improvement_reserved_funds_percentage An indication of the percentage of the Title I, Part A allocation that the SEA reserved in accordance with Section 1003(a) of ESEA and 200.100(a) of ED's regulations governing the reservation of funds for school improvement under Section 1003(a) of ESEA.
     *
     * @return self
     */
    public function setSchoolImprovementReservedFundsPercentage($school_improvement_reserved_funds_percentage)
    {
        if (is_null($school_improvement_reserved_funds_percentage)) {
            array_push($this->openAPINullablesSetToNull, 'school_improvement_reserved_funds_percentage');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('school_improvement_reserved_funds_percentage', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($school_improvement_reserved_funds_percentage) && ($school_improvement_reserved_funds_percentage > 9.9999)) {
            throw new \InvalidArgumentException('invalid value for $school_improvement_reserved_funds_percentage when calling EdFiLocalEducationAgencyFederalFunds., must be smaller than or equal to 9.9999.');
        }
        if (!is_null($school_improvement_reserved_funds_percentage) && ($school_improvement_reserved_funds_percentage < -9.9999)) {
            throw new \InvalidArgumentException('invalid value for $school_improvement_reserved_funds_percentage when calling EdFiLocalEducationAgencyFederalFunds., must be bigger than or equal to -9.9999.');
        }

        $this->container['school_improvement_reserved_funds_percentage'] = $school_improvement_reserved_funds_percentage;

        return $this;
    }

    /**
     * Gets state_assessment_administration_funding
     *
     * @return float|null
     */
    public function getStateAssessmentAdministrationFunding()
    {
        return $this->container['state_assessment_administration_funding'];
    }

    /**
     * Sets state_assessment_administration_funding
     *
     * @param float|null $state_assessment_administration_funding The percentage of funds used to administer assessments required by Section 1111(b) or to carry out other activities described in Section 6111 and other activities related to ensuring that the state's schools and LEAs are held accountable for results.
     *
     * @return self
     */
    public function setStateAssessmentAdministrationFunding($state_assessment_administration_funding)
    {
        if (is_null($state_assessment_administration_funding)) {
            array_push($this->openAPINullablesSetToNull, 'state_assessment_administration_funding');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('state_assessment_administration_funding', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($state_assessment_administration_funding) && ($state_assessment_administration_funding > 9.9999)) {
            throw new \InvalidArgumentException('invalid value for $state_assessment_administration_funding when calling EdFiLocalEducationAgencyFederalFunds., must be smaller than or equal to 9.9999.');
        }
        if (!is_null($state_assessment_administration_funding) && ($state_assessment_administration_funding < -9.9999)) {
            throw new \InvalidArgumentException('invalid value for $state_assessment_administration_funding when calling EdFiLocalEducationAgencyFederalFunds., must be bigger than or equal to -9.9999.');
        }

        $this->container['state_assessment_administration_funding'] = $state_assessment_administration_funding;

        return $this;
    }

    /**
     * Gets supplemental_educational_services_funds_spent
     *
     * @return float|null
     */
    public function getSupplementalEducationalServicesFundsSpent()
    {
        return $this->container['supplemental_educational_services_funds_spent'];
    }

    /**
     * Sets supplemental_educational_services_funds_spent
     *
     * @param float|null $supplemental_educational_services_funds_spent The dollar amount spent on supplemental educational services during the school year under Title I, Part A, Section 1116 of ESEA as amended.
     *
     * @return self
     */
    public function setSupplementalEducationalServicesFundsSpent($supplemental_educational_services_funds_spent)
    {
        if (is_null($supplemental_educational_services_funds_spent)) {
            array_push($this->openAPINullablesSetToNull, 'supplemental_educational_services_funds_spent');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('supplemental_educational_services_funds_spent', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($supplemental_educational_services_funds_spent) && ($supplemental_educational_services_funds_spent > 922337203685477.6)) {
            throw new \InvalidArgumentException('invalid value for $supplemental_educational_services_funds_spent when calling EdFiLocalEducationAgencyFederalFunds., must be smaller than or equal to 922337203685477.6.');
        }
        if (!is_null($supplemental_educational_services_funds_spent) && ($supplemental_educational_services_funds_spent < -922337203685477.6)) {
            throw new \InvalidArgumentException('invalid value for $supplemental_educational_services_funds_spent when calling EdFiLocalEducationAgencyFederalFunds., must be bigger than or equal to -922337203685477.6.');
        }

        $this->container['supplemental_educational_services_funds_spent'] = $supplemental_educational_services_funds_spent;

        return $this;
    }

    /**
     * Gets supplemental_educational_services_per_pupil_expenditure
     *
     * @return float|null
     */
    public function getSupplementalEducationalServicesPerPupilExpenditure()
    {
        return $this->container['supplemental_educational_services_per_pupil_expenditure'];
    }

    /**
     * Sets supplemental_educational_services_per_pupil_expenditure
     *
     * @param float|null $supplemental_educational_services_per_pupil_expenditure The maximum dollar amount that may be spent per child for expenditures related to supplemental educational services under Title I of the ESEA.
     *
     * @return self
     */
    public function setSupplementalEducationalServicesPerPupilExpenditure($supplemental_educational_services_per_pupil_expenditure)
    {
        if (is_null($supplemental_educational_services_per_pupil_expenditure)) {
            array_push($this->openAPINullablesSetToNull, 'supplemental_educational_services_per_pupil_expenditure');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('supplemental_educational_services_per_pupil_expenditure', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($supplemental_educational_services_per_pupil_expenditure) && ($supplemental_educational_services_per_pupil_expenditure > 922337203685477.6)) {
            throw new \InvalidArgumentException('invalid value for $supplemental_educational_services_per_pupil_expenditure when calling EdFiLocalEducationAgencyFederalFunds., must be smaller than or equal to 922337203685477.6.');
        }
        if (!is_null($supplemental_educational_services_per_pupil_expenditure) && ($supplemental_educational_services_per_pupil_expenditure < -922337203685477.6)) {
            throw new \InvalidArgumentException('invalid value for $supplemental_educational_services_per_pupil_expenditure when calling EdFiLocalEducationAgencyFederalFunds., must be bigger than or equal to -922337203685477.6.');
        }

        $this->container['supplemental_educational_services_per_pupil_expenditure'] = $supplemental_educational_services_per_pupil_expenditure;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


