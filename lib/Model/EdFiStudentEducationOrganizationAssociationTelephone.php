<?php
/**
 * EdFiStudentEducationOrganizationAssociationTelephone
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Resources
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Resources\Model;

use \ArrayAccess;
use \Resources\ObjectSerializer;

/**
 * EdFiStudentEducationOrganizationAssociationTelephone Class Doc Comment
 *
 * @category Class
 * @package  Resources
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EdFiStudentEducationOrganizationAssociationTelephone implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'edFi_studentEducationOrganizationAssociationTelephone';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'telephone_number_type_descriptor' => 'string',
        'telephone_number' => 'string',
        'do_not_publish_indicator' => 'bool',
        'order_of_priority' => 'int',
        'text_message_capability_indicator' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'telephone_number_type_descriptor' => null,
        'telephone_number' => null,
        'do_not_publish_indicator' => null,
        'order_of_priority' => 'int32',
        'text_message_capability_indicator' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'telephone_number_type_descriptor' => false,
        'telephone_number' => false,
        'do_not_publish_indicator' => true,
        'order_of_priority' => true,
        'text_message_capability_indicator' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'telephone_number_type_descriptor' => 'telephoneNumberTypeDescriptor',
        'telephone_number' => 'telephoneNumber',
        'do_not_publish_indicator' => 'doNotPublishIndicator',
        'order_of_priority' => 'orderOfPriority',
        'text_message_capability_indicator' => 'textMessageCapabilityIndicator'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'telephone_number_type_descriptor' => 'setTelephoneNumberTypeDescriptor',
        'telephone_number' => 'setTelephoneNumber',
        'do_not_publish_indicator' => 'setDoNotPublishIndicator',
        'order_of_priority' => 'setOrderOfPriority',
        'text_message_capability_indicator' => 'setTextMessageCapabilityIndicator'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'telephone_number_type_descriptor' => 'getTelephoneNumberTypeDescriptor',
        'telephone_number' => 'getTelephoneNumber',
        'do_not_publish_indicator' => 'getDoNotPublishIndicator',
        'order_of_priority' => 'getOrderOfPriority',
        'text_message_capability_indicator' => 'getTextMessageCapabilityIndicator'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('telephone_number_type_descriptor', $data ?? [], null);
        $this->setIfExists('telephone_number', $data ?? [], null);
        $this->setIfExists('do_not_publish_indicator', $data ?? [], null);
        $this->setIfExists('order_of_priority', $data ?? [], null);
        $this->setIfExists('text_message_capability_indicator', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['telephone_number_type_descriptor'] === null) {
            $invalidProperties[] = "'telephone_number_type_descriptor' can't be null";
        }
        if ((mb_strlen($this->container['telephone_number_type_descriptor']) > 306)) {
            $invalidProperties[] = "invalid value for 'telephone_number_type_descriptor', the character length must be smaller than or equal to 306.";
        }

        if ($this->container['telephone_number'] === null) {
            $invalidProperties[] = "'telephone_number' can't be null";
        }
        if ((mb_strlen($this->container['telephone_number']) > 24)) {
            $invalidProperties[] = "invalid value for 'telephone_number', the character length must be smaller than or equal to 24.";
        }

        if (!is_null($this->container['order_of_priority']) && ($this->container['order_of_priority'] < 1)) {
            $invalidProperties[] = "invalid value for 'order_of_priority', must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets telephone_number_type_descriptor
     *
     * @return string
     */
    public function getTelephoneNumberTypeDescriptor()
    {
        return $this->container['telephone_number_type_descriptor'];
    }

    /**
     * Sets telephone_number_type_descriptor
     *
     * @param string $telephone_number_type_descriptor The type of communication number listed for an individual or organization.
     *
     * @return self
     */
    public function setTelephoneNumberTypeDescriptor($telephone_number_type_descriptor)
    {
        if (is_null($telephone_number_type_descriptor)) {
            throw new \InvalidArgumentException('non-nullable telephone_number_type_descriptor cannot be null');
        }
        if ((mb_strlen($telephone_number_type_descriptor) > 306)) {
            throw new \InvalidArgumentException('invalid length for $telephone_number_type_descriptor when calling EdFiStudentEducationOrganizationAssociationTelephone., must be smaller than or equal to 306.');
        }

        $this->container['telephone_number_type_descriptor'] = $telephone_number_type_descriptor;

        return $this;
    }

    /**
     * Gets telephone_number
     *
     * @return string
     */
    public function getTelephoneNumber()
    {
        return $this->container['telephone_number'];
    }

    /**
     * Sets telephone_number
     *
     * @param string $telephone_number The telephone number including the area code, and extension, if applicable.
     *
     * @return self
     */
    public function setTelephoneNumber($telephone_number)
    {
        if (is_null($telephone_number)) {
            throw new \InvalidArgumentException('non-nullable telephone_number cannot be null');
        }
        if ((mb_strlen($telephone_number) > 24)) {
            throw new \InvalidArgumentException('invalid length for $telephone_number when calling EdFiStudentEducationOrganizationAssociationTelephone., must be smaller than or equal to 24.');
        }

        $this->container['telephone_number'] = $telephone_number;

        return $this;
    }

    /**
     * Gets do_not_publish_indicator
     *
     * @return bool|null
     */
    public function getDoNotPublishIndicator()
    {
        return $this->container['do_not_publish_indicator'];
    }

    /**
     * Sets do_not_publish_indicator
     *
     * @param bool|null $do_not_publish_indicator An indication that the telephone number should not be published.
     *
     * @return self
     */
    public function setDoNotPublishIndicator($do_not_publish_indicator)
    {
        if (is_null($do_not_publish_indicator)) {
            array_push($this->openAPINullablesSetToNull, 'do_not_publish_indicator');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('do_not_publish_indicator', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['do_not_publish_indicator'] = $do_not_publish_indicator;

        return $this;
    }

    /**
     * Gets order_of_priority
     *
     * @return int|null
     */
    public function getOrderOfPriority()
    {
        return $this->container['order_of_priority'];
    }

    /**
     * Sets order_of_priority
     *
     * @param int|null $order_of_priority The order of priority assigned to telephone numbers to define which number to attempt first, second, etc.
     *
     * @return self
     */
    public function setOrderOfPriority($order_of_priority)
    {
        if (is_null($order_of_priority)) {
            array_push($this->openAPINullablesSetToNull, 'order_of_priority');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('order_of_priority', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($order_of_priority) && ($order_of_priority < 1)) {
            throw new \InvalidArgumentException('invalid value for $order_of_priority when calling EdFiStudentEducationOrganizationAssociationTelephone., must be bigger than or equal to 1.');
        }

        $this->container['order_of_priority'] = $order_of_priority;

        return $this;
    }

    /**
     * Gets text_message_capability_indicator
     *
     * @return bool|null
     */
    public function getTextMessageCapabilityIndicator()
    {
        return $this->container['text_message_capability_indicator'];
    }

    /**
     * Sets text_message_capability_indicator
     *
     * @param bool|null $text_message_capability_indicator An indication that the telephone number is technically capable of sending and receiving Short Message Service (SMS) text messages.
     *
     * @return self
     */
    public function setTextMessageCapabilityIndicator($text_message_capability_indicator)
    {
        if (is_null($text_message_capability_indicator)) {
            array_push($this->openAPINullablesSetToNull, 'text_message_capability_indicator');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('text_message_capability_indicator', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['text_message_capability_indicator'] = $text_message_capability_indicator;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


