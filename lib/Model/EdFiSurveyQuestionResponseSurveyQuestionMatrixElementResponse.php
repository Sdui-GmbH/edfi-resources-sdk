<?php
/**
 * EdFiSurveyQuestionResponseSurveyQuestionMatrixElementResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Resources
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Resources\Model;

use \ArrayAccess;
use \Resources\ObjectSerializer;

/**
 * EdFiSurveyQuestionResponseSurveyQuestionMatrixElementResponse Class Doc Comment
 *
 * @category Class
 * @package  Resources
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EdFiSurveyQuestionResponseSurveyQuestionMatrixElementResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'edFi_surveyQuestionResponseSurveyQuestionMatrixElementResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'matrix_element' => 'string',
        'max_numeric_response' => 'int',
        'min_numeric_response' => 'int',
        'no_response' => 'bool',
        'numeric_response' => 'int',
        'text_response' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'matrix_element' => null,
        'max_numeric_response' => 'int32',
        'min_numeric_response' => 'int32',
        'no_response' => null,
        'numeric_response' => 'int32',
        'text_response' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'matrix_element' => false,
        'max_numeric_response' => true,
        'min_numeric_response' => true,
        'no_response' => true,
        'numeric_response' => true,
        'text_response' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'matrix_element' => 'matrixElement',
        'max_numeric_response' => 'maxNumericResponse',
        'min_numeric_response' => 'minNumericResponse',
        'no_response' => 'noResponse',
        'numeric_response' => 'numericResponse',
        'text_response' => 'textResponse'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'matrix_element' => 'setMatrixElement',
        'max_numeric_response' => 'setMaxNumericResponse',
        'min_numeric_response' => 'setMinNumericResponse',
        'no_response' => 'setNoResponse',
        'numeric_response' => 'setNumericResponse',
        'text_response' => 'setTextResponse'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'matrix_element' => 'getMatrixElement',
        'max_numeric_response' => 'getMaxNumericResponse',
        'min_numeric_response' => 'getMinNumericResponse',
        'no_response' => 'getNoResponse',
        'numeric_response' => 'getNumericResponse',
        'text_response' => 'getTextResponse'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('matrix_element', $data ?? [], null);
        $this->setIfExists('max_numeric_response', $data ?? [], null);
        $this->setIfExists('min_numeric_response', $data ?? [], null);
        $this->setIfExists('no_response', $data ?? [], null);
        $this->setIfExists('numeric_response', $data ?? [], null);
        $this->setIfExists('text_response', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['matrix_element'] === null) {
            $invalidProperties[] = "'matrix_element' can't be null";
        }
        if ((mb_strlen($this->container['matrix_element']) > 255)) {
            $invalidProperties[] = "invalid value for 'matrix_element', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['numeric_response']) && ($this->container['numeric_response'] > 100)) {
            $invalidProperties[] = "invalid value for 'numeric_response', must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['numeric_response']) && ($this->container['numeric_response'] < 0)) {
            $invalidProperties[] = "invalid value for 'numeric_response', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['text_response']) && (mb_strlen($this->container['text_response']) > 2048)) {
            $invalidProperties[] = "invalid value for 'text_response', the character length must be smaller than or equal to 2048.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets matrix_element
     *
     * @return string
     */
    public function getMatrixElement()
    {
        return $this->container['matrix_element'];
    }

    /**
     * Sets matrix_element
     *
     * @param string $matrix_element For matrix questions, the text identifying each row of the matrix.
     *
     * @return self
     */
    public function setMatrixElement($matrix_element)
    {
        if (is_null($matrix_element)) {
            throw new \InvalidArgumentException('non-nullable matrix_element cannot be null');
        }
        if ((mb_strlen($matrix_element) > 255)) {
            throw new \InvalidArgumentException('invalid length for $matrix_element when calling EdFiSurveyQuestionResponseSurveyQuestionMatrixElementResponse., must be smaller than or equal to 255.');
        }

        $this->container['matrix_element'] = $matrix_element;

        return $this;
    }

    /**
     * Gets max_numeric_response
     *
     * @return int|null
     */
    public function getMaxNumericResponse()
    {
        return $this->container['max_numeric_response'];
    }

    /**
     * Sets max_numeric_response
     *
     * @param int|null $max_numeric_response The maximum score response to the question.
     *
     * @return self
     */
    public function setMaxNumericResponse($max_numeric_response)
    {
        if (is_null($max_numeric_response)) {
            array_push($this->openAPINullablesSetToNull, 'max_numeric_response');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_numeric_response', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_numeric_response'] = $max_numeric_response;

        return $this;
    }

    /**
     * Gets min_numeric_response
     *
     * @return int|null
     */
    public function getMinNumericResponse()
    {
        return $this->container['min_numeric_response'];
    }

    /**
     * Sets min_numeric_response
     *
     * @param int|null $min_numeric_response The minimum score response to the question.
     *
     * @return self
     */
    public function setMinNumericResponse($min_numeric_response)
    {
        if (is_null($min_numeric_response)) {
            array_push($this->openAPINullablesSetToNull, 'min_numeric_response');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('min_numeric_response', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['min_numeric_response'] = $min_numeric_response;

        return $this;
    }

    /**
     * Gets no_response
     *
     * @return bool|null
     */
    public function getNoResponse()
    {
        return $this->container['no_response'];
    }

    /**
     * Sets no_response
     *
     * @param bool|null $no_response Indicates there was no response to the question.
     *
     * @return self
     */
    public function setNoResponse($no_response)
    {
        if (is_null($no_response)) {
            array_push($this->openAPINullablesSetToNull, 'no_response');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('no_response', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['no_response'] = $no_response;

        return $this;
    }

    /**
     * Gets numeric_response
     *
     * @return int|null
     */
    public function getNumericResponse()
    {
        return $this->container['numeric_response'];
    }

    /**
     * Sets numeric_response
     *
     * @param int|null $numeric_response The numeric response to the question.
     *
     * @return self
     */
    public function setNumericResponse($numeric_response)
    {
        if (is_null($numeric_response)) {
            array_push($this->openAPINullablesSetToNull, 'numeric_response');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('numeric_response', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($numeric_response) && ($numeric_response > 100)) {
            throw new \InvalidArgumentException('invalid value for $numeric_response when calling EdFiSurveyQuestionResponseSurveyQuestionMatrixElementResponse., must be smaller than or equal to 100.');
        }
        if (!is_null($numeric_response) && ($numeric_response < 0)) {
            throw new \InvalidArgumentException('invalid value for $numeric_response when calling EdFiSurveyQuestionResponseSurveyQuestionMatrixElementResponse., must be bigger than or equal to 0.');
        }

        $this->container['numeric_response'] = $numeric_response;

        return $this;
    }

    /**
     * Gets text_response
     *
     * @return string|null
     */
    public function getTextResponse()
    {
        return $this->container['text_response'];
    }

    /**
     * Sets text_response
     *
     * @param string|null $text_response The text response(s) for the question.
     *
     * @return self
     */
    public function setTextResponse($text_response)
    {
        if (is_null($text_response)) {
            array_push($this->openAPINullablesSetToNull, 'text_response');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('text_response', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($text_response) && (mb_strlen($text_response) > 2048)) {
            throw new \InvalidArgumentException('invalid length for $text_response when calling EdFiSurveyQuestionResponseSurveyQuestionMatrixElementResponse., must be smaller than or equal to 2048.');
        }

        $this->container['text_response'] = $text_response;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


