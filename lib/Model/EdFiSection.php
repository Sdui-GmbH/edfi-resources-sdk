<?php
/**
 * EdFiSection
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * EdFiSection Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EdFiSection implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'edFi_section';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'section_identifier' => 'string',
        'course_offering_reference' => '\OpenAPI\Client\Model\EdFiCourseOfferingReference',
        'location_reference' => '\OpenAPI\Client\Model\EdFiLocationReference',
        'location_school_reference' => '\OpenAPI\Client\Model\EdFiSchoolReference',
        'available_credit_conversion' => 'float',
        'available_credits' => 'float',
        'available_credit_type_descriptor' => 'string',
        'characteristics' => '\OpenAPI\Client\Model\EdFiSectionCharacteristic[]',
        'class_periods' => '\OpenAPI\Client\Model\EdFiSectionClassPeriod[]',
        'course_level_characteristics' => '\OpenAPI\Client\Model\EdFiSectionCourseLevelCharacteristic[]',
        'educational_environment_descriptor' => 'string',
        'instruction_language_descriptor' => 'string',
        'medium_of_instruction_descriptor' => 'string',
        'offered_grade_levels' => '\OpenAPI\Client\Model\EdFiSectionOfferedGradeLevel[]',
        'official_attendance_period' => 'bool',
        'population_served_descriptor' => 'string',
        'programs' => '\OpenAPI\Client\Model\EdFiSectionProgram[]',
        'section_name' => 'string',
        'section_type_descriptor' => 'string',
        'sequence_of_course' => 'int',
        '_etag' => 'string',
        '_last_modified_date' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'section_identifier' => null,
        'course_offering_reference' => null,
        'location_reference' => null,
        'location_school_reference' => null,
        'available_credit_conversion' => 'double',
        'available_credits' => 'double',
        'available_credit_type_descriptor' => null,
        'characteristics' => null,
        'class_periods' => null,
        'course_level_characteristics' => null,
        'educational_environment_descriptor' => null,
        'instruction_language_descriptor' => null,
        'medium_of_instruction_descriptor' => null,
        'offered_grade_levels' => null,
        'official_attendance_period' => null,
        'population_served_descriptor' => null,
        'programs' => null,
        'section_name' => null,
        'section_type_descriptor' => null,
        'sequence_of_course' => 'int32',
        '_etag' => null,
        '_last_modified_date' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'section_identifier' => false,
        'course_offering_reference' => false,
        'location_reference' => false,
        'location_school_reference' => false,
        'available_credit_conversion' => true,
        'available_credits' => true,
        'available_credit_type_descriptor' => true,
        'characteristics' => false,
        'class_periods' => false,
        'course_level_characteristics' => false,
        'educational_environment_descriptor' => true,
        'instruction_language_descriptor' => true,
        'medium_of_instruction_descriptor' => true,
        'offered_grade_levels' => false,
        'official_attendance_period' => true,
        'population_served_descriptor' => true,
        'programs' => false,
        'section_name' => true,
        'section_type_descriptor' => true,
        'sequence_of_course' => true,
        '_etag' => false,
        '_last_modified_date' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'section_identifier' => 'sectionIdentifier',
        'course_offering_reference' => 'courseOfferingReference',
        'location_reference' => 'locationReference',
        'location_school_reference' => 'locationSchoolReference',
        'available_credit_conversion' => 'availableCreditConversion',
        'available_credits' => 'availableCredits',
        'available_credit_type_descriptor' => 'availableCreditTypeDescriptor',
        'characteristics' => 'characteristics',
        'class_periods' => 'classPeriods',
        'course_level_characteristics' => 'courseLevelCharacteristics',
        'educational_environment_descriptor' => 'educationalEnvironmentDescriptor',
        'instruction_language_descriptor' => 'instructionLanguageDescriptor',
        'medium_of_instruction_descriptor' => 'mediumOfInstructionDescriptor',
        'offered_grade_levels' => 'offeredGradeLevels',
        'official_attendance_period' => 'officialAttendancePeriod',
        'population_served_descriptor' => 'populationServedDescriptor',
        'programs' => 'programs',
        'section_name' => 'sectionName',
        'section_type_descriptor' => 'sectionTypeDescriptor',
        'sequence_of_course' => 'sequenceOfCourse',
        '_etag' => '_etag',
        '_last_modified_date' => '_lastModifiedDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'section_identifier' => 'setSectionIdentifier',
        'course_offering_reference' => 'setCourseOfferingReference',
        'location_reference' => 'setLocationReference',
        'location_school_reference' => 'setLocationSchoolReference',
        'available_credit_conversion' => 'setAvailableCreditConversion',
        'available_credits' => 'setAvailableCredits',
        'available_credit_type_descriptor' => 'setAvailableCreditTypeDescriptor',
        'characteristics' => 'setCharacteristics',
        'class_periods' => 'setClassPeriods',
        'course_level_characteristics' => 'setCourseLevelCharacteristics',
        'educational_environment_descriptor' => 'setEducationalEnvironmentDescriptor',
        'instruction_language_descriptor' => 'setInstructionLanguageDescriptor',
        'medium_of_instruction_descriptor' => 'setMediumOfInstructionDescriptor',
        'offered_grade_levels' => 'setOfferedGradeLevels',
        'official_attendance_period' => 'setOfficialAttendancePeriod',
        'population_served_descriptor' => 'setPopulationServedDescriptor',
        'programs' => 'setPrograms',
        'section_name' => 'setSectionName',
        'section_type_descriptor' => 'setSectionTypeDescriptor',
        'sequence_of_course' => 'setSequenceOfCourse',
        '_etag' => 'setEtag',
        '_last_modified_date' => 'setLastModifiedDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'section_identifier' => 'getSectionIdentifier',
        'course_offering_reference' => 'getCourseOfferingReference',
        'location_reference' => 'getLocationReference',
        'location_school_reference' => 'getLocationSchoolReference',
        'available_credit_conversion' => 'getAvailableCreditConversion',
        'available_credits' => 'getAvailableCredits',
        'available_credit_type_descriptor' => 'getAvailableCreditTypeDescriptor',
        'characteristics' => 'getCharacteristics',
        'class_periods' => 'getClassPeriods',
        'course_level_characteristics' => 'getCourseLevelCharacteristics',
        'educational_environment_descriptor' => 'getEducationalEnvironmentDescriptor',
        'instruction_language_descriptor' => 'getInstructionLanguageDescriptor',
        'medium_of_instruction_descriptor' => 'getMediumOfInstructionDescriptor',
        'offered_grade_levels' => 'getOfferedGradeLevels',
        'official_attendance_period' => 'getOfficialAttendancePeriod',
        'population_served_descriptor' => 'getPopulationServedDescriptor',
        'programs' => 'getPrograms',
        'section_name' => 'getSectionName',
        'section_type_descriptor' => 'getSectionTypeDescriptor',
        'sequence_of_course' => 'getSequenceOfCourse',
        '_etag' => 'getEtag',
        '_last_modified_date' => 'getLastModifiedDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('section_identifier', $data ?? [], null);
        $this->setIfExists('course_offering_reference', $data ?? [], null);
        $this->setIfExists('location_reference', $data ?? [], null);
        $this->setIfExists('location_school_reference', $data ?? [], null);
        $this->setIfExists('available_credit_conversion', $data ?? [], null);
        $this->setIfExists('available_credits', $data ?? [], null);
        $this->setIfExists('available_credit_type_descriptor', $data ?? [], null);
        $this->setIfExists('characteristics', $data ?? [], null);
        $this->setIfExists('class_periods', $data ?? [], null);
        $this->setIfExists('course_level_characteristics', $data ?? [], null);
        $this->setIfExists('educational_environment_descriptor', $data ?? [], null);
        $this->setIfExists('instruction_language_descriptor', $data ?? [], null);
        $this->setIfExists('medium_of_instruction_descriptor', $data ?? [], null);
        $this->setIfExists('offered_grade_levels', $data ?? [], null);
        $this->setIfExists('official_attendance_period', $data ?? [], null);
        $this->setIfExists('population_served_descriptor', $data ?? [], null);
        $this->setIfExists('programs', $data ?? [], null);
        $this->setIfExists('section_name', $data ?? [], null);
        $this->setIfExists('section_type_descriptor', $data ?? [], null);
        $this->setIfExists('sequence_of_course', $data ?? [], null);
        $this->setIfExists('_etag', $data ?? [], null);
        $this->setIfExists('_last_modified_date', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['section_identifier'] === null) {
            $invalidProperties[] = "'section_identifier' can't be null";
        }
        if ((mb_strlen($this->container['section_identifier']) > 255)) {
            $invalidProperties[] = "invalid value for 'section_identifier', the character length must be smaller than or equal to 255.";
        }

        if ((mb_strlen($this->container['section_identifier']) < 1)) {
            $invalidProperties[] = "invalid value for 'section_identifier', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['course_offering_reference'] === null) {
            $invalidProperties[] = "'course_offering_reference' can't be null";
        }
        if (!is_null($this->container['available_credits']) && ($this->container['available_credits'] < 0.0)) {
            $invalidProperties[] = "invalid value for 'available_credits', must be bigger than or equal to 0.0.";
        }

        if (!is_null($this->container['available_credit_type_descriptor']) && (mb_strlen($this->container['available_credit_type_descriptor']) > 306)) {
            $invalidProperties[] = "invalid value for 'available_credit_type_descriptor', the character length must be smaller than or equal to 306.";
        }

        if (!is_null($this->container['educational_environment_descriptor']) && (mb_strlen($this->container['educational_environment_descriptor']) > 306)) {
            $invalidProperties[] = "invalid value for 'educational_environment_descriptor', the character length must be smaller than or equal to 306.";
        }

        if (!is_null($this->container['instruction_language_descriptor']) && (mb_strlen($this->container['instruction_language_descriptor']) > 306)) {
            $invalidProperties[] = "invalid value for 'instruction_language_descriptor', the character length must be smaller than or equal to 306.";
        }

        if (!is_null($this->container['medium_of_instruction_descriptor']) && (mb_strlen($this->container['medium_of_instruction_descriptor']) > 306)) {
            $invalidProperties[] = "invalid value for 'medium_of_instruction_descriptor', the character length must be smaller than or equal to 306.";
        }

        if (!is_null($this->container['population_served_descriptor']) && (mb_strlen($this->container['population_served_descriptor']) > 306)) {
            $invalidProperties[] = "invalid value for 'population_served_descriptor', the character length must be smaller than or equal to 306.";
        }

        if (!is_null($this->container['section_name']) && (mb_strlen($this->container['section_name']) > 100)) {
            $invalidProperties[] = "invalid value for 'section_name', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['section_name']) && (mb_strlen($this->container['section_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'section_name', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['section_type_descriptor']) && (mb_strlen($this->container['section_type_descriptor']) > 306)) {
            $invalidProperties[] = "invalid value for 'section_type_descriptor', the character length must be smaller than or equal to 306.";
        }

        if (!is_null($this->container['sequence_of_course']) && ($this->container['sequence_of_course'] > 8)) {
            $invalidProperties[] = "invalid value for 'sequence_of_course', must be smaller than or equal to 8.";
        }

        if (!is_null($this->container['sequence_of_course']) && ($this->container['sequence_of_course'] < 1)) {
            $invalidProperties[] = "invalid value for 'sequence_of_course', must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id 
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets section_identifier
     *
     * @return string
     */
    public function getSectionIdentifier()
    {
        return $this->container['section_identifier'];
    }

    /**
     * Sets section_identifier
     *
     * @param string $section_identifier The local identifier assigned to a section.
     *
     * @return self
     */
    public function setSectionIdentifier($section_identifier)
    {
        if (is_null($section_identifier)) {
            throw new \InvalidArgumentException('non-nullable section_identifier cannot be null');
        }
        if ((mb_strlen($section_identifier) > 255)) {
            throw new \InvalidArgumentException('invalid length for $section_identifier when calling EdFiSection., must be smaller than or equal to 255.');
        }
        if ((mb_strlen($section_identifier) < 1)) {
            throw new \InvalidArgumentException('invalid length for $section_identifier when calling EdFiSection., must be bigger than or equal to 1.');
        }

        $this->container['section_identifier'] = $section_identifier;

        return $this;
    }

    /**
     * Gets course_offering_reference
     *
     * @return \OpenAPI\Client\Model\EdFiCourseOfferingReference
     */
    public function getCourseOfferingReference()
    {
        return $this->container['course_offering_reference'];
    }

    /**
     * Sets course_offering_reference
     *
     * @param \OpenAPI\Client\Model\EdFiCourseOfferingReference $course_offering_reference course_offering_reference
     *
     * @return self
     */
    public function setCourseOfferingReference($course_offering_reference)
    {
        if (is_null($course_offering_reference)) {
            throw new \InvalidArgumentException('non-nullable course_offering_reference cannot be null');
        }
        $this->container['course_offering_reference'] = $course_offering_reference;

        return $this;
    }

    /**
     * Gets location_reference
     *
     * @return \OpenAPI\Client\Model\EdFiLocationReference|null
     */
    public function getLocationReference()
    {
        return $this->container['location_reference'];
    }

    /**
     * Sets location_reference
     *
     * @param \OpenAPI\Client\Model\EdFiLocationReference|null $location_reference location_reference
     *
     * @return self
     */
    public function setLocationReference($location_reference)
    {
        if (is_null($location_reference)) {
            throw new \InvalidArgumentException('non-nullable location_reference cannot be null');
        }
        $this->container['location_reference'] = $location_reference;

        return $this;
    }

    /**
     * Gets location_school_reference
     *
     * @return \OpenAPI\Client\Model\EdFiSchoolReference|null
     */
    public function getLocationSchoolReference()
    {
        return $this->container['location_school_reference'];
    }

    /**
     * Sets location_school_reference
     *
     * @param \OpenAPI\Client\Model\EdFiSchoolReference|null $location_school_reference location_school_reference
     *
     * @return self
     */
    public function setLocationSchoolReference($location_school_reference)
    {
        if (is_null($location_school_reference)) {
            throw new \InvalidArgumentException('non-nullable location_school_reference cannot be null');
        }
        $this->container['location_school_reference'] = $location_school_reference;

        return $this;
    }

    /**
     * Gets available_credit_conversion
     *
     * @return float|null
     */
    public function getAvailableCreditConversion()
    {
        return $this->container['available_credit_conversion'];
    }

    /**
     * Sets available_credit_conversion
     *
     * @param float|null $available_credit_conversion Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.
     *
     * @return self
     */
    public function setAvailableCreditConversion($available_credit_conversion)
    {
        if (is_null($available_credit_conversion)) {
            array_push($this->openAPINullablesSetToNull, 'available_credit_conversion');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('available_credit_conversion', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['available_credit_conversion'] = $available_credit_conversion;

        return $this;
    }

    /**
     * Gets available_credits
     *
     * @return float|null
     */
    public function getAvailableCredits()
    {
        return $this->container['available_credits'];
    }

    /**
     * Sets available_credits
     *
     * @param float|null $available_credits The value of credits or units of value awarded for the completion of a course.
     *
     * @return self
     */
    public function setAvailableCredits($available_credits)
    {
        if (is_null($available_credits)) {
            array_push($this->openAPINullablesSetToNull, 'available_credits');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('available_credits', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($available_credits) && ($available_credits < 0.0)) {
            throw new \InvalidArgumentException('invalid value for $available_credits when calling EdFiSection., must be bigger than or equal to 0.0.');
        }

        $this->container['available_credits'] = $available_credits;

        return $this;
    }

    /**
     * Gets available_credit_type_descriptor
     *
     * @return string|null
     */
    public function getAvailableCreditTypeDescriptor()
    {
        return $this->container['available_credit_type_descriptor'];
    }

    /**
     * Sets available_credit_type_descriptor
     *
     * @param string|null $available_credit_type_descriptor The type of credits or units of value awarded for the completion of a course.
     *
     * @return self
     */
    public function setAvailableCreditTypeDescriptor($available_credit_type_descriptor)
    {
        if (is_null($available_credit_type_descriptor)) {
            array_push($this->openAPINullablesSetToNull, 'available_credit_type_descriptor');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('available_credit_type_descriptor', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($available_credit_type_descriptor) && (mb_strlen($available_credit_type_descriptor) > 306)) {
            throw new \InvalidArgumentException('invalid length for $available_credit_type_descriptor when calling EdFiSection., must be smaller than or equal to 306.');
        }

        $this->container['available_credit_type_descriptor'] = $available_credit_type_descriptor;

        return $this;
    }

    /**
     * Gets characteristics
     *
     * @return \OpenAPI\Client\Model\EdFiSectionCharacteristic[]|null
     */
    public function getCharacteristics()
    {
        return $this->container['characteristics'];
    }

    /**
     * Sets characteristics
     *
     * @param \OpenAPI\Client\Model\EdFiSectionCharacteristic[]|null $characteristics An unordered collection of sectionCharacteristics. Reflects important characteristics of the section, such as whether or not attendance is taken and the section is graded.
     *
     * @return self
     */
    public function setCharacteristics($characteristics)
    {
        if (is_null($characteristics)) {
            throw new \InvalidArgumentException('non-nullable characteristics cannot be null');
        }
        $this->container['characteristics'] = $characteristics;

        return $this;
    }

    /**
     * Gets class_periods
     *
     * @return \OpenAPI\Client\Model\EdFiSectionClassPeriod[]|null
     */
    public function getClassPeriods()
    {
        return $this->container['class_periods'];
    }

    /**
     * Sets class_periods
     *
     * @param \OpenAPI\Client\Model\EdFiSectionClassPeriod[]|null $class_periods An unordered collection of sectionClassPeriods. The class period during which the section meets.
     *
     * @return self
     */
    public function setClassPeriods($class_periods)
    {
        if (is_null($class_periods)) {
            throw new \InvalidArgumentException('non-nullable class_periods cannot be null');
        }
        $this->container['class_periods'] = $class_periods;

        return $this;
    }

    /**
     * Gets course_level_characteristics
     *
     * @return \OpenAPI\Client\Model\EdFiSectionCourseLevelCharacteristic[]|null
     */
    public function getCourseLevelCharacteristics()
    {
        return $this->container['course_level_characteristics'];
    }

    /**
     * Sets course_level_characteristics
     *
     * @param \OpenAPI\Client\Model\EdFiSectionCourseLevelCharacteristic[]|null $course_level_characteristics An unordered collection of sectionCourseLevelCharacteristics. The type of specific program or designation with which the section is associated. This collection should only be populated if it differs from the course level characteristics identified at the course offering level.
     *
     * @return self
     */
    public function setCourseLevelCharacteristics($course_level_characteristics)
    {
        if (is_null($course_level_characteristics)) {
            throw new \InvalidArgumentException('non-nullable course_level_characteristics cannot be null');
        }
        $this->container['course_level_characteristics'] = $course_level_characteristics;

        return $this;
    }

    /**
     * Gets educational_environment_descriptor
     *
     * @return string|null
     */
    public function getEducationalEnvironmentDescriptor()
    {
        return $this->container['educational_environment_descriptor'];
    }

    /**
     * Sets educational_environment_descriptor
     *
     * @param string|null $educational_environment_descriptor The setting in which a student receives education and related services.
     *
     * @return self
     */
    public function setEducationalEnvironmentDescriptor($educational_environment_descriptor)
    {
        if (is_null($educational_environment_descriptor)) {
            array_push($this->openAPINullablesSetToNull, 'educational_environment_descriptor');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('educational_environment_descriptor', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($educational_environment_descriptor) && (mb_strlen($educational_environment_descriptor) > 306)) {
            throw new \InvalidArgumentException('invalid length for $educational_environment_descriptor when calling EdFiSection., must be smaller than or equal to 306.');
        }

        $this->container['educational_environment_descriptor'] = $educational_environment_descriptor;

        return $this;
    }

    /**
     * Gets instruction_language_descriptor
     *
     * @return string|null
     */
    public function getInstructionLanguageDescriptor()
    {
        return $this->container['instruction_language_descriptor'];
    }

    /**
     * Sets instruction_language_descriptor
     *
     * @param string|null $instruction_language_descriptor The primary language of instruction. If omitted, English is assumed.
     *
     * @return self
     */
    public function setInstructionLanguageDescriptor($instruction_language_descriptor)
    {
        if (is_null($instruction_language_descriptor)) {
            array_push($this->openAPINullablesSetToNull, 'instruction_language_descriptor');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('instruction_language_descriptor', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($instruction_language_descriptor) && (mb_strlen($instruction_language_descriptor) > 306)) {
            throw new \InvalidArgumentException('invalid length for $instruction_language_descriptor when calling EdFiSection., must be smaller than or equal to 306.');
        }

        $this->container['instruction_language_descriptor'] = $instruction_language_descriptor;

        return $this;
    }

    /**
     * Gets medium_of_instruction_descriptor
     *
     * @return string|null
     */
    public function getMediumOfInstructionDescriptor()
    {
        return $this->container['medium_of_instruction_descriptor'];
    }

    /**
     * Sets medium_of_instruction_descriptor
     *
     * @param string|null $medium_of_instruction_descriptor The media through which teachers provide instruction to students and students and teachers communicate about instructional matters.
     *
     * @return self
     */
    public function setMediumOfInstructionDescriptor($medium_of_instruction_descriptor)
    {
        if (is_null($medium_of_instruction_descriptor)) {
            array_push($this->openAPINullablesSetToNull, 'medium_of_instruction_descriptor');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('medium_of_instruction_descriptor', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($medium_of_instruction_descriptor) && (mb_strlen($medium_of_instruction_descriptor) > 306)) {
            throw new \InvalidArgumentException('invalid length for $medium_of_instruction_descriptor when calling EdFiSection., must be smaller than or equal to 306.');
        }

        $this->container['medium_of_instruction_descriptor'] = $medium_of_instruction_descriptor;

        return $this;
    }

    /**
     * Gets offered_grade_levels
     *
     * @return \OpenAPI\Client\Model\EdFiSectionOfferedGradeLevel[]|null
     */
    public function getOfferedGradeLevels()
    {
        return $this->container['offered_grade_levels'];
    }

    /**
     * Sets offered_grade_levels
     *
     * @param \OpenAPI\Client\Model\EdFiSectionOfferedGradeLevel[]|null $offered_grade_levels An unordered collection of sectionOfferedGradeLevels. The grade levels in which the section is offered. This collection should only be populated if it differs from the Offered Grade Levels identified at the course offering level.
     *
     * @return self
     */
    public function setOfferedGradeLevels($offered_grade_levels)
    {
        if (is_null($offered_grade_levels)) {
            throw new \InvalidArgumentException('non-nullable offered_grade_levels cannot be null');
        }
        $this->container['offered_grade_levels'] = $offered_grade_levels;

        return $this;
    }

    /**
     * Gets official_attendance_period
     *
     * @return bool|null
     */
    public function getOfficialAttendancePeriod()
    {
        return $this->container['official_attendance_period'];
    }

    /**
     * Sets official_attendance_period
     *
     * @param bool|null $official_attendance_period Indicator of whether this section is used for official daily attendance. Alternatively, official daily attendance may be tied to a class period.
     *
     * @return self
     */
    public function setOfficialAttendancePeriod($official_attendance_period)
    {
        if (is_null($official_attendance_period)) {
            array_push($this->openAPINullablesSetToNull, 'official_attendance_period');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('official_attendance_period', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['official_attendance_period'] = $official_attendance_period;

        return $this;
    }

    /**
     * Gets population_served_descriptor
     *
     * @return string|null
     */
    public function getPopulationServedDescriptor()
    {
        return $this->container['population_served_descriptor'];
    }

    /**
     * Sets population_served_descriptor
     *
     * @param string|null $population_served_descriptor The type of students the section is offered and tailored to.
     *
     * @return self
     */
    public function setPopulationServedDescriptor($population_served_descriptor)
    {
        if (is_null($population_served_descriptor)) {
            array_push($this->openAPINullablesSetToNull, 'population_served_descriptor');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('population_served_descriptor', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($population_served_descriptor) && (mb_strlen($population_served_descriptor) > 306)) {
            throw new \InvalidArgumentException('invalid length for $population_served_descriptor when calling EdFiSection., must be smaller than or equal to 306.');
        }

        $this->container['population_served_descriptor'] = $population_served_descriptor;

        return $this;
    }

    /**
     * Gets programs
     *
     * @return \OpenAPI\Client\Model\EdFiSectionProgram[]|null
     */
    public function getPrograms()
    {
        return $this->container['programs'];
    }

    /**
     * Sets programs
     *
     * @param \OpenAPI\Client\Model\EdFiSectionProgram[]|null $programs An unordered collection of sectionPrograms. Optional reference to program to which the section is associated.
     *
     * @return self
     */
    public function setPrograms($programs)
    {
        if (is_null($programs)) {
            throw new \InvalidArgumentException('non-nullable programs cannot be null');
        }
        $this->container['programs'] = $programs;

        return $this;
    }

    /**
     * Gets section_name
     *
     * @return string|null
     */
    public function getSectionName()
    {
        return $this->container['section_name'];
    }

    /**
     * Sets section_name
     *
     * @param string|null $section_name A locally-defined name for the section, generally created to make the section more recognizable in informal contexts and generally distinct from the section identifier.
     *
     * @return self
     */
    public function setSectionName($section_name)
    {
        if (is_null($section_name)) {
            array_push($this->openAPINullablesSetToNull, 'section_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('section_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($section_name) && (mb_strlen($section_name) > 100)) {
            throw new \InvalidArgumentException('invalid length for $section_name when calling EdFiSection., must be smaller than or equal to 100.');
        }
        if (!is_null($section_name) && (mb_strlen($section_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $section_name when calling EdFiSection., must be bigger than or equal to 1.');
        }

        $this->container['section_name'] = $section_name;

        return $this;
    }

    /**
     * Gets section_type_descriptor
     *
     * @return string|null
     */
    public function getSectionTypeDescriptor()
    {
        return $this->container['section_type_descriptor'];
    }

    /**
     * Sets section_type_descriptor
     *
     * @param string|null $section_type_descriptor Specifies whether the section is for attendance only, credit only, or both.
     *
     * @return self
     */
    public function setSectionTypeDescriptor($section_type_descriptor)
    {
        if (is_null($section_type_descriptor)) {
            array_push($this->openAPINullablesSetToNull, 'section_type_descriptor');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('section_type_descriptor', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($section_type_descriptor) && (mb_strlen($section_type_descriptor) > 306)) {
            throw new \InvalidArgumentException('invalid length for $section_type_descriptor when calling EdFiSection., must be smaller than or equal to 306.');
        }

        $this->container['section_type_descriptor'] = $section_type_descriptor;

        return $this;
    }

    /**
     * Gets sequence_of_course
     *
     * @return int|null
     */
    public function getSequenceOfCourse()
    {
        return $this->container['sequence_of_course'];
    }

    /**
     * Sets sequence_of_course
     *
     * @param int|null $sequence_of_course When a section is part of a sequence of parts for a course, the number of the sequence. If the course has only one part, the value of this section attribute should be 1.
     *
     * @return self
     */
    public function setSequenceOfCourse($sequence_of_course)
    {
        if (is_null($sequence_of_course)) {
            array_push($this->openAPINullablesSetToNull, 'sequence_of_course');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sequence_of_course', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($sequence_of_course) && ($sequence_of_course > 8)) {
            throw new \InvalidArgumentException('invalid value for $sequence_of_course when calling EdFiSection., must be smaller than or equal to 8.');
        }
        if (!is_null($sequence_of_course) && ($sequence_of_course < 1)) {
            throw new \InvalidArgumentException('invalid value for $sequence_of_course when calling EdFiSection., must be bigger than or equal to 1.');
        }

        $this->container['sequence_of_course'] = $sequence_of_course;

        return $this;
    }

    /**
     * Gets _etag
     *
     * @return string|null
     */
    public function getEtag()
    {
        return $this->container['_etag'];
    }

    /**
     * Sets _etag
     *
     * @param string|null $_etag A unique system-generated value that identifies the version of the resource.
     *
     * @return self
     */
    public function setEtag($_etag)
    {
        if (is_null($_etag)) {
            throw new \InvalidArgumentException('non-nullable _etag cannot be null');
        }
        $this->container['_etag'] = $_etag;

        return $this;
    }

    /**
     * Gets _last_modified_date
     *
     * @return \DateTime|null
     */
    public function getLastModifiedDate()
    {
        return $this->container['_last_modified_date'];
    }

    /**
     * Sets _last_modified_date
     *
     * @param \DateTime|null $_last_modified_date The date and time the resource was last modified.
     *
     * @return self
     */
    public function setLastModifiedDate($_last_modified_date)
    {
        if (is_null($_last_modified_date)) {
            throw new \InvalidArgumentException('non-nullable _last_modified_date cannot be null');
        }
        $this->container['_last_modified_date'] = $_last_modified_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


