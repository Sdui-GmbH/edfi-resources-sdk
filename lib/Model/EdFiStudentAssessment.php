<?php
/**
 * EdFiStudentAssessment
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Resources
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Resources\Model;

use \ArrayAccess;
use \Resources\ObjectSerializer;

/**
 * EdFiStudentAssessment Class Doc Comment
 *
 * @category Class
 * @package  Resources
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EdFiStudentAssessment implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'edFi_studentAssessment';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'student_assessment_identifier' => 'string',
        'assessment_reference' => '\Resources\Model\EdFiAssessmentReference',
        'reported_school_reference' => '\Resources\Model\EdFiSchoolReference',
        'school_year_type_reference' => '\Resources\Model\EdFiSchoolYearTypeReference',
        'student_reference' => '\Resources\Model\EdFiStudentReference',
        'accommodations' => '\Resources\Model\EdFiStudentAssessmentAccommodation[]',
        'administration_date' => '\DateTime',
        'administration_end_date' => '\DateTime',
        'administration_environment_descriptor' => 'string',
        'administration_language_descriptor' => 'string',
        'assessed_minutes' => 'int',
        'event_circumstance_descriptor' => 'string',
        'event_description' => 'string',
        'items' => '\Resources\Model\EdFiStudentAssessmentItem[]',
        'performance_levels' => '\Resources\Model\EdFiStudentAssessmentPerformanceLevel[]',
        'period' => '\Resources\Model\EdFiStudentAssessmentPeriod',
        'platform_type_descriptor' => 'string',
        'reason_not_tested_descriptor' => 'string',
        'reported_school_identifier' => 'string',
        'retest_indicator_descriptor' => 'string',
        'score_results' => '\Resources\Model\EdFiStudentAssessmentScoreResult[]',
        'serial_number' => 'string',
        'student_objective_assessments' => '\Resources\Model\EdFiStudentAssessmentStudentObjectiveAssessment[]',
        'when_assessed_grade_level_descriptor' => 'string',
        '_etag' => 'string',
        '_last_modified_date' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'student_assessment_identifier' => null,
        'assessment_reference' => null,
        'reported_school_reference' => null,
        'school_year_type_reference' => null,
        'student_reference' => null,
        'accommodations' => null,
        'administration_date' => 'date-time',
        'administration_end_date' => 'date-time',
        'administration_environment_descriptor' => null,
        'administration_language_descriptor' => null,
        'assessed_minutes' => 'int32',
        'event_circumstance_descriptor' => null,
        'event_description' => null,
        'items' => null,
        'performance_levels' => null,
        'period' => null,
        'platform_type_descriptor' => null,
        'reason_not_tested_descriptor' => null,
        'reported_school_identifier' => null,
        'retest_indicator_descriptor' => null,
        'score_results' => null,
        'serial_number' => null,
        'student_objective_assessments' => null,
        'when_assessed_grade_level_descriptor' => null,
        '_etag' => null,
        '_last_modified_date' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'student_assessment_identifier' => false,
        'assessment_reference' => false,
        'reported_school_reference' => false,
        'school_year_type_reference' => false,
        'student_reference' => false,
        'accommodations' => false,
        'administration_date' => true,
        'administration_end_date' => true,
        'administration_environment_descriptor' => true,
        'administration_language_descriptor' => true,
        'assessed_minutes' => true,
        'event_circumstance_descriptor' => true,
        'event_description' => true,
        'items' => false,
        'performance_levels' => false,
        'period' => false,
        'platform_type_descriptor' => true,
        'reason_not_tested_descriptor' => true,
        'reported_school_identifier' => true,
        'retest_indicator_descriptor' => true,
        'score_results' => false,
        'serial_number' => true,
        'student_objective_assessments' => false,
        'when_assessed_grade_level_descriptor' => true,
        '_etag' => false,
        '_last_modified_date' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'student_assessment_identifier' => 'studentAssessmentIdentifier',
        'assessment_reference' => 'assessmentReference',
        'reported_school_reference' => 'reportedSchoolReference',
        'school_year_type_reference' => 'schoolYearTypeReference',
        'student_reference' => 'studentReference',
        'accommodations' => 'accommodations',
        'administration_date' => 'administrationDate',
        'administration_end_date' => 'administrationEndDate',
        'administration_environment_descriptor' => 'administrationEnvironmentDescriptor',
        'administration_language_descriptor' => 'administrationLanguageDescriptor',
        'assessed_minutes' => 'assessedMinutes',
        'event_circumstance_descriptor' => 'eventCircumstanceDescriptor',
        'event_description' => 'eventDescription',
        'items' => 'items',
        'performance_levels' => 'performanceLevels',
        'period' => 'period',
        'platform_type_descriptor' => 'platformTypeDescriptor',
        'reason_not_tested_descriptor' => 'reasonNotTestedDescriptor',
        'reported_school_identifier' => 'reportedSchoolIdentifier',
        'retest_indicator_descriptor' => 'retestIndicatorDescriptor',
        'score_results' => 'scoreResults',
        'serial_number' => 'serialNumber',
        'student_objective_assessments' => 'studentObjectiveAssessments',
        'when_assessed_grade_level_descriptor' => 'whenAssessedGradeLevelDescriptor',
        '_etag' => '_etag',
        '_last_modified_date' => '_lastModifiedDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'student_assessment_identifier' => 'setStudentAssessmentIdentifier',
        'assessment_reference' => 'setAssessmentReference',
        'reported_school_reference' => 'setReportedSchoolReference',
        'school_year_type_reference' => 'setSchoolYearTypeReference',
        'student_reference' => 'setStudentReference',
        'accommodations' => 'setAccommodations',
        'administration_date' => 'setAdministrationDate',
        'administration_end_date' => 'setAdministrationEndDate',
        'administration_environment_descriptor' => 'setAdministrationEnvironmentDescriptor',
        'administration_language_descriptor' => 'setAdministrationLanguageDescriptor',
        'assessed_minutes' => 'setAssessedMinutes',
        'event_circumstance_descriptor' => 'setEventCircumstanceDescriptor',
        'event_description' => 'setEventDescription',
        'items' => 'setItems',
        'performance_levels' => 'setPerformanceLevels',
        'period' => 'setPeriod',
        'platform_type_descriptor' => 'setPlatformTypeDescriptor',
        'reason_not_tested_descriptor' => 'setReasonNotTestedDescriptor',
        'reported_school_identifier' => 'setReportedSchoolIdentifier',
        'retest_indicator_descriptor' => 'setRetestIndicatorDescriptor',
        'score_results' => 'setScoreResults',
        'serial_number' => 'setSerialNumber',
        'student_objective_assessments' => 'setStudentObjectiveAssessments',
        'when_assessed_grade_level_descriptor' => 'setWhenAssessedGradeLevelDescriptor',
        '_etag' => 'setEtag',
        '_last_modified_date' => 'setLastModifiedDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'student_assessment_identifier' => 'getStudentAssessmentIdentifier',
        'assessment_reference' => 'getAssessmentReference',
        'reported_school_reference' => 'getReportedSchoolReference',
        'school_year_type_reference' => 'getSchoolYearTypeReference',
        'student_reference' => 'getStudentReference',
        'accommodations' => 'getAccommodations',
        'administration_date' => 'getAdministrationDate',
        'administration_end_date' => 'getAdministrationEndDate',
        'administration_environment_descriptor' => 'getAdministrationEnvironmentDescriptor',
        'administration_language_descriptor' => 'getAdministrationLanguageDescriptor',
        'assessed_minutes' => 'getAssessedMinutes',
        'event_circumstance_descriptor' => 'getEventCircumstanceDescriptor',
        'event_description' => 'getEventDescription',
        'items' => 'getItems',
        'performance_levels' => 'getPerformanceLevels',
        'period' => 'getPeriod',
        'platform_type_descriptor' => 'getPlatformTypeDescriptor',
        'reason_not_tested_descriptor' => 'getReasonNotTestedDescriptor',
        'reported_school_identifier' => 'getReportedSchoolIdentifier',
        'retest_indicator_descriptor' => 'getRetestIndicatorDescriptor',
        'score_results' => 'getScoreResults',
        'serial_number' => 'getSerialNumber',
        'student_objective_assessments' => 'getStudentObjectiveAssessments',
        'when_assessed_grade_level_descriptor' => 'getWhenAssessedGradeLevelDescriptor',
        '_etag' => 'getEtag',
        '_last_modified_date' => 'getLastModifiedDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('student_assessment_identifier', $data ?? [], null);
        $this->setIfExists('assessment_reference', $data ?? [], null);
        $this->setIfExists('reported_school_reference', $data ?? [], null);
        $this->setIfExists('school_year_type_reference', $data ?? [], null);
        $this->setIfExists('student_reference', $data ?? [], null);
        $this->setIfExists('accommodations', $data ?? [], null);
        $this->setIfExists('administration_date', $data ?? [], null);
        $this->setIfExists('administration_end_date', $data ?? [], null);
        $this->setIfExists('administration_environment_descriptor', $data ?? [], null);
        $this->setIfExists('administration_language_descriptor', $data ?? [], null);
        $this->setIfExists('assessed_minutes', $data ?? [], null);
        $this->setIfExists('event_circumstance_descriptor', $data ?? [], null);
        $this->setIfExists('event_description', $data ?? [], null);
        $this->setIfExists('items', $data ?? [], null);
        $this->setIfExists('performance_levels', $data ?? [], null);
        $this->setIfExists('period', $data ?? [], null);
        $this->setIfExists('platform_type_descriptor', $data ?? [], null);
        $this->setIfExists('reason_not_tested_descriptor', $data ?? [], null);
        $this->setIfExists('reported_school_identifier', $data ?? [], null);
        $this->setIfExists('retest_indicator_descriptor', $data ?? [], null);
        $this->setIfExists('score_results', $data ?? [], null);
        $this->setIfExists('serial_number', $data ?? [], null);
        $this->setIfExists('student_objective_assessments', $data ?? [], null);
        $this->setIfExists('when_assessed_grade_level_descriptor', $data ?? [], null);
        $this->setIfExists('_etag', $data ?? [], null);
        $this->setIfExists('_last_modified_date', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['student_assessment_identifier'] === null) {
            $invalidProperties[] = "'student_assessment_identifier' can't be null";
        }
        if ((mb_strlen($this->container['student_assessment_identifier']) > 60)) {
            $invalidProperties[] = "invalid value for 'student_assessment_identifier', the character length must be smaller than or equal to 60.";
        }

        if ($this->container['assessment_reference'] === null) {
            $invalidProperties[] = "'assessment_reference' can't be null";
        }
        if ($this->container['student_reference'] === null) {
            $invalidProperties[] = "'student_reference' can't be null";
        }
        if (!is_null($this->container['administration_environment_descriptor']) && (mb_strlen($this->container['administration_environment_descriptor']) > 306)) {
            $invalidProperties[] = "invalid value for 'administration_environment_descriptor', the character length must be smaller than or equal to 306.";
        }

        if (!is_null($this->container['administration_language_descriptor']) && (mb_strlen($this->container['administration_language_descriptor']) > 306)) {
            $invalidProperties[] = "invalid value for 'administration_language_descriptor', the character length must be smaller than or equal to 306.";
        }

        if (!is_null($this->container['event_circumstance_descriptor']) && (mb_strlen($this->container['event_circumstance_descriptor']) > 306)) {
            $invalidProperties[] = "invalid value for 'event_circumstance_descriptor', the character length must be smaller than or equal to 306.";
        }

        if (!is_null($this->container['event_description']) && (mb_strlen($this->container['event_description']) > 1024)) {
            $invalidProperties[] = "invalid value for 'event_description', the character length must be smaller than or equal to 1024.";
        }

        if (!is_null($this->container['platform_type_descriptor']) && (mb_strlen($this->container['platform_type_descriptor']) > 306)) {
            $invalidProperties[] = "invalid value for 'platform_type_descriptor', the character length must be smaller than or equal to 306.";
        }

        if (!is_null($this->container['reason_not_tested_descriptor']) && (mb_strlen($this->container['reason_not_tested_descriptor']) > 306)) {
            $invalidProperties[] = "invalid value for 'reason_not_tested_descriptor', the character length must be smaller than or equal to 306.";
        }

        if (!is_null($this->container['reported_school_identifier']) && (mb_strlen($this->container['reported_school_identifier']) > 60)) {
            $invalidProperties[] = "invalid value for 'reported_school_identifier', the character length must be smaller than or equal to 60.";
        }

        if (!is_null($this->container['retest_indicator_descriptor']) && (mb_strlen($this->container['retest_indicator_descriptor']) > 306)) {
            $invalidProperties[] = "invalid value for 'retest_indicator_descriptor', the character length must be smaller than or equal to 306.";
        }

        if (!is_null($this->container['serial_number']) && (mb_strlen($this->container['serial_number']) > 60)) {
            $invalidProperties[] = "invalid value for 'serial_number', the character length must be smaller than or equal to 60.";
        }

        if (!is_null($this->container['when_assessed_grade_level_descriptor']) && (mb_strlen($this->container['when_assessed_grade_level_descriptor']) > 306)) {
            $invalidProperties[] = "invalid value for 'when_assessed_grade_level_descriptor', the character length must be smaller than or equal to 306.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id 
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets student_assessment_identifier
     *
     * @return string
     */
    public function getStudentAssessmentIdentifier()
    {
        return $this->container['student_assessment_identifier'];
    }

    /**
     * Sets student_assessment_identifier
     *
     * @param string $student_assessment_identifier A unique number or alphanumeric code assigned to an assessment administered to a student.
     *
     * @return self
     */
    public function setStudentAssessmentIdentifier($student_assessment_identifier)
    {
        if (is_null($student_assessment_identifier)) {
            throw new \InvalidArgumentException('non-nullable student_assessment_identifier cannot be null');
        }
        if ((mb_strlen($student_assessment_identifier) > 60)) {
            throw new \InvalidArgumentException('invalid length for $student_assessment_identifier when calling EdFiStudentAssessment., must be smaller than or equal to 60.');
        }

        $this->container['student_assessment_identifier'] = $student_assessment_identifier;

        return $this;
    }

    /**
     * Gets assessment_reference
     *
     * @return \Resources\Model\EdFiAssessmentReference
     */
    public function getAssessmentReference()
    {
        return $this->container['assessment_reference'];
    }

    /**
     * Sets assessment_reference
     *
     * @param \Resources\Model\EdFiAssessmentReference $assessment_reference assessment_reference
     *
     * @return self
     */
    public function setAssessmentReference($assessment_reference)
    {
        if (is_null($assessment_reference)) {
            throw new \InvalidArgumentException('non-nullable assessment_reference cannot be null');
        }
        $this->container['assessment_reference'] = $assessment_reference;

        return $this;
    }

    /**
     * Gets reported_school_reference
     *
     * @return \Resources\Model\EdFiSchoolReference|null
     */
    public function getReportedSchoolReference()
    {
        return $this->container['reported_school_reference'];
    }

    /**
     * Sets reported_school_reference
     *
     * @param \Resources\Model\EdFiSchoolReference|null $reported_school_reference reported_school_reference
     *
     * @return self
     */
    public function setReportedSchoolReference($reported_school_reference)
    {
        if (is_null($reported_school_reference)) {
            throw new \InvalidArgumentException('non-nullable reported_school_reference cannot be null');
        }
        $this->container['reported_school_reference'] = $reported_school_reference;

        return $this;
    }

    /**
     * Gets school_year_type_reference
     *
     * @return \Resources\Model\EdFiSchoolYearTypeReference|null
     */
    public function getSchoolYearTypeReference()
    {
        return $this->container['school_year_type_reference'];
    }

    /**
     * Sets school_year_type_reference
     *
     * @param \Resources\Model\EdFiSchoolYearTypeReference|null $school_year_type_reference school_year_type_reference
     *
     * @return self
     */
    public function setSchoolYearTypeReference($school_year_type_reference)
    {
        if (is_null($school_year_type_reference)) {
            throw new \InvalidArgumentException('non-nullable school_year_type_reference cannot be null');
        }
        $this->container['school_year_type_reference'] = $school_year_type_reference;

        return $this;
    }

    /**
     * Gets student_reference
     *
     * @return \Resources\Model\EdFiStudentReference
     */
    public function getStudentReference()
    {
        return $this->container['student_reference'];
    }

    /**
     * Sets student_reference
     *
     * @param \Resources\Model\EdFiStudentReference $student_reference student_reference
     *
     * @return self
     */
    public function setStudentReference($student_reference)
    {
        if (is_null($student_reference)) {
            throw new \InvalidArgumentException('non-nullable student_reference cannot be null');
        }
        $this->container['student_reference'] = $student_reference;

        return $this;
    }

    /**
     * Gets accommodations
     *
     * @return \Resources\Model\EdFiStudentAssessmentAccommodation[]|null
     */
    public function getAccommodations()
    {
        return $this->container['accommodations'];
    }

    /**
     * Sets accommodations
     *
     * @param \Resources\Model\EdFiStudentAssessmentAccommodation[]|null $accommodations An unordered collection of studentAssessmentAccommodations. The specific type of special variation used in how an examination is presented, how it is administered, or how the test taker is allowed to respond. This generally refers to changes that do not substantially alter what the examination measures. The proper use of accommodations does not substantially change academic level or performance criteria.
     *
     * @return self
     */
    public function setAccommodations($accommodations)
    {
        if (is_null($accommodations)) {
            throw new \InvalidArgumentException('non-nullable accommodations cannot be null');
        }
        $this->container['accommodations'] = $accommodations;

        return $this;
    }

    /**
     * Gets administration_date
     *
     * @return \DateTime|null
     */
    public function getAdministrationDate()
    {
        return $this->container['administration_date'];
    }

    /**
     * Sets administration_date
     *
     * @param \DateTime|null $administration_date The date and time an assessment was completed by the student. The use of ISO-8601 formats with a timezone designator (UTC or time offset) is recommended in order to prevent ambiguity due to time zones.
     *
     * @return self
     */
    public function setAdministrationDate($administration_date)
    {
        if (is_null($administration_date)) {
            array_push($this->openAPINullablesSetToNull, 'administration_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('administration_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['administration_date'] = $administration_date;

        return $this;
    }

    /**
     * Gets administration_end_date
     *
     * @return \DateTime|null
     */
    public function getAdministrationEndDate()
    {
        return $this->container['administration_end_date'];
    }

    /**
     * Sets administration_end_date
     *
     * @param \DateTime|null $administration_end_date The date and time an assessment administration ended.
     *
     * @return self
     */
    public function setAdministrationEndDate($administration_end_date)
    {
        if (is_null($administration_end_date)) {
            array_push($this->openAPINullablesSetToNull, 'administration_end_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('administration_end_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['administration_end_date'] = $administration_end_date;

        return $this;
    }

    /**
     * Gets administration_environment_descriptor
     *
     * @return string|null
     */
    public function getAdministrationEnvironmentDescriptor()
    {
        return $this->container['administration_environment_descriptor'];
    }

    /**
     * Sets administration_environment_descriptor
     *
     * @param string|null $administration_environment_descriptor The environment in which the test was administered.
     *
     * @return self
     */
    public function setAdministrationEnvironmentDescriptor($administration_environment_descriptor)
    {
        if (is_null($administration_environment_descriptor)) {
            array_push($this->openAPINullablesSetToNull, 'administration_environment_descriptor');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('administration_environment_descriptor', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($administration_environment_descriptor) && (mb_strlen($administration_environment_descriptor) > 306)) {
            throw new \InvalidArgumentException('invalid length for $administration_environment_descriptor when calling EdFiStudentAssessment., must be smaller than or equal to 306.');
        }

        $this->container['administration_environment_descriptor'] = $administration_environment_descriptor;

        return $this;
    }

    /**
     * Gets administration_language_descriptor
     *
     * @return string|null
     */
    public function getAdministrationLanguageDescriptor()
    {
        return $this->container['administration_language_descriptor'];
    }

    /**
     * Sets administration_language_descriptor
     *
     * @param string|null $administration_language_descriptor The language in which an assessment is written and/or administered.
     *
     * @return self
     */
    public function setAdministrationLanguageDescriptor($administration_language_descriptor)
    {
        if (is_null($administration_language_descriptor)) {
            array_push($this->openAPINullablesSetToNull, 'administration_language_descriptor');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('administration_language_descriptor', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($administration_language_descriptor) && (mb_strlen($administration_language_descriptor) > 306)) {
            throw new \InvalidArgumentException('invalid length for $administration_language_descriptor when calling EdFiStudentAssessment., must be smaller than or equal to 306.');
        }

        $this->container['administration_language_descriptor'] = $administration_language_descriptor;

        return $this;
    }

    /**
     * Gets assessed_minutes
     *
     * @return int|null
     */
    public function getAssessedMinutes()
    {
        return $this->container['assessed_minutes'];
    }

    /**
     * Sets assessed_minutes
     *
     * @param int|null $assessed_minutes Reported time student was assessed in minutes.
     *
     * @return self
     */
    public function setAssessedMinutes($assessed_minutes)
    {
        if (is_null($assessed_minutes)) {
            array_push($this->openAPINullablesSetToNull, 'assessed_minutes');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('assessed_minutes', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['assessed_minutes'] = $assessed_minutes;

        return $this;
    }

    /**
     * Gets event_circumstance_descriptor
     *
     * @return string|null
     */
    public function getEventCircumstanceDescriptor()
    {
        return $this->container['event_circumstance_descriptor'];
    }

    /**
     * Sets event_circumstance_descriptor
     *
     * @param string|null $event_circumstance_descriptor An unusual event occurred during the administration of the assessment. This could include fire alarm, student became ill, etc.
     *
     * @return self
     */
    public function setEventCircumstanceDescriptor($event_circumstance_descriptor)
    {
        if (is_null($event_circumstance_descriptor)) {
            array_push($this->openAPINullablesSetToNull, 'event_circumstance_descriptor');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('event_circumstance_descriptor', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($event_circumstance_descriptor) && (mb_strlen($event_circumstance_descriptor) > 306)) {
            throw new \InvalidArgumentException('invalid length for $event_circumstance_descriptor when calling EdFiStudentAssessment., must be smaller than or equal to 306.');
        }

        $this->container['event_circumstance_descriptor'] = $event_circumstance_descriptor;

        return $this;
    }

    /**
     * Gets event_description
     *
     * @return string|null
     */
    public function getEventDescription()
    {
        return $this->container['event_description'];
    }

    /**
     * Sets event_description
     *
     * @param string|null $event_description Describes special events that occur before during or after the assessment session that may impact use of results.
     *
     * @return self
     */
    public function setEventDescription($event_description)
    {
        if (is_null($event_description)) {
            array_push($this->openAPINullablesSetToNull, 'event_description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('event_description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($event_description) && (mb_strlen($event_description) > 1024)) {
            throw new \InvalidArgumentException('invalid length for $event_description when calling EdFiStudentAssessment., must be smaller than or equal to 1024.');
        }

        $this->container['event_description'] = $event_description;

        return $this;
    }

    /**
     * Gets items
     *
     * @return \Resources\Model\EdFiStudentAssessmentItem[]|null
     */
    public function getItems()
    {
        return $this->container['items'];
    }

    /**
     * Sets items
     *
     * @param \Resources\Model\EdFiStudentAssessmentItem[]|null $items An unordered collection of studentAssessmentItems. The student's response to an assessment item and the item-level scores such as correct, incorrect, or met standard.
     *
     * @return self
     */
    public function setItems($items)
    {
        if (is_null($items)) {
            throw new \InvalidArgumentException('non-nullable items cannot be null');
        }
        $this->container['items'] = $items;

        return $this;
    }

    /**
     * Gets performance_levels
     *
     * @return \Resources\Model\EdFiStudentAssessmentPerformanceLevel[]|null
     */
    public function getPerformanceLevels()
    {
        return $this->container['performance_levels'];
    }

    /**
     * Sets performance_levels
     *
     * @param \Resources\Model\EdFiStudentAssessmentPerformanceLevel[]|null $performance_levels An unordered collection of studentAssessmentPerformanceLevels. The performance level(s) achieved for the student assessment.
     *
     * @return self
     */
    public function setPerformanceLevels($performance_levels)
    {
        if (is_null($performance_levels)) {
            throw new \InvalidArgumentException('non-nullable performance_levels cannot be null');
        }
        $this->container['performance_levels'] = $performance_levels;

        return $this;
    }

    /**
     * Gets period
     *
     * @return \Resources\Model\EdFiStudentAssessmentPeriod|null
     */
    public function getPeriod()
    {
        return $this->container['period'];
    }

    /**
     * Sets period
     *
     * @param \Resources\Model\EdFiStudentAssessmentPeriod|null $period period
     *
     * @return self
     */
    public function setPeriod($period)
    {
        if (is_null($period)) {
            throw new \InvalidArgumentException('non-nullable period cannot be null');
        }
        $this->container['period'] = $period;

        return $this;
    }

    /**
     * Gets platform_type_descriptor
     *
     * @return string|null
     */
    public function getPlatformTypeDescriptor()
    {
        return $this->container['platform_type_descriptor'];
    }

    /**
     * Sets platform_type_descriptor
     *
     * @param string|null $platform_type_descriptor The platform with which the assessment was delivered to the student during the assessment session.
     *
     * @return self
     */
    public function setPlatformTypeDescriptor($platform_type_descriptor)
    {
        if (is_null($platform_type_descriptor)) {
            array_push($this->openAPINullablesSetToNull, 'platform_type_descriptor');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('platform_type_descriptor', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($platform_type_descriptor) && (mb_strlen($platform_type_descriptor) > 306)) {
            throw new \InvalidArgumentException('invalid length for $platform_type_descriptor when calling EdFiStudentAssessment., must be smaller than or equal to 306.');
        }

        $this->container['platform_type_descriptor'] = $platform_type_descriptor;

        return $this;
    }

    /**
     * Gets reason_not_tested_descriptor
     *
     * @return string|null
     */
    public function getReasonNotTestedDescriptor()
    {
        return $this->container['reason_not_tested_descriptor'];
    }

    /**
     * Sets reason_not_tested_descriptor
     *
     * @param string|null $reason_not_tested_descriptor The primary reason student is not tested.
     *
     * @return self
     */
    public function setReasonNotTestedDescriptor($reason_not_tested_descriptor)
    {
        if (is_null($reason_not_tested_descriptor)) {
            array_push($this->openAPINullablesSetToNull, 'reason_not_tested_descriptor');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('reason_not_tested_descriptor', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($reason_not_tested_descriptor) && (mb_strlen($reason_not_tested_descriptor) > 306)) {
            throw new \InvalidArgumentException('invalid length for $reason_not_tested_descriptor when calling EdFiStudentAssessment., must be smaller than or equal to 306.');
        }

        $this->container['reason_not_tested_descriptor'] = $reason_not_tested_descriptor;

        return $this;
    }

    /**
     * Gets reported_school_identifier
     *
     * @return string|null
     */
    public function getReportedSchoolIdentifier()
    {
        return $this->container['reported_school_identifier'];
    }

    /**
     * Sets reported_school_identifier
     *
     * @param string|null $reported_school_identifier A reported school identifier for the school the enrollment at the time of the assessment used when the assigned SchoolId is not known by the assessment vendor.
     *
     * @return self
     */
    public function setReportedSchoolIdentifier($reported_school_identifier)
    {
        if (is_null($reported_school_identifier)) {
            array_push($this->openAPINullablesSetToNull, 'reported_school_identifier');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('reported_school_identifier', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($reported_school_identifier) && (mb_strlen($reported_school_identifier) > 60)) {
            throw new \InvalidArgumentException('invalid length for $reported_school_identifier when calling EdFiStudentAssessment., must be smaller than or equal to 60.');
        }

        $this->container['reported_school_identifier'] = $reported_school_identifier;

        return $this;
    }

    /**
     * Gets retest_indicator_descriptor
     *
     * @return string|null
     */
    public function getRetestIndicatorDescriptor()
    {
        return $this->container['retest_indicator_descriptor'];
    }

    /**
     * Sets retest_indicator_descriptor
     *
     * @param string|null $retest_indicator_descriptor Indicator if the test was a retake.
     *
     * @return self
     */
    public function setRetestIndicatorDescriptor($retest_indicator_descriptor)
    {
        if (is_null($retest_indicator_descriptor)) {
            array_push($this->openAPINullablesSetToNull, 'retest_indicator_descriptor');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('retest_indicator_descriptor', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($retest_indicator_descriptor) && (mb_strlen($retest_indicator_descriptor) > 306)) {
            throw new \InvalidArgumentException('invalid length for $retest_indicator_descriptor when calling EdFiStudentAssessment., must be smaller than or equal to 306.');
        }

        $this->container['retest_indicator_descriptor'] = $retest_indicator_descriptor;

        return $this;
    }

    /**
     * Gets score_results
     *
     * @return \Resources\Model\EdFiStudentAssessmentScoreResult[]|null
     */
    public function getScoreResults()
    {
        return $this->container['score_results'];
    }

    /**
     * Sets score_results
     *
     * @param \Resources\Model\EdFiStudentAssessmentScoreResult[]|null $score_results An unordered collection of studentAssessmentScoreResults. A meaningful score or statistical expression of the performance of an individual. The results can be expressed as a number, percentile, range, level, etc.
     *
     * @return self
     */
    public function setScoreResults($score_results)
    {
        if (is_null($score_results)) {
            throw new \InvalidArgumentException('non-nullable score_results cannot be null');
        }
        $this->container['score_results'] = $score_results;

        return $this;
    }

    /**
     * Gets serial_number
     *
     * @return string|null
     */
    public function getSerialNumber()
    {
        return $this->container['serial_number'];
    }

    /**
     * Sets serial_number
     *
     * @param string|null $serial_number The unique number for the assessment form or answer document.
     *
     * @return self
     */
    public function setSerialNumber($serial_number)
    {
        if (is_null($serial_number)) {
            array_push($this->openAPINullablesSetToNull, 'serial_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('serial_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($serial_number) && (mb_strlen($serial_number) > 60)) {
            throw new \InvalidArgumentException('invalid length for $serial_number when calling EdFiStudentAssessment., must be smaller than or equal to 60.');
        }

        $this->container['serial_number'] = $serial_number;

        return $this;
    }

    /**
     * Gets student_objective_assessments
     *
     * @return \Resources\Model\EdFiStudentAssessmentStudentObjectiveAssessment[]|null
     */
    public function getStudentObjectiveAssessments()
    {
        return $this->container['student_objective_assessments'];
    }

    /**
     * Sets student_objective_assessments
     *
     * @param \Resources\Model\EdFiStudentAssessmentStudentObjectiveAssessment[]|null $student_objective_assessments An unordered collection of studentAssessmentStudentObjectiveAssessments. The student's score and/or performance levels earned for an objective assessment.
     *
     * @return self
     */
    public function setStudentObjectiveAssessments($student_objective_assessments)
    {
        if (is_null($student_objective_assessments)) {
            throw new \InvalidArgumentException('non-nullable student_objective_assessments cannot be null');
        }
        $this->container['student_objective_assessments'] = $student_objective_assessments;

        return $this;
    }

    /**
     * Gets when_assessed_grade_level_descriptor
     *
     * @return string|null
     */
    public function getWhenAssessedGradeLevelDescriptor()
    {
        return $this->container['when_assessed_grade_level_descriptor'];
    }

    /**
     * Sets when_assessed_grade_level_descriptor
     *
     * @param string|null $when_assessed_grade_level_descriptor The grade level of a student when assessed.
     *
     * @return self
     */
    public function setWhenAssessedGradeLevelDescriptor($when_assessed_grade_level_descriptor)
    {
        if (is_null($when_assessed_grade_level_descriptor)) {
            array_push($this->openAPINullablesSetToNull, 'when_assessed_grade_level_descriptor');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('when_assessed_grade_level_descriptor', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($when_assessed_grade_level_descriptor) && (mb_strlen($when_assessed_grade_level_descriptor) > 306)) {
            throw new \InvalidArgumentException('invalid length for $when_assessed_grade_level_descriptor when calling EdFiStudentAssessment., must be smaller than or equal to 306.');
        }

        $this->container['when_assessed_grade_level_descriptor'] = $when_assessed_grade_level_descriptor;

        return $this;
    }

    /**
     * Gets _etag
     *
     * @return string|null
     */
    public function getEtag()
    {
        return $this->container['_etag'];
    }

    /**
     * Sets _etag
     *
     * @param string|null $_etag A unique system-generated value that identifies the version of the resource.
     *
     * @return self
     */
    public function setEtag($_etag)
    {
        if (is_null($_etag)) {
            throw new \InvalidArgumentException('non-nullable _etag cannot be null');
        }
        $this->container['_etag'] = $_etag;

        return $this;
    }

    /**
     * Gets _last_modified_date
     *
     * @return \DateTime|null
     */
    public function getLastModifiedDate()
    {
        return $this->container['_last_modified_date'];
    }

    /**
     * Sets _last_modified_date
     *
     * @param \DateTime|null $_last_modified_date The date and time the resource was last modified.
     *
     * @return self
     */
    public function setLastModifiedDate($_last_modified_date)
    {
        if (is_null($_last_modified_date)) {
            throw new \InvalidArgumentException('non-nullable _last_modified_date cannot be null');
        }
        $this->container['_last_modified_date'] = $_last_modified_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


