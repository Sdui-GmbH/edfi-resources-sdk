<?php
/**
 * TpdmCandidate
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Resources
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Resources\Model;

use \ArrayAccess;
use \Resources\ObjectSerializer;

/**
 * TpdmCandidate Class Doc Comment
 *
 * @category Class
 * @package  Resources
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TpdmCandidate implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'tpdm_candidate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'candidate_identifier' => 'string',
        'person_reference' => '\Resources\Model\EdFiPersonReference',
        'addresses' => '\Resources\Model\TpdmCandidateAddress[]',
        'birth_city' => 'string',
        'birth_country_descriptor' => 'string',
        'birth_date' => '\DateTime',
        'birth_international_province' => 'string',
        'birth_sex_descriptor' => 'string',
        'birth_state_abbreviation_descriptor' => 'string',
        'date_entered_us' => '\DateTime',
        'disabilities' => '\Resources\Model\TpdmCandidateDisability[]',
        'displacement_status' => 'string',
        'economic_disadvantaged' => 'bool',
        'electronic_mails' => '\Resources\Model\TpdmCandidateElectronicMail[]',
        'english_language_exam_descriptor' => 'string',
        'first_generation_student' => 'bool',
        'first_name' => 'string',
        'gender_descriptor' => 'string',
        'generation_code_suffix' => 'string',
        'hispanic_latino_ethnicity' => 'bool',
        'languages' => '\Resources\Model\TpdmCandidateLanguage[]',
        'last_surname' => 'string',
        'limited_english_proficiency_descriptor' => 'string',
        'maiden_name' => 'string',
        'middle_name' => 'string',
        'multiple_birth_status' => 'bool',
        'other_names' => '\Resources\Model\TpdmCandidateOtherName[]',
        'personal_identification_documents' => '\Resources\Model\TpdmCandidatePersonalIdentificationDocument[]',
        'personal_title_prefix' => 'string',
        'preferred_first_name' => 'string',
        'preferred_last_surname' => 'string',
        'races' => '\Resources\Model\TpdmCandidateRace[]',
        'sex_descriptor' => 'string',
        'telephones' => '\Resources\Model\TpdmCandidateTelephone[]',
        '_etag' => 'string',
        '_last_modified_date' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'candidate_identifier' => null,
        'person_reference' => null,
        'addresses' => null,
        'birth_city' => null,
        'birth_country_descriptor' => null,
        'birth_date' => 'date',
        'birth_international_province' => null,
        'birth_sex_descriptor' => null,
        'birth_state_abbreviation_descriptor' => null,
        'date_entered_us' => 'date',
        'disabilities' => null,
        'displacement_status' => null,
        'economic_disadvantaged' => null,
        'electronic_mails' => null,
        'english_language_exam_descriptor' => null,
        'first_generation_student' => null,
        'first_name' => null,
        'gender_descriptor' => null,
        'generation_code_suffix' => null,
        'hispanic_latino_ethnicity' => null,
        'languages' => null,
        'last_surname' => null,
        'limited_english_proficiency_descriptor' => null,
        'maiden_name' => null,
        'middle_name' => null,
        'multiple_birth_status' => null,
        'other_names' => null,
        'personal_identification_documents' => null,
        'personal_title_prefix' => null,
        'preferred_first_name' => null,
        'preferred_last_surname' => null,
        'races' => null,
        'sex_descriptor' => null,
        'telephones' => null,
        '_etag' => null,
        '_last_modified_date' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'candidate_identifier' => false,
        'person_reference' => false,
        'addresses' => false,
        'birth_city' => true,
        'birth_country_descriptor' => true,
        'birth_date' => false,
        'birth_international_province' => true,
        'birth_sex_descriptor' => true,
        'birth_state_abbreviation_descriptor' => true,
        'date_entered_us' => true,
        'disabilities' => false,
        'displacement_status' => true,
        'economic_disadvantaged' => true,
        'electronic_mails' => false,
        'english_language_exam_descriptor' => true,
        'first_generation_student' => true,
        'first_name' => false,
        'gender_descriptor' => true,
        'generation_code_suffix' => true,
        'hispanic_latino_ethnicity' => true,
        'languages' => false,
        'last_surname' => false,
        'limited_english_proficiency_descriptor' => true,
        'maiden_name' => true,
        'middle_name' => true,
        'multiple_birth_status' => true,
        'other_names' => false,
        'personal_identification_documents' => false,
        'personal_title_prefix' => true,
        'preferred_first_name' => true,
        'preferred_last_surname' => true,
        'races' => false,
        'sex_descriptor' => true,
        'telephones' => false,
        '_etag' => false,
        '_last_modified_date' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'candidate_identifier' => 'candidateIdentifier',
        'person_reference' => 'personReference',
        'addresses' => 'addresses',
        'birth_city' => 'birthCity',
        'birth_country_descriptor' => 'birthCountryDescriptor',
        'birth_date' => 'birthDate',
        'birth_international_province' => 'birthInternationalProvince',
        'birth_sex_descriptor' => 'birthSexDescriptor',
        'birth_state_abbreviation_descriptor' => 'birthStateAbbreviationDescriptor',
        'date_entered_us' => 'dateEnteredUS',
        'disabilities' => 'disabilities',
        'displacement_status' => 'displacementStatus',
        'economic_disadvantaged' => 'economicDisadvantaged',
        'electronic_mails' => 'electronicMails',
        'english_language_exam_descriptor' => 'englishLanguageExamDescriptor',
        'first_generation_student' => 'firstGenerationStudent',
        'first_name' => 'firstName',
        'gender_descriptor' => 'genderDescriptor',
        'generation_code_suffix' => 'generationCodeSuffix',
        'hispanic_latino_ethnicity' => 'hispanicLatinoEthnicity',
        'languages' => 'languages',
        'last_surname' => 'lastSurname',
        'limited_english_proficiency_descriptor' => 'limitedEnglishProficiencyDescriptor',
        'maiden_name' => 'maidenName',
        'middle_name' => 'middleName',
        'multiple_birth_status' => 'multipleBirthStatus',
        'other_names' => 'otherNames',
        'personal_identification_documents' => 'personalIdentificationDocuments',
        'personal_title_prefix' => 'personalTitlePrefix',
        'preferred_first_name' => 'preferredFirstName',
        'preferred_last_surname' => 'preferredLastSurname',
        'races' => 'races',
        'sex_descriptor' => 'sexDescriptor',
        'telephones' => 'telephones',
        '_etag' => '_etag',
        '_last_modified_date' => '_lastModifiedDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'candidate_identifier' => 'setCandidateIdentifier',
        'person_reference' => 'setPersonReference',
        'addresses' => 'setAddresses',
        'birth_city' => 'setBirthCity',
        'birth_country_descriptor' => 'setBirthCountryDescriptor',
        'birth_date' => 'setBirthDate',
        'birth_international_province' => 'setBirthInternationalProvince',
        'birth_sex_descriptor' => 'setBirthSexDescriptor',
        'birth_state_abbreviation_descriptor' => 'setBirthStateAbbreviationDescriptor',
        'date_entered_us' => 'setDateEnteredUs',
        'disabilities' => 'setDisabilities',
        'displacement_status' => 'setDisplacementStatus',
        'economic_disadvantaged' => 'setEconomicDisadvantaged',
        'electronic_mails' => 'setElectronicMails',
        'english_language_exam_descriptor' => 'setEnglishLanguageExamDescriptor',
        'first_generation_student' => 'setFirstGenerationStudent',
        'first_name' => 'setFirstName',
        'gender_descriptor' => 'setGenderDescriptor',
        'generation_code_suffix' => 'setGenerationCodeSuffix',
        'hispanic_latino_ethnicity' => 'setHispanicLatinoEthnicity',
        'languages' => 'setLanguages',
        'last_surname' => 'setLastSurname',
        'limited_english_proficiency_descriptor' => 'setLimitedEnglishProficiencyDescriptor',
        'maiden_name' => 'setMaidenName',
        'middle_name' => 'setMiddleName',
        'multiple_birth_status' => 'setMultipleBirthStatus',
        'other_names' => 'setOtherNames',
        'personal_identification_documents' => 'setPersonalIdentificationDocuments',
        'personal_title_prefix' => 'setPersonalTitlePrefix',
        'preferred_first_name' => 'setPreferredFirstName',
        'preferred_last_surname' => 'setPreferredLastSurname',
        'races' => 'setRaces',
        'sex_descriptor' => 'setSexDescriptor',
        'telephones' => 'setTelephones',
        '_etag' => 'setEtag',
        '_last_modified_date' => 'setLastModifiedDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'candidate_identifier' => 'getCandidateIdentifier',
        'person_reference' => 'getPersonReference',
        'addresses' => 'getAddresses',
        'birth_city' => 'getBirthCity',
        'birth_country_descriptor' => 'getBirthCountryDescriptor',
        'birth_date' => 'getBirthDate',
        'birth_international_province' => 'getBirthInternationalProvince',
        'birth_sex_descriptor' => 'getBirthSexDescriptor',
        'birth_state_abbreviation_descriptor' => 'getBirthStateAbbreviationDescriptor',
        'date_entered_us' => 'getDateEnteredUs',
        'disabilities' => 'getDisabilities',
        'displacement_status' => 'getDisplacementStatus',
        'economic_disadvantaged' => 'getEconomicDisadvantaged',
        'electronic_mails' => 'getElectronicMails',
        'english_language_exam_descriptor' => 'getEnglishLanguageExamDescriptor',
        'first_generation_student' => 'getFirstGenerationStudent',
        'first_name' => 'getFirstName',
        'gender_descriptor' => 'getGenderDescriptor',
        'generation_code_suffix' => 'getGenerationCodeSuffix',
        'hispanic_latino_ethnicity' => 'getHispanicLatinoEthnicity',
        'languages' => 'getLanguages',
        'last_surname' => 'getLastSurname',
        'limited_english_proficiency_descriptor' => 'getLimitedEnglishProficiencyDescriptor',
        'maiden_name' => 'getMaidenName',
        'middle_name' => 'getMiddleName',
        'multiple_birth_status' => 'getMultipleBirthStatus',
        'other_names' => 'getOtherNames',
        'personal_identification_documents' => 'getPersonalIdentificationDocuments',
        'personal_title_prefix' => 'getPersonalTitlePrefix',
        'preferred_first_name' => 'getPreferredFirstName',
        'preferred_last_surname' => 'getPreferredLastSurname',
        'races' => 'getRaces',
        'sex_descriptor' => 'getSexDescriptor',
        'telephones' => 'getTelephones',
        '_etag' => 'getEtag',
        '_last_modified_date' => 'getLastModifiedDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('candidate_identifier', $data ?? [], null);
        $this->setIfExists('person_reference', $data ?? [], null);
        $this->setIfExists('addresses', $data ?? [], null);
        $this->setIfExists('birth_city', $data ?? [], null);
        $this->setIfExists('birth_country_descriptor', $data ?? [], null);
        $this->setIfExists('birth_date', $data ?? [], null);
        $this->setIfExists('birth_international_province', $data ?? [], null);
        $this->setIfExists('birth_sex_descriptor', $data ?? [], null);
        $this->setIfExists('birth_state_abbreviation_descriptor', $data ?? [], null);
        $this->setIfExists('date_entered_us', $data ?? [], null);
        $this->setIfExists('disabilities', $data ?? [], null);
        $this->setIfExists('displacement_status', $data ?? [], null);
        $this->setIfExists('economic_disadvantaged', $data ?? [], null);
        $this->setIfExists('electronic_mails', $data ?? [], null);
        $this->setIfExists('english_language_exam_descriptor', $data ?? [], null);
        $this->setIfExists('first_generation_student', $data ?? [], null);
        $this->setIfExists('first_name', $data ?? [], null);
        $this->setIfExists('gender_descriptor', $data ?? [], null);
        $this->setIfExists('generation_code_suffix', $data ?? [], null);
        $this->setIfExists('hispanic_latino_ethnicity', $data ?? [], null);
        $this->setIfExists('languages', $data ?? [], null);
        $this->setIfExists('last_surname', $data ?? [], null);
        $this->setIfExists('limited_english_proficiency_descriptor', $data ?? [], null);
        $this->setIfExists('maiden_name', $data ?? [], null);
        $this->setIfExists('middle_name', $data ?? [], null);
        $this->setIfExists('multiple_birth_status', $data ?? [], null);
        $this->setIfExists('other_names', $data ?? [], null);
        $this->setIfExists('personal_identification_documents', $data ?? [], null);
        $this->setIfExists('personal_title_prefix', $data ?? [], null);
        $this->setIfExists('preferred_first_name', $data ?? [], null);
        $this->setIfExists('preferred_last_surname', $data ?? [], null);
        $this->setIfExists('races', $data ?? [], null);
        $this->setIfExists('sex_descriptor', $data ?? [], null);
        $this->setIfExists('telephones', $data ?? [], null);
        $this->setIfExists('_etag', $data ?? [], null);
        $this->setIfExists('_last_modified_date', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['candidate_identifier'] === null) {
            $invalidProperties[] = "'candidate_identifier' can't be null";
        }
        if ((mb_strlen($this->container['candidate_identifier']) > 32)) {
            $invalidProperties[] = "invalid value for 'candidate_identifier', the character length must be smaller than or equal to 32.";
        }

        if ((mb_strlen($this->container['candidate_identifier']) < 1)) {
            $invalidProperties[] = "invalid value for 'candidate_identifier', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['birth_city']) && (mb_strlen($this->container['birth_city']) > 30)) {
            $invalidProperties[] = "invalid value for 'birth_city', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['birth_city']) && (mb_strlen($this->container['birth_city']) < 2)) {
            $invalidProperties[] = "invalid value for 'birth_city', the character length must be bigger than or equal to 2.";
        }

        if (!is_null($this->container['birth_country_descriptor']) && (mb_strlen($this->container['birth_country_descriptor']) > 306)) {
            $invalidProperties[] = "invalid value for 'birth_country_descriptor', the character length must be smaller than or equal to 306.";
        }

        if ($this->container['birth_date'] === null) {
            $invalidProperties[] = "'birth_date' can't be null";
        }
        if (!is_null($this->container['birth_international_province']) && (mb_strlen($this->container['birth_international_province']) > 150)) {
            $invalidProperties[] = "invalid value for 'birth_international_province', the character length must be smaller than or equal to 150.";
        }

        if (!is_null($this->container['birth_sex_descriptor']) && (mb_strlen($this->container['birth_sex_descriptor']) > 306)) {
            $invalidProperties[] = "invalid value for 'birth_sex_descriptor', the character length must be smaller than or equal to 306.";
        }

        if (!is_null($this->container['birth_state_abbreviation_descriptor']) && (mb_strlen($this->container['birth_state_abbreviation_descriptor']) > 306)) {
            $invalidProperties[] = "invalid value for 'birth_state_abbreviation_descriptor', the character length must be smaller than or equal to 306.";
        }

        if (!is_null($this->container['displacement_status']) && (mb_strlen($this->container['displacement_status']) > 30)) {
            $invalidProperties[] = "invalid value for 'displacement_status', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['displacement_status']) && (mb_strlen($this->container['displacement_status']) < 1)) {
            $invalidProperties[] = "invalid value for 'displacement_status', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['english_language_exam_descriptor']) && (mb_strlen($this->container['english_language_exam_descriptor']) > 306)) {
            $invalidProperties[] = "invalid value for 'english_language_exam_descriptor', the character length must be smaller than or equal to 306.";
        }

        if ($this->container['first_name'] === null) {
            $invalidProperties[] = "'first_name' can't be null";
        }
        if ((mb_strlen($this->container['first_name']) > 75)) {
            $invalidProperties[] = "invalid value for 'first_name', the character length must be smaller than or equal to 75.";
        }

        if (!is_null($this->container['gender_descriptor']) && (mb_strlen($this->container['gender_descriptor']) > 306)) {
            $invalidProperties[] = "invalid value for 'gender_descriptor', the character length must be smaller than or equal to 306.";
        }

        if (!is_null($this->container['generation_code_suffix']) && (mb_strlen($this->container['generation_code_suffix']) > 10)) {
            $invalidProperties[] = "invalid value for 'generation_code_suffix', the character length must be smaller than or equal to 10.";
        }

        if ($this->container['last_surname'] === null) {
            $invalidProperties[] = "'last_surname' can't be null";
        }
        if ((mb_strlen($this->container['last_surname']) > 75)) {
            $invalidProperties[] = "invalid value for 'last_surname', the character length must be smaller than or equal to 75.";
        }

        if (!is_null($this->container['limited_english_proficiency_descriptor']) && (mb_strlen($this->container['limited_english_proficiency_descriptor']) > 306)) {
            $invalidProperties[] = "invalid value for 'limited_english_proficiency_descriptor', the character length must be smaller than or equal to 306.";
        }

        if (!is_null($this->container['maiden_name']) && (mb_strlen($this->container['maiden_name']) > 75)) {
            $invalidProperties[] = "invalid value for 'maiden_name', the character length must be smaller than or equal to 75.";
        }

        if (!is_null($this->container['middle_name']) && (mb_strlen($this->container['middle_name']) > 75)) {
            $invalidProperties[] = "invalid value for 'middle_name', the character length must be smaller than or equal to 75.";
        }

        if (!is_null($this->container['personal_title_prefix']) && (mb_strlen($this->container['personal_title_prefix']) > 30)) {
            $invalidProperties[] = "invalid value for 'personal_title_prefix', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['preferred_first_name']) && (mb_strlen($this->container['preferred_first_name']) > 75)) {
            $invalidProperties[] = "invalid value for 'preferred_first_name', the character length must be smaller than or equal to 75.";
        }

        if (!is_null($this->container['preferred_last_surname']) && (mb_strlen($this->container['preferred_last_surname']) > 75)) {
            $invalidProperties[] = "invalid value for 'preferred_last_surname', the character length must be smaller than or equal to 75.";
        }

        if (!is_null($this->container['sex_descriptor']) && (mb_strlen($this->container['sex_descriptor']) > 306)) {
            $invalidProperties[] = "invalid value for 'sex_descriptor', the character length must be smaller than or equal to 306.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id 
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets candidate_identifier
     *
     * @return string
     */
    public function getCandidateIdentifier()
    {
        return $this->container['candidate_identifier'];
    }

    /**
     * Sets candidate_identifier
     *
     * @param string $candidate_identifier A unique alphanumeric code assigned to a candidate.
     *
     * @return self
     */
    public function setCandidateIdentifier($candidate_identifier)
    {
        if (is_null($candidate_identifier)) {
            throw new \InvalidArgumentException('non-nullable candidate_identifier cannot be null');
        }
        if ((mb_strlen($candidate_identifier) > 32)) {
            throw new \InvalidArgumentException('invalid length for $candidate_identifier when calling TpdmCandidate., must be smaller than or equal to 32.');
        }
        if ((mb_strlen($candidate_identifier) < 1)) {
            throw new \InvalidArgumentException('invalid length for $candidate_identifier when calling TpdmCandidate., must be bigger than or equal to 1.');
        }

        $this->container['candidate_identifier'] = $candidate_identifier;

        return $this;
    }

    /**
     * Gets person_reference
     *
     * @return \Resources\Model\EdFiPersonReference|null
     */
    public function getPersonReference()
    {
        return $this->container['person_reference'];
    }

    /**
     * Sets person_reference
     *
     * @param \Resources\Model\EdFiPersonReference|null $person_reference person_reference
     *
     * @return self
     */
    public function setPersonReference($person_reference)
    {
        if (is_null($person_reference)) {
            throw new \InvalidArgumentException('non-nullable person_reference cannot be null');
        }
        $this->container['person_reference'] = $person_reference;

        return $this;
    }

    /**
     * Gets addresses
     *
     * @return \Resources\Model\TpdmCandidateAddress[]|null
     */
    public function getAddresses()
    {
        return $this->container['addresses'];
    }

    /**
     * Sets addresses
     *
     * @param \Resources\Model\TpdmCandidateAddress[]|null $addresses An unordered collection of candidateAddresses. The set of elements that describes an address, including the street address, city, state, and ZIP code.
     *
     * @return self
     */
    public function setAddresses($addresses)
    {
        if (is_null($addresses)) {
            throw new \InvalidArgumentException('non-nullable addresses cannot be null');
        }
        $this->container['addresses'] = $addresses;

        return $this;
    }

    /**
     * Gets birth_city
     *
     * @return string|null
     */
    public function getBirthCity()
    {
        return $this->container['birth_city'];
    }

    /**
     * Sets birth_city
     *
     * @param string|null $birth_city The city the student was born in.
     *
     * @return self
     */
    public function setBirthCity($birth_city)
    {
        if (is_null($birth_city)) {
            array_push($this->openAPINullablesSetToNull, 'birth_city');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('birth_city', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($birth_city) && (mb_strlen($birth_city) > 30)) {
            throw new \InvalidArgumentException('invalid length for $birth_city when calling TpdmCandidate., must be smaller than or equal to 30.');
        }
        if (!is_null($birth_city) && (mb_strlen($birth_city) < 2)) {
            throw new \InvalidArgumentException('invalid length for $birth_city when calling TpdmCandidate., must be bigger than or equal to 2.');
        }

        $this->container['birth_city'] = $birth_city;

        return $this;
    }

    /**
     * Gets birth_country_descriptor
     *
     * @return string|null
     */
    public function getBirthCountryDescriptor()
    {
        return $this->container['birth_country_descriptor'];
    }

    /**
     * Sets birth_country_descriptor
     *
     * @param string|null $birth_country_descriptor The country in which an individual is born. It is strongly recommended that entries use only ISO 3166 2-letter country codes.
     *
     * @return self
     */
    public function setBirthCountryDescriptor($birth_country_descriptor)
    {
        if (is_null($birth_country_descriptor)) {
            array_push($this->openAPINullablesSetToNull, 'birth_country_descriptor');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('birth_country_descriptor', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($birth_country_descriptor) && (mb_strlen($birth_country_descriptor) > 306)) {
            throw new \InvalidArgumentException('invalid length for $birth_country_descriptor when calling TpdmCandidate., must be smaller than or equal to 306.');
        }

        $this->container['birth_country_descriptor'] = $birth_country_descriptor;

        return $this;
    }

    /**
     * Gets birth_date
     *
     * @return \DateTime
     */
    public function getBirthDate()
    {
        return $this->container['birth_date'];
    }

    /**
     * Sets birth_date
     *
     * @param \DateTime $birth_date The month, day, and year on which an individual was born.
     *
     * @return self
     */
    public function setBirthDate($birth_date)
    {
        if (is_null($birth_date)) {
            throw new \InvalidArgumentException('non-nullable birth_date cannot be null');
        }
        $this->container['birth_date'] = $birth_date;

        return $this;
    }

    /**
     * Gets birth_international_province
     *
     * @return string|null
     */
    public function getBirthInternationalProvince()
    {
        return $this->container['birth_international_province'];
    }

    /**
     * Sets birth_international_province
     *
     * @param string|null $birth_international_province For students born outside of the U.S., the Province or jurisdiction in which an individual is born.
     *
     * @return self
     */
    public function setBirthInternationalProvince($birth_international_province)
    {
        if (is_null($birth_international_province)) {
            array_push($this->openAPINullablesSetToNull, 'birth_international_province');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('birth_international_province', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($birth_international_province) && (mb_strlen($birth_international_province) > 150)) {
            throw new \InvalidArgumentException('invalid length for $birth_international_province when calling TpdmCandidate., must be smaller than or equal to 150.');
        }

        $this->container['birth_international_province'] = $birth_international_province;

        return $this;
    }

    /**
     * Gets birth_sex_descriptor
     *
     * @return string|null
     */
    public function getBirthSexDescriptor()
    {
        return $this->container['birth_sex_descriptor'];
    }

    /**
     * Sets birth_sex_descriptor
     *
     * @param string|null $birth_sex_descriptor A person's sex at birth.
     *
     * @return self
     */
    public function setBirthSexDescriptor($birth_sex_descriptor)
    {
        if (is_null($birth_sex_descriptor)) {
            array_push($this->openAPINullablesSetToNull, 'birth_sex_descriptor');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('birth_sex_descriptor', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($birth_sex_descriptor) && (mb_strlen($birth_sex_descriptor) > 306)) {
            throw new \InvalidArgumentException('invalid length for $birth_sex_descriptor when calling TpdmCandidate., must be smaller than or equal to 306.');
        }

        $this->container['birth_sex_descriptor'] = $birth_sex_descriptor;

        return $this;
    }

    /**
     * Gets birth_state_abbreviation_descriptor
     *
     * @return string|null
     */
    public function getBirthStateAbbreviationDescriptor()
    {
        return $this->container['birth_state_abbreviation_descriptor'];
    }

    /**
     * Sets birth_state_abbreviation_descriptor
     *
     * @param string|null $birth_state_abbreviation_descriptor The abbreviation for the name of the state (within the United States) or extra-state jurisdiction in which an individual was born.
     *
     * @return self
     */
    public function setBirthStateAbbreviationDescriptor($birth_state_abbreviation_descriptor)
    {
        if (is_null($birth_state_abbreviation_descriptor)) {
            array_push($this->openAPINullablesSetToNull, 'birth_state_abbreviation_descriptor');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('birth_state_abbreviation_descriptor', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($birth_state_abbreviation_descriptor) && (mb_strlen($birth_state_abbreviation_descriptor) > 306)) {
            throw new \InvalidArgumentException('invalid length for $birth_state_abbreviation_descriptor when calling TpdmCandidate., must be smaller than or equal to 306.');
        }

        $this->container['birth_state_abbreviation_descriptor'] = $birth_state_abbreviation_descriptor;

        return $this;
    }

    /**
     * Gets date_entered_us
     *
     * @return \DateTime|null
     */
    public function getDateEnteredUs()
    {
        return $this->container['date_entered_us'];
    }

    /**
     * Sets date_entered_us
     *
     * @param \DateTime|null $date_entered_us For students born outside of the U.S., the date the student entered the U.S.
     *
     * @return self
     */
    public function setDateEnteredUs($date_entered_us)
    {
        if (is_null($date_entered_us)) {
            array_push($this->openAPINullablesSetToNull, 'date_entered_us');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('date_entered_us', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['date_entered_us'] = $date_entered_us;

        return $this;
    }

    /**
     * Gets disabilities
     *
     * @return \Resources\Model\TpdmCandidateDisability[]|null
     */
    public function getDisabilities()
    {
        return $this->container['disabilities'];
    }

    /**
     * Sets disabilities
     *
     * @param \Resources\Model\TpdmCandidateDisability[]|null $disabilities An unordered collection of candidateDisabilities. The disability condition(s) that best describes an individual's impairment.
     *
     * @return self
     */
    public function setDisabilities($disabilities)
    {
        if (is_null($disabilities)) {
            throw new \InvalidArgumentException('non-nullable disabilities cannot be null');
        }
        $this->container['disabilities'] = $disabilities;

        return $this;
    }

    /**
     * Gets displacement_status
     *
     * @return string|null
     */
    public function getDisplacementStatus()
    {
        return $this->container['displacement_status'];
    }

    /**
     * Sets displacement_status
     *
     * @param string|null $displacement_status Indicates a state health or weather related event that displaces a group of students, and may require additional funding, educational, or social services.
     *
     * @return self
     */
    public function setDisplacementStatus($displacement_status)
    {
        if (is_null($displacement_status)) {
            array_push($this->openAPINullablesSetToNull, 'displacement_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('displacement_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($displacement_status) && (mb_strlen($displacement_status) > 30)) {
            throw new \InvalidArgumentException('invalid length for $displacement_status when calling TpdmCandidate., must be smaller than or equal to 30.');
        }
        if (!is_null($displacement_status) && (mb_strlen($displacement_status) < 1)) {
            throw new \InvalidArgumentException('invalid length for $displacement_status when calling TpdmCandidate., must be bigger than or equal to 1.');
        }

        $this->container['displacement_status'] = $displacement_status;

        return $this;
    }

    /**
     * Gets economic_disadvantaged
     *
     * @return bool|null
     */
    public function getEconomicDisadvantaged()
    {
        return $this->container['economic_disadvantaged'];
    }

    /**
     * Sets economic_disadvantaged
     *
     * @param bool|null $economic_disadvantaged An indication of inadequate financial condition of an individual's family, as determined by family income, number of family members/dependents, participation in public assistance programs, and/or other characteristics considered relevant by federal, state, and local policy.
     *
     * @return self
     */
    public function setEconomicDisadvantaged($economic_disadvantaged)
    {
        if (is_null($economic_disadvantaged)) {
            array_push($this->openAPINullablesSetToNull, 'economic_disadvantaged');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('economic_disadvantaged', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['economic_disadvantaged'] = $economic_disadvantaged;

        return $this;
    }

    /**
     * Gets electronic_mails
     *
     * @return \Resources\Model\TpdmCandidateElectronicMail[]|null
     */
    public function getElectronicMails()
    {
        return $this->container['electronic_mails'];
    }

    /**
     * Sets electronic_mails
     *
     * @param \Resources\Model\TpdmCandidateElectronicMail[]|null $electronic_mails An unordered collection of candidateElectronicMails. The numbers, letters, and symbols used to identify an electronic mail (e-mail) user within the network to which the individual or organization belongs.
     *
     * @return self
     */
    public function setElectronicMails($electronic_mails)
    {
        if (is_null($electronic_mails)) {
            throw new \InvalidArgumentException('non-nullable electronic_mails cannot be null');
        }
        $this->container['electronic_mails'] = $electronic_mails;

        return $this;
    }

    /**
     * Gets english_language_exam_descriptor
     *
     * @return string|null
     */
    public function getEnglishLanguageExamDescriptor()
    {
        return $this->container['english_language_exam_descriptor'];
    }

    /**
     * Sets english_language_exam_descriptor
     *
     * @param string|null $english_language_exam_descriptor Indicates that a person passed, failed, or did not take an English Language assessment (e.g., TOEFFL).
     *
     * @return self
     */
    public function setEnglishLanguageExamDescriptor($english_language_exam_descriptor)
    {
        if (is_null($english_language_exam_descriptor)) {
            array_push($this->openAPINullablesSetToNull, 'english_language_exam_descriptor');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('english_language_exam_descriptor', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($english_language_exam_descriptor) && (mb_strlen($english_language_exam_descriptor) > 306)) {
            throw new \InvalidArgumentException('invalid length for $english_language_exam_descriptor when calling TpdmCandidate., must be smaller than or equal to 306.');
        }

        $this->container['english_language_exam_descriptor'] = $english_language_exam_descriptor;

        return $this;
    }

    /**
     * Gets first_generation_student
     *
     * @return bool|null
     */
    public function getFirstGenerationStudent()
    {
        return $this->container['first_generation_student'];
    }

    /**
     * Sets first_generation_student
     *
     * @param bool|null $first_generation_student Indicator of whether individual is a first generation college student.
     *
     * @return self
     */
    public function setFirstGenerationStudent($first_generation_student)
    {
        if (is_null($first_generation_student)) {
            array_push($this->openAPINullablesSetToNull, 'first_generation_student');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('first_generation_student', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['first_generation_student'] = $first_generation_student;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string $first_name A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.
     *
     * @return self
     */
    public function setFirstName($first_name)
    {
        if (is_null($first_name)) {
            throw new \InvalidArgumentException('non-nullable first_name cannot be null');
        }
        if ((mb_strlen($first_name) > 75)) {
            throw new \InvalidArgumentException('invalid length for $first_name when calling TpdmCandidate., must be smaller than or equal to 75.');
        }

        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets gender_descriptor
     *
     * @return string|null
     */
    public function getGenderDescriptor()
    {
        return $this->container['gender_descriptor'];
    }

    /**
     * Sets gender_descriptor
     *
     * @param string|null $gender_descriptor The gender of the candidate.
     *
     * @return self
     */
    public function setGenderDescriptor($gender_descriptor)
    {
        if (is_null($gender_descriptor)) {
            array_push($this->openAPINullablesSetToNull, 'gender_descriptor');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('gender_descriptor', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($gender_descriptor) && (mb_strlen($gender_descriptor) > 306)) {
            throw new \InvalidArgumentException('invalid length for $gender_descriptor when calling TpdmCandidate., must be smaller than or equal to 306.');
        }

        $this->container['gender_descriptor'] = $gender_descriptor;

        return $this;
    }

    /**
     * Gets generation_code_suffix
     *
     * @return string|null
     */
    public function getGenerationCodeSuffix()
    {
        return $this->container['generation_code_suffix'];
    }

    /**
     * Sets generation_code_suffix
     *
     * @param string|null $generation_code_suffix An appendage, if any, used to denote an individual's generation in his family (e.g., Jr., Sr., III).
     *
     * @return self
     */
    public function setGenerationCodeSuffix($generation_code_suffix)
    {
        if (is_null($generation_code_suffix)) {
            array_push($this->openAPINullablesSetToNull, 'generation_code_suffix');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('generation_code_suffix', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($generation_code_suffix) && (mb_strlen($generation_code_suffix) > 10)) {
            throw new \InvalidArgumentException('invalid length for $generation_code_suffix when calling TpdmCandidate., must be smaller than or equal to 10.');
        }

        $this->container['generation_code_suffix'] = $generation_code_suffix;

        return $this;
    }

    /**
     * Gets hispanic_latino_ethnicity
     *
     * @return bool|null
     */
    public function getHispanicLatinoEthnicity()
    {
        return $this->container['hispanic_latino_ethnicity'];
    }

    /**
     * Sets hispanic_latino_ethnicity
     *
     * @param bool|null $hispanic_latino_ethnicity An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, \"Spanish origin,\" can be used in addition to \"Hispanic or Latino.\"
     *
     * @return self
     */
    public function setHispanicLatinoEthnicity($hispanic_latino_ethnicity)
    {
        if (is_null($hispanic_latino_ethnicity)) {
            array_push($this->openAPINullablesSetToNull, 'hispanic_latino_ethnicity');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('hispanic_latino_ethnicity', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['hispanic_latino_ethnicity'] = $hispanic_latino_ethnicity;

        return $this;
    }

    /**
     * Gets languages
     *
     * @return \Resources\Model\TpdmCandidateLanguage[]|null
     */
    public function getLanguages()
    {
        return $this->container['languages'];
    }

    /**
     * Sets languages
     *
     * @param \Resources\Model\TpdmCandidateLanguage[]|null $languages An unordered collection of candidateLanguages. The language(s) the individual uses to communicate.
     *
     * @return self
     */
    public function setLanguages($languages)
    {
        if (is_null($languages)) {
            throw new \InvalidArgumentException('non-nullable languages cannot be null');
        }
        $this->container['languages'] = $languages;

        return $this;
    }

    /**
     * Gets last_surname
     *
     * @return string
     */
    public function getLastSurname()
    {
        return $this->container['last_surname'];
    }

    /**
     * Sets last_surname
     *
     * @param string $last_surname The name borne in common by members of a family.
     *
     * @return self
     */
    public function setLastSurname($last_surname)
    {
        if (is_null($last_surname)) {
            throw new \InvalidArgumentException('non-nullable last_surname cannot be null');
        }
        if ((mb_strlen($last_surname) > 75)) {
            throw new \InvalidArgumentException('invalid length for $last_surname when calling TpdmCandidate., must be smaller than or equal to 75.');
        }

        $this->container['last_surname'] = $last_surname;

        return $this;
    }

    /**
     * Gets limited_english_proficiency_descriptor
     *
     * @return string|null
     */
    public function getLimitedEnglishProficiencyDescriptor()
    {
        return $this->container['limited_english_proficiency_descriptor'];
    }

    /**
     * Sets limited_english_proficiency_descriptor
     *
     * @param string|null $limited_english_proficiency_descriptor An indication that the student has been identified as limited English proficient by the Language Proficiency Assessment Committee (LPAC), or English proficient.
     *
     * @return self
     */
    public function setLimitedEnglishProficiencyDescriptor($limited_english_proficiency_descriptor)
    {
        if (is_null($limited_english_proficiency_descriptor)) {
            array_push($this->openAPINullablesSetToNull, 'limited_english_proficiency_descriptor');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('limited_english_proficiency_descriptor', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($limited_english_proficiency_descriptor) && (mb_strlen($limited_english_proficiency_descriptor) > 306)) {
            throw new \InvalidArgumentException('invalid length for $limited_english_proficiency_descriptor when calling TpdmCandidate., must be smaller than or equal to 306.');
        }

        $this->container['limited_english_proficiency_descriptor'] = $limited_english_proficiency_descriptor;

        return $this;
    }

    /**
     * Gets maiden_name
     *
     * @return string|null
     */
    public function getMaidenName()
    {
        return $this->container['maiden_name'];
    }

    /**
     * Sets maiden_name
     *
     * @param string|null $maiden_name The individual's maiden name.
     *
     * @return self
     */
    public function setMaidenName($maiden_name)
    {
        if (is_null($maiden_name)) {
            array_push($this->openAPINullablesSetToNull, 'maiden_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('maiden_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($maiden_name) && (mb_strlen($maiden_name) > 75)) {
            throw new \InvalidArgumentException('invalid length for $maiden_name when calling TpdmCandidate., must be smaller than or equal to 75.');
        }

        $this->container['maiden_name'] = $maiden_name;

        return $this;
    }

    /**
     * Gets middle_name
     *
     * @return string|null
     */
    public function getMiddleName()
    {
        return $this->container['middle_name'];
    }

    /**
     * Sets middle_name
     *
     * @param string|null $middle_name A secondary name given to an individual at birth, baptism, or during another naming ceremony.
     *
     * @return self
     */
    public function setMiddleName($middle_name)
    {
        if (is_null($middle_name)) {
            array_push($this->openAPINullablesSetToNull, 'middle_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('middle_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($middle_name) && (mb_strlen($middle_name) > 75)) {
            throw new \InvalidArgumentException('invalid length for $middle_name when calling TpdmCandidate., must be smaller than or equal to 75.');
        }

        $this->container['middle_name'] = $middle_name;

        return $this;
    }

    /**
     * Gets multiple_birth_status
     *
     * @return bool|null
     */
    public function getMultipleBirthStatus()
    {
        return $this->container['multiple_birth_status'];
    }

    /**
     * Sets multiple_birth_status
     *
     * @param bool|null $multiple_birth_status Indicator of whether the student was born with other siblings (i.e., twins, triplets, etc.)
     *
     * @return self
     */
    public function setMultipleBirthStatus($multiple_birth_status)
    {
        if (is_null($multiple_birth_status)) {
            array_push($this->openAPINullablesSetToNull, 'multiple_birth_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('multiple_birth_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['multiple_birth_status'] = $multiple_birth_status;

        return $this;
    }

    /**
     * Gets other_names
     *
     * @return \Resources\Model\TpdmCandidateOtherName[]|null
     */
    public function getOtherNames()
    {
        return $this->container['other_names'];
    }

    /**
     * Sets other_names
     *
     * @param \Resources\Model\TpdmCandidateOtherName[]|null $other_names An unordered collection of candidateOtherNames. Other names (e.g., alias, nickname, previous legal name) associated with a person.
     *
     * @return self
     */
    public function setOtherNames($other_names)
    {
        if (is_null($other_names)) {
            throw new \InvalidArgumentException('non-nullable other_names cannot be null');
        }
        $this->container['other_names'] = $other_names;

        return $this;
    }

    /**
     * Gets personal_identification_documents
     *
     * @return \Resources\Model\TpdmCandidatePersonalIdentificationDocument[]|null
     */
    public function getPersonalIdentificationDocuments()
    {
        return $this->container['personal_identification_documents'];
    }

    /**
     * Sets personal_identification_documents
     *
     * @param \Resources\Model\TpdmCandidatePersonalIdentificationDocument[]|null $personal_identification_documents An unordered collection of candidatePersonalIdentificationDocuments. The documents presented as evident to verify one's personal identity; for example: drivers license, passport, birth certificate, etc.
     *
     * @return self
     */
    public function setPersonalIdentificationDocuments($personal_identification_documents)
    {
        if (is_null($personal_identification_documents)) {
            throw new \InvalidArgumentException('non-nullable personal_identification_documents cannot be null');
        }
        $this->container['personal_identification_documents'] = $personal_identification_documents;

        return $this;
    }

    /**
     * Gets personal_title_prefix
     *
     * @return string|null
     */
    public function getPersonalTitlePrefix()
    {
        return $this->container['personal_title_prefix'];
    }

    /**
     * Sets personal_title_prefix
     *
     * @param string|null $personal_title_prefix A prefix used to denote the title, degree, position, or seniority of the individual.
     *
     * @return self
     */
    public function setPersonalTitlePrefix($personal_title_prefix)
    {
        if (is_null($personal_title_prefix)) {
            array_push($this->openAPINullablesSetToNull, 'personal_title_prefix');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('personal_title_prefix', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($personal_title_prefix) && (mb_strlen($personal_title_prefix) > 30)) {
            throw new \InvalidArgumentException('invalid length for $personal_title_prefix when calling TpdmCandidate., must be smaller than or equal to 30.');
        }

        $this->container['personal_title_prefix'] = $personal_title_prefix;

        return $this;
    }

    /**
     * Gets preferred_first_name
     *
     * @return string|null
     */
    public function getPreferredFirstName()
    {
        return $this->container['preferred_first_name'];
    }

    /**
     * Sets preferred_first_name
     *
     * @param string|null $preferred_first_name The first name the individual prefers, if different from their legal first name
     *
     * @return self
     */
    public function setPreferredFirstName($preferred_first_name)
    {
        if (is_null($preferred_first_name)) {
            array_push($this->openAPINullablesSetToNull, 'preferred_first_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('preferred_first_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($preferred_first_name) && (mb_strlen($preferred_first_name) > 75)) {
            throw new \InvalidArgumentException('invalid length for $preferred_first_name when calling TpdmCandidate., must be smaller than or equal to 75.');
        }

        $this->container['preferred_first_name'] = $preferred_first_name;

        return $this;
    }

    /**
     * Gets preferred_last_surname
     *
     * @return string|null
     */
    public function getPreferredLastSurname()
    {
        return $this->container['preferred_last_surname'];
    }

    /**
     * Sets preferred_last_surname
     *
     * @param string|null $preferred_last_surname The last name the individual prefers, if different from their legal last name
     *
     * @return self
     */
    public function setPreferredLastSurname($preferred_last_surname)
    {
        if (is_null($preferred_last_surname)) {
            array_push($this->openAPINullablesSetToNull, 'preferred_last_surname');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('preferred_last_surname', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($preferred_last_surname) && (mb_strlen($preferred_last_surname) > 75)) {
            throw new \InvalidArgumentException('invalid length for $preferred_last_surname when calling TpdmCandidate., must be smaller than or equal to 75.');
        }

        $this->container['preferred_last_surname'] = $preferred_last_surname;

        return $this;
    }

    /**
     * Gets races
     *
     * @return \Resources\Model\TpdmCandidateRace[]|null
     */
    public function getRaces()
    {
        return $this->container['races'];
    }

    /**
     * Sets races
     *
     * @param \Resources\Model\TpdmCandidateRace[]|null $races An unordered collection of candidateRaces. The general racial category which most clearly reflects the individual's recognition of his or her community or with which the individual most identifies. The data model allows for multiple entries so that each individual can specify all appropriate races.
     *
     * @return self
     */
    public function setRaces($races)
    {
        if (is_null($races)) {
            throw new \InvalidArgumentException('non-nullable races cannot be null');
        }
        $this->container['races'] = $races;

        return $this;
    }

    /**
     * Gets sex_descriptor
     *
     * @return string|null
     */
    public function getSexDescriptor()
    {
        return $this->container['sex_descriptor'];
    }

    /**
     * Sets sex_descriptor
     *
     * @param string|null $sex_descriptor The sex of the candidate.
     *
     * @return self
     */
    public function setSexDescriptor($sex_descriptor)
    {
        if (is_null($sex_descriptor)) {
            array_push($this->openAPINullablesSetToNull, 'sex_descriptor');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sex_descriptor', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($sex_descriptor) && (mb_strlen($sex_descriptor) > 306)) {
            throw new \InvalidArgumentException('invalid length for $sex_descriptor when calling TpdmCandidate., must be smaller than or equal to 306.');
        }

        $this->container['sex_descriptor'] = $sex_descriptor;

        return $this;
    }

    /**
     * Gets telephones
     *
     * @return \Resources\Model\TpdmCandidateTelephone[]|null
     */
    public function getTelephones()
    {
        return $this->container['telephones'];
    }

    /**
     * Sets telephones
     *
     * @param \Resources\Model\TpdmCandidateTelephone[]|null $telephones An unordered collection of candidateTelephones. The 10-digit telephone number, including the area code, for the person.
     *
     * @return self
     */
    public function setTelephones($telephones)
    {
        if (is_null($telephones)) {
            throw new \InvalidArgumentException('non-nullable telephones cannot be null');
        }
        $this->container['telephones'] = $telephones;

        return $this;
    }

    /**
     * Gets _etag
     *
     * @return string|null
     */
    public function getEtag()
    {
        return $this->container['_etag'];
    }

    /**
     * Sets _etag
     *
     * @param string|null $_etag A unique system-generated value that identifies the version of the resource.
     *
     * @return self
     */
    public function setEtag($_etag)
    {
        if (is_null($_etag)) {
            throw new \InvalidArgumentException('non-nullable _etag cannot be null');
        }
        $this->container['_etag'] = $_etag;

        return $this;
    }

    /**
     * Gets _last_modified_date
     *
     * @return \DateTime|null
     */
    public function getLastModifiedDate()
    {
        return $this->container['_last_modified_date'];
    }

    /**
     * Sets _last_modified_date
     *
     * @param \DateTime|null $_last_modified_date The date and time the resource was last modified.
     *
     * @return self
     */
    public function setLastModifiedDate($_last_modified_date)
    {
        if (is_null($_last_modified_date)) {
            throw new \InvalidArgumentException('non-nullable _last_modified_date cannot be null');
        }
        $this->container['_last_modified_date'] = $_last_modified_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


