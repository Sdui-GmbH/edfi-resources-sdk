<?php
/**
 * EdFiStudentEducationOrganizationAssociationDisability
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Resources
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Resources\Model;

use \ArrayAccess;
use \Resources\ObjectSerializer;

/**
 * EdFiStudentEducationOrganizationAssociationDisability Class Doc Comment
 *
 * @category Class
 * @package  Resources
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EdFiStudentEducationOrganizationAssociationDisability implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'edFi_studentEducationOrganizationAssociationDisability';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'disability_descriptor' => 'string',
        'disability_determination_source_type_descriptor' => 'string',
        'disability_diagnosis' => 'string',
        'order_of_disability' => 'int',
        'designations' => '\Resources\Model\EdFiStudentEducationOrganizationAssociationDisabilityDesignation[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'disability_descriptor' => null,
        'disability_determination_source_type_descriptor' => null,
        'disability_diagnosis' => null,
        'order_of_disability' => 'int32',
        'designations' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'disability_descriptor' => false,
        'disability_determination_source_type_descriptor' => true,
        'disability_diagnosis' => true,
        'order_of_disability' => true,
        'designations' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'disability_descriptor' => 'disabilityDescriptor',
        'disability_determination_source_type_descriptor' => 'disabilityDeterminationSourceTypeDescriptor',
        'disability_diagnosis' => 'disabilityDiagnosis',
        'order_of_disability' => 'orderOfDisability',
        'designations' => 'designations'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'disability_descriptor' => 'setDisabilityDescriptor',
        'disability_determination_source_type_descriptor' => 'setDisabilityDeterminationSourceTypeDescriptor',
        'disability_diagnosis' => 'setDisabilityDiagnosis',
        'order_of_disability' => 'setOrderOfDisability',
        'designations' => 'setDesignations'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'disability_descriptor' => 'getDisabilityDescriptor',
        'disability_determination_source_type_descriptor' => 'getDisabilityDeterminationSourceTypeDescriptor',
        'disability_diagnosis' => 'getDisabilityDiagnosis',
        'order_of_disability' => 'getOrderOfDisability',
        'designations' => 'getDesignations'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('disability_descriptor', $data ?? [], null);
        $this->setIfExists('disability_determination_source_type_descriptor', $data ?? [], null);
        $this->setIfExists('disability_diagnosis', $data ?? [], null);
        $this->setIfExists('order_of_disability', $data ?? [], null);
        $this->setIfExists('designations', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['disability_descriptor'] === null) {
            $invalidProperties[] = "'disability_descriptor' can't be null";
        }
        if ((mb_strlen($this->container['disability_descriptor']) > 306)) {
            $invalidProperties[] = "invalid value for 'disability_descriptor', the character length must be smaller than or equal to 306.";
        }

        if (!is_null($this->container['disability_determination_source_type_descriptor']) && (mb_strlen($this->container['disability_determination_source_type_descriptor']) > 306)) {
            $invalidProperties[] = "invalid value for 'disability_determination_source_type_descriptor', the character length must be smaller than or equal to 306.";
        }

        if (!is_null($this->container['disability_diagnosis']) && (mb_strlen($this->container['disability_diagnosis']) > 80)) {
            $invalidProperties[] = "invalid value for 'disability_diagnosis', the character length must be smaller than or equal to 80.";
        }

        if (!is_null($this->container['disability_diagnosis']) && (mb_strlen($this->container['disability_diagnosis']) < 1)) {
            $invalidProperties[] = "invalid value for 'disability_diagnosis', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets disability_descriptor
     *
     * @return string
     */
    public function getDisabilityDescriptor()
    {
        return $this->container['disability_descriptor'];
    }

    /**
     * Sets disability_descriptor
     *
     * @param string $disability_descriptor A disability category that describes a individual's impairment.
     *
     * @return self
     */
    public function setDisabilityDescriptor($disability_descriptor)
    {
        if (is_null($disability_descriptor)) {
            throw new \InvalidArgumentException('non-nullable disability_descriptor cannot be null');
        }
        if ((mb_strlen($disability_descriptor) > 306)) {
            throw new \InvalidArgumentException('invalid length for $disability_descriptor when calling EdFiStudentEducationOrganizationAssociationDisability., must be smaller than or equal to 306.');
        }

        $this->container['disability_descriptor'] = $disability_descriptor;

        return $this;
    }

    /**
     * Gets disability_determination_source_type_descriptor
     *
     * @return string|null
     */
    public function getDisabilityDeterminationSourceTypeDescriptor()
    {
        return $this->container['disability_determination_source_type_descriptor'];
    }

    /**
     * Sets disability_determination_source_type_descriptor
     *
     * @param string|null $disability_determination_source_type_descriptor The source that provided the disability determination.
     *
     * @return self
     */
    public function setDisabilityDeterminationSourceTypeDescriptor($disability_determination_source_type_descriptor)
    {
        if (is_null($disability_determination_source_type_descriptor)) {
            array_push($this->openAPINullablesSetToNull, 'disability_determination_source_type_descriptor');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('disability_determination_source_type_descriptor', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($disability_determination_source_type_descriptor) && (mb_strlen($disability_determination_source_type_descriptor) > 306)) {
            throw new \InvalidArgumentException('invalid length for $disability_determination_source_type_descriptor when calling EdFiStudentEducationOrganizationAssociationDisability., must be smaller than or equal to 306.');
        }

        $this->container['disability_determination_source_type_descriptor'] = $disability_determination_source_type_descriptor;

        return $this;
    }

    /**
     * Gets disability_diagnosis
     *
     * @return string|null
     */
    public function getDisabilityDiagnosis()
    {
        return $this->container['disability_diagnosis'];
    }

    /**
     * Sets disability_diagnosis
     *
     * @param string|null $disability_diagnosis A description of the disability diagnosis.
     *
     * @return self
     */
    public function setDisabilityDiagnosis($disability_diagnosis)
    {
        if (is_null($disability_diagnosis)) {
            array_push($this->openAPINullablesSetToNull, 'disability_diagnosis');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('disability_diagnosis', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($disability_diagnosis) && (mb_strlen($disability_diagnosis) > 80)) {
            throw new \InvalidArgumentException('invalid length for $disability_diagnosis when calling EdFiStudentEducationOrganizationAssociationDisability., must be smaller than or equal to 80.');
        }
        if (!is_null($disability_diagnosis) && (mb_strlen($disability_diagnosis) < 1)) {
            throw new \InvalidArgumentException('invalid length for $disability_diagnosis when calling EdFiStudentEducationOrganizationAssociationDisability., must be bigger than or equal to 1.');
        }

        $this->container['disability_diagnosis'] = $disability_diagnosis;

        return $this;
    }

    /**
     * Gets order_of_disability
     *
     * @return int|null
     */
    public function getOrderOfDisability()
    {
        return $this->container['order_of_disability'];
    }

    /**
     * Sets order_of_disability
     *
     * @param int|null $order_of_disability The order by severity of individual's disabilities: 1- Primary, 2 -  Secondary, 3 - Tertiary, etc.
     *
     * @return self
     */
    public function setOrderOfDisability($order_of_disability)
    {
        if (is_null($order_of_disability)) {
            array_push($this->openAPINullablesSetToNull, 'order_of_disability');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('order_of_disability', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['order_of_disability'] = $order_of_disability;

        return $this;
    }

    /**
     * Gets designations
     *
     * @return \Resources\Model\EdFiStudentEducationOrganizationAssociationDisabilityDesignation[]|null
     */
    public function getDesignations()
    {
        return $this->container['designations'];
    }

    /**
     * Sets designations
     *
     * @param \Resources\Model\EdFiStudentEducationOrganizationAssociationDisabilityDesignation[]|null $designations An unordered collection of studentEducationOrganizationAssociationDisabilityDesignations. Whether the disability is IDEA, Section 504, or other disability designation.
     *
     * @return self
     */
    public function setDesignations($designations)
    {
        if (is_null($designations)) {
            throw new \InvalidArgumentException('non-nullable designations cannot be null');
        }
        $this->container['designations'] = $designations;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


