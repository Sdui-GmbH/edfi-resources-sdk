<?php
/**
 * EdFiStudentSpecialEducationProgramEligibilityAssociation
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Resources
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Resources\Model;

use \ArrayAccess;
use \Resources\ObjectSerializer;

/**
 * EdFiStudentSpecialEducationProgramEligibilityAssociation Class Doc Comment
 *
 * @category Class
 * @package  Resources
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EdFiStudentSpecialEducationProgramEligibilityAssociation implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'edFi_studentSpecialEducationProgramEligibilityAssociation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'consent_to_evaluation_received_date' => '\DateTime',
        'education_organization_reference' => '\Resources\Model\EdFiEducationOrganizationReference',
        'program_reference' => '\Resources\Model\EdFiProgramReference',
        'student_reference' => '\Resources\Model\EdFiStudentReference',
        'consent_to_evaluation_date' => '\DateTime',
        'eligibility_conference_date' => '\DateTime',
        'eligibility_delay_reason_descriptor' => 'string',
        'eligibility_determination_date' => '\DateTime',
        'eligibility_evaluation_date' => '\DateTime',
        'eligibility_evaluation_type_descriptor' => 'string',
        'evaluation_complete_indicator' => 'bool',
        'evaluation_delay_days' => 'int',
        'evaluation_delay_reason_descriptor' => 'string',
        'evaluation_late_reason' => 'string',
        'idea_indicator' => 'bool',
        'idea_part_descriptor' => 'string',
        'original_eci_services_date' => '\DateTime',
        'transition_conference_date' => '\DateTime',
        'transition_notification_date' => '\DateTime',
        '_etag' => 'string',
        '_last_modified_date' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'consent_to_evaluation_received_date' => 'date',
        'education_organization_reference' => null,
        'program_reference' => null,
        'student_reference' => null,
        'consent_to_evaluation_date' => 'date',
        'eligibility_conference_date' => 'date',
        'eligibility_delay_reason_descriptor' => null,
        'eligibility_determination_date' => 'date',
        'eligibility_evaluation_date' => 'date',
        'eligibility_evaluation_type_descriptor' => null,
        'evaluation_complete_indicator' => null,
        'evaluation_delay_days' => 'int32',
        'evaluation_delay_reason_descriptor' => null,
        'evaluation_late_reason' => null,
        'idea_indicator' => null,
        'idea_part_descriptor' => null,
        'original_eci_services_date' => 'date',
        'transition_conference_date' => 'date',
        'transition_notification_date' => 'date',
        '_etag' => null,
        '_last_modified_date' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'consent_to_evaluation_received_date' => false,
        'education_organization_reference' => false,
        'program_reference' => false,
        'student_reference' => false,
        'consent_to_evaluation_date' => true,
        'eligibility_conference_date' => true,
        'eligibility_delay_reason_descriptor' => true,
        'eligibility_determination_date' => true,
        'eligibility_evaluation_date' => true,
        'eligibility_evaluation_type_descriptor' => true,
        'evaluation_complete_indicator' => true,
        'evaluation_delay_days' => true,
        'evaluation_delay_reason_descriptor' => true,
        'evaluation_late_reason' => true,
        'idea_indicator' => true,
        'idea_part_descriptor' => false,
        'original_eci_services_date' => true,
        'transition_conference_date' => true,
        'transition_notification_date' => true,
        '_etag' => false,
        '_last_modified_date' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'consent_to_evaluation_received_date' => 'consentToEvaluationReceivedDate',
        'education_organization_reference' => 'educationOrganizationReference',
        'program_reference' => 'programReference',
        'student_reference' => 'studentReference',
        'consent_to_evaluation_date' => 'consentToEvaluationDate',
        'eligibility_conference_date' => 'eligibilityConferenceDate',
        'eligibility_delay_reason_descriptor' => 'eligibilityDelayReasonDescriptor',
        'eligibility_determination_date' => 'eligibilityDeterminationDate',
        'eligibility_evaluation_date' => 'eligibilityEvaluationDate',
        'eligibility_evaluation_type_descriptor' => 'eligibilityEvaluationTypeDescriptor',
        'evaluation_complete_indicator' => 'evaluationCompleteIndicator',
        'evaluation_delay_days' => 'evaluationDelayDays',
        'evaluation_delay_reason_descriptor' => 'evaluationDelayReasonDescriptor',
        'evaluation_late_reason' => 'evaluationLateReason',
        'idea_indicator' => 'ideaIndicator',
        'idea_part_descriptor' => 'ideaPartDescriptor',
        'original_eci_services_date' => 'originalECIServicesDate',
        'transition_conference_date' => 'transitionConferenceDate',
        'transition_notification_date' => 'transitionNotificationDate',
        '_etag' => '_etag',
        '_last_modified_date' => '_lastModifiedDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'consent_to_evaluation_received_date' => 'setConsentToEvaluationReceivedDate',
        'education_organization_reference' => 'setEducationOrganizationReference',
        'program_reference' => 'setProgramReference',
        'student_reference' => 'setStudentReference',
        'consent_to_evaluation_date' => 'setConsentToEvaluationDate',
        'eligibility_conference_date' => 'setEligibilityConferenceDate',
        'eligibility_delay_reason_descriptor' => 'setEligibilityDelayReasonDescriptor',
        'eligibility_determination_date' => 'setEligibilityDeterminationDate',
        'eligibility_evaluation_date' => 'setEligibilityEvaluationDate',
        'eligibility_evaluation_type_descriptor' => 'setEligibilityEvaluationTypeDescriptor',
        'evaluation_complete_indicator' => 'setEvaluationCompleteIndicator',
        'evaluation_delay_days' => 'setEvaluationDelayDays',
        'evaluation_delay_reason_descriptor' => 'setEvaluationDelayReasonDescriptor',
        'evaluation_late_reason' => 'setEvaluationLateReason',
        'idea_indicator' => 'setIdeaIndicator',
        'idea_part_descriptor' => 'setIdeaPartDescriptor',
        'original_eci_services_date' => 'setOriginalEciServicesDate',
        'transition_conference_date' => 'setTransitionConferenceDate',
        'transition_notification_date' => 'setTransitionNotificationDate',
        '_etag' => 'setEtag',
        '_last_modified_date' => 'setLastModifiedDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'consent_to_evaluation_received_date' => 'getConsentToEvaluationReceivedDate',
        'education_organization_reference' => 'getEducationOrganizationReference',
        'program_reference' => 'getProgramReference',
        'student_reference' => 'getStudentReference',
        'consent_to_evaluation_date' => 'getConsentToEvaluationDate',
        'eligibility_conference_date' => 'getEligibilityConferenceDate',
        'eligibility_delay_reason_descriptor' => 'getEligibilityDelayReasonDescriptor',
        'eligibility_determination_date' => 'getEligibilityDeterminationDate',
        'eligibility_evaluation_date' => 'getEligibilityEvaluationDate',
        'eligibility_evaluation_type_descriptor' => 'getEligibilityEvaluationTypeDescriptor',
        'evaluation_complete_indicator' => 'getEvaluationCompleteIndicator',
        'evaluation_delay_days' => 'getEvaluationDelayDays',
        'evaluation_delay_reason_descriptor' => 'getEvaluationDelayReasonDescriptor',
        'evaluation_late_reason' => 'getEvaluationLateReason',
        'idea_indicator' => 'getIdeaIndicator',
        'idea_part_descriptor' => 'getIdeaPartDescriptor',
        'original_eci_services_date' => 'getOriginalEciServicesDate',
        'transition_conference_date' => 'getTransitionConferenceDate',
        'transition_notification_date' => 'getTransitionNotificationDate',
        '_etag' => 'getEtag',
        '_last_modified_date' => 'getLastModifiedDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('consent_to_evaluation_received_date', $data ?? [], null);
        $this->setIfExists('education_organization_reference', $data ?? [], null);
        $this->setIfExists('program_reference', $data ?? [], null);
        $this->setIfExists('student_reference', $data ?? [], null);
        $this->setIfExists('consent_to_evaluation_date', $data ?? [], null);
        $this->setIfExists('eligibility_conference_date', $data ?? [], null);
        $this->setIfExists('eligibility_delay_reason_descriptor', $data ?? [], null);
        $this->setIfExists('eligibility_determination_date', $data ?? [], null);
        $this->setIfExists('eligibility_evaluation_date', $data ?? [], null);
        $this->setIfExists('eligibility_evaluation_type_descriptor', $data ?? [], null);
        $this->setIfExists('evaluation_complete_indicator', $data ?? [], null);
        $this->setIfExists('evaluation_delay_days', $data ?? [], null);
        $this->setIfExists('evaluation_delay_reason_descriptor', $data ?? [], null);
        $this->setIfExists('evaluation_late_reason', $data ?? [], null);
        $this->setIfExists('idea_indicator', $data ?? [], null);
        $this->setIfExists('idea_part_descriptor', $data ?? [], null);
        $this->setIfExists('original_eci_services_date', $data ?? [], null);
        $this->setIfExists('transition_conference_date', $data ?? [], null);
        $this->setIfExists('transition_notification_date', $data ?? [], null);
        $this->setIfExists('_etag', $data ?? [], null);
        $this->setIfExists('_last_modified_date', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['consent_to_evaluation_received_date'] === null) {
            $invalidProperties[] = "'consent_to_evaluation_received_date' can't be null";
        }
        if ($this->container['education_organization_reference'] === null) {
            $invalidProperties[] = "'education_organization_reference' can't be null";
        }
        if ($this->container['program_reference'] === null) {
            $invalidProperties[] = "'program_reference' can't be null";
        }
        if ($this->container['student_reference'] === null) {
            $invalidProperties[] = "'student_reference' can't be null";
        }
        if (!is_null($this->container['eligibility_delay_reason_descriptor']) && (mb_strlen($this->container['eligibility_delay_reason_descriptor']) > 306)) {
            $invalidProperties[] = "invalid value for 'eligibility_delay_reason_descriptor', the character length must be smaller than or equal to 306.";
        }

        if (!is_null($this->container['eligibility_evaluation_type_descriptor']) && (mb_strlen($this->container['eligibility_evaluation_type_descriptor']) > 306)) {
            $invalidProperties[] = "invalid value for 'eligibility_evaluation_type_descriptor', the character length must be smaller than or equal to 306.";
        }

        if (!is_null($this->container['evaluation_delay_reason_descriptor']) && (mb_strlen($this->container['evaluation_delay_reason_descriptor']) > 306)) {
            $invalidProperties[] = "invalid value for 'evaluation_delay_reason_descriptor', the character length must be smaller than or equal to 306.";
        }

        if (!is_null($this->container['evaluation_late_reason']) && (mb_strlen($this->container['evaluation_late_reason']) > 255)) {
            $invalidProperties[] = "invalid value for 'evaluation_late_reason', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['evaluation_late_reason']) && (mb_strlen($this->container['evaluation_late_reason']) < 1)) {
            $invalidProperties[] = "invalid value for 'evaluation_late_reason', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['idea_part_descriptor'] === null) {
            $invalidProperties[] = "'idea_part_descriptor' can't be null";
        }
        if ((mb_strlen($this->container['idea_part_descriptor']) > 306)) {
            $invalidProperties[] = "invalid value for 'idea_part_descriptor', the character length must be smaller than or equal to 306.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id 
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets consent_to_evaluation_received_date
     *
     * @return \DateTime
     */
    public function getConsentToEvaluationReceivedDate()
    {
        return $this->container['consent_to_evaluation_received_date'];
    }

    /**
     * Sets consent_to_evaluation_received_date
     *
     * @param \DateTime $consent_to_evaluation_received_date Indicates the date on which the local education agency received written consent for the evaluation from the student's parent or guardian. This is the first day of the evaluation timeframe.
     *
     * @return self
     */
    public function setConsentToEvaluationReceivedDate($consent_to_evaluation_received_date)
    {
        if (is_null($consent_to_evaluation_received_date)) {
            throw new \InvalidArgumentException('non-nullable consent_to_evaluation_received_date cannot be null');
        }
        $this->container['consent_to_evaluation_received_date'] = $consent_to_evaluation_received_date;

        return $this;
    }

    /**
     * Gets education_organization_reference
     *
     * @return \Resources\Model\EdFiEducationOrganizationReference
     */
    public function getEducationOrganizationReference()
    {
        return $this->container['education_organization_reference'];
    }

    /**
     * Sets education_organization_reference
     *
     * @param \Resources\Model\EdFiEducationOrganizationReference $education_organization_reference education_organization_reference
     *
     * @return self
     */
    public function setEducationOrganizationReference($education_organization_reference)
    {
        if (is_null($education_organization_reference)) {
            throw new \InvalidArgumentException('non-nullable education_organization_reference cannot be null');
        }
        $this->container['education_organization_reference'] = $education_organization_reference;

        return $this;
    }

    /**
     * Gets program_reference
     *
     * @return \Resources\Model\EdFiProgramReference
     */
    public function getProgramReference()
    {
        return $this->container['program_reference'];
    }

    /**
     * Sets program_reference
     *
     * @param \Resources\Model\EdFiProgramReference $program_reference program_reference
     *
     * @return self
     */
    public function setProgramReference($program_reference)
    {
        if (is_null($program_reference)) {
            throw new \InvalidArgumentException('non-nullable program_reference cannot be null');
        }
        $this->container['program_reference'] = $program_reference;

        return $this;
    }

    /**
     * Gets student_reference
     *
     * @return \Resources\Model\EdFiStudentReference
     */
    public function getStudentReference()
    {
        return $this->container['student_reference'];
    }

    /**
     * Sets student_reference
     *
     * @param \Resources\Model\EdFiStudentReference $student_reference student_reference
     *
     * @return self
     */
    public function setStudentReference($student_reference)
    {
        if (is_null($student_reference)) {
            throw new \InvalidArgumentException('non-nullable student_reference cannot be null');
        }
        $this->container['student_reference'] = $student_reference;

        return $this;
    }

    /**
     * Gets consent_to_evaluation_date
     *
     * @return \DateTime|null
     */
    public function getConsentToEvaluationDate()
    {
        return $this->container['consent_to_evaluation_date'];
    }

    /**
     * Sets consent_to_evaluation_date
     *
     * @param \DateTime|null $consent_to_evaluation_date The date on which the student's parent gave a consent (Parent Consent Date).
     *
     * @return self
     */
    public function setConsentToEvaluationDate($consent_to_evaluation_date)
    {
        if (is_null($consent_to_evaluation_date)) {
            array_push($this->openAPINullablesSetToNull, 'consent_to_evaluation_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('consent_to_evaluation_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['consent_to_evaluation_date'] = $consent_to_evaluation_date;

        return $this;
    }

    /**
     * Gets eligibility_conference_date
     *
     * @return \DateTime|null
     */
    public function getEligibilityConferenceDate()
    {
        return $this->container['eligibility_conference_date'];
    }

    /**
     * Sets eligibility_conference_date
     *
     * @param \DateTime|null $eligibility_conference_date The month, day, and year when the eligibility conference is held between the parent(s)/guardian(s) and the educational organization responsible staff member(s) to review and make decision on special education related services eligibility.
     *
     * @return self
     */
    public function setEligibilityConferenceDate($eligibility_conference_date)
    {
        if (is_null($eligibility_conference_date)) {
            array_push($this->openAPINullablesSetToNull, 'eligibility_conference_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('eligibility_conference_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['eligibility_conference_date'] = $eligibility_conference_date;

        return $this;
    }

    /**
     * Gets eligibility_delay_reason_descriptor
     *
     * @return string|null
     */
    public function getEligibilityDelayReasonDescriptor()
    {
        return $this->container['eligibility_delay_reason_descriptor'];
    }

    /**
     * Sets eligibility_delay_reason_descriptor
     *
     * @param string|null $eligibility_delay_reason_descriptor The reason why the eligibility determination was completed beyond the required timeframe.
     *
     * @return self
     */
    public function setEligibilityDelayReasonDescriptor($eligibility_delay_reason_descriptor)
    {
        if (is_null($eligibility_delay_reason_descriptor)) {
            array_push($this->openAPINullablesSetToNull, 'eligibility_delay_reason_descriptor');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('eligibility_delay_reason_descriptor', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($eligibility_delay_reason_descriptor) && (mb_strlen($eligibility_delay_reason_descriptor) > 306)) {
            throw new \InvalidArgumentException('invalid length for $eligibility_delay_reason_descriptor when calling EdFiStudentSpecialEducationProgramEligibilityAssociation., must be smaller than or equal to 306.');
        }

        $this->container['eligibility_delay_reason_descriptor'] = $eligibility_delay_reason_descriptor;

        return $this;
    }

    /**
     * Gets eligibility_determination_date
     *
     * @return \DateTime|null
     */
    public function getEligibilityDeterminationDate()
    {
        return $this->container['eligibility_determination_date'];
    }

    /**
     * Sets eligibility_determination_date
     *
     * @param \DateTime|null $eligibility_determination_date Indicates the month, day, and year the local education agency (LEA) held the admission, review, and dismissal committee meeting regarding the child's eligibility determination for special education and related services. An individualized education plan (IEP) would be developed and implemented for a child admitted into special education on this same date.
     *
     * @return self
     */
    public function setEligibilityDeterminationDate($eligibility_determination_date)
    {
        if (is_null($eligibility_determination_date)) {
            array_push($this->openAPINullablesSetToNull, 'eligibility_determination_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('eligibility_determination_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['eligibility_determination_date'] = $eligibility_determination_date;

        return $this;
    }

    /**
     * Gets eligibility_evaluation_date
     *
     * @return \DateTime|null
     */
    public function getEligibilityEvaluationDate()
    {
        return $this->container['eligibility_evaluation_date'];
    }

    /**
     * Sets eligibility_evaluation_date
     *
     * @param \DateTime|null $eligibility_evaluation_date Indicates the month, day, and year when the written individual evaluation report was completed.
     *
     * @return self
     */
    public function setEligibilityEvaluationDate($eligibility_evaluation_date)
    {
        if (is_null($eligibility_evaluation_date)) {
            array_push($this->openAPINullablesSetToNull, 'eligibility_evaluation_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('eligibility_evaluation_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['eligibility_evaluation_date'] = $eligibility_evaluation_date;

        return $this;
    }

    /**
     * Gets eligibility_evaluation_type_descriptor
     *
     * @return string|null
     */
    public function getEligibilityEvaluationTypeDescriptor()
    {
        return $this->container['eligibility_evaluation_type_descriptor'];
    }

    /**
     * Sets eligibility_evaluation_type_descriptor
     *
     * @param string|null $eligibility_evaluation_type_descriptor Indicates if this is an initial evaluation or a reevaluation.
     *
     * @return self
     */
    public function setEligibilityEvaluationTypeDescriptor($eligibility_evaluation_type_descriptor)
    {
        if (is_null($eligibility_evaluation_type_descriptor)) {
            array_push($this->openAPINullablesSetToNull, 'eligibility_evaluation_type_descriptor');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('eligibility_evaluation_type_descriptor', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($eligibility_evaluation_type_descriptor) && (mb_strlen($eligibility_evaluation_type_descriptor) > 306)) {
            throw new \InvalidArgumentException('invalid length for $eligibility_evaluation_type_descriptor when calling EdFiStudentSpecialEducationProgramEligibilityAssociation., must be smaller than or equal to 306.');
        }

        $this->container['eligibility_evaluation_type_descriptor'] = $eligibility_evaluation_type_descriptor;

        return $this;
    }

    /**
     * Gets evaluation_complete_indicator
     *
     * @return bool|null
     */
    public function getEvaluationCompleteIndicator()
    {
        return $this->container['evaluation_complete_indicator'];
    }

    /**
     * Sets evaluation_complete_indicator
     *
     * @param bool|null $evaluation_complete_indicator Indicates the evaluation completed status.
     *
     * @return self
     */
    public function setEvaluationCompleteIndicator($evaluation_complete_indicator)
    {
        if (is_null($evaluation_complete_indicator)) {
            array_push($this->openAPINullablesSetToNull, 'evaluation_complete_indicator');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('evaluation_complete_indicator', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['evaluation_complete_indicator'] = $evaluation_complete_indicator;

        return $this;
    }

    /**
     * Gets evaluation_delay_days
     *
     * @return int|null
     */
    public function getEvaluationDelayDays()
    {
        return $this->container['evaluation_delay_days'];
    }

    /**
     * Sets evaluation_delay_days
     *
     * @param int|null $evaluation_delay_days Indicates the number of student absences, if any, beginning the first instructional day following the date on which the local education agency (LEA) received written parental or guardian consent for the evaluation.
     *
     * @return self
     */
    public function setEvaluationDelayDays($evaluation_delay_days)
    {
        if (is_null($evaluation_delay_days)) {
            array_push($this->openAPINullablesSetToNull, 'evaluation_delay_days');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('evaluation_delay_days', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['evaluation_delay_days'] = $evaluation_delay_days;

        return $this;
    }

    /**
     * Gets evaluation_delay_reason_descriptor
     *
     * @return string|null
     */
    public function getEvaluationDelayReasonDescriptor()
    {
        return $this->container['evaluation_delay_reason_descriptor'];
    }

    /**
     * Sets evaluation_delay_reason_descriptor
     *
     * @param string|null $evaluation_delay_reason_descriptor Refers to the justification as to why the evaluation report was completed beyond the state-established timeframe. This descriptor field will have allowed reasons as descriptor values.
     *
     * @return self
     */
    public function setEvaluationDelayReasonDescriptor($evaluation_delay_reason_descriptor)
    {
        if (is_null($evaluation_delay_reason_descriptor)) {
            array_push($this->openAPINullablesSetToNull, 'evaluation_delay_reason_descriptor');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('evaluation_delay_reason_descriptor', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($evaluation_delay_reason_descriptor) && (mb_strlen($evaluation_delay_reason_descriptor) > 306)) {
            throw new \InvalidArgumentException('invalid length for $evaluation_delay_reason_descriptor when calling EdFiStudentSpecialEducationProgramEligibilityAssociation., must be smaller than or equal to 306.');
        }

        $this->container['evaluation_delay_reason_descriptor'] = $evaluation_delay_reason_descriptor;

        return $this;
    }

    /**
     * Gets evaluation_late_reason
     *
     * @return string|null
     */
    public function getEvaluationLateReason()
    {
        return $this->container['evaluation_late_reason'];
    }

    /**
     * Sets evaluation_late_reason
     *
     * @param string|null $evaluation_late_reason Refers to additional information for delay in doing the evaluation.
     *
     * @return self
     */
    public function setEvaluationLateReason($evaluation_late_reason)
    {
        if (is_null($evaluation_late_reason)) {
            array_push($this->openAPINullablesSetToNull, 'evaluation_late_reason');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('evaluation_late_reason', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($evaluation_late_reason) && (mb_strlen($evaluation_late_reason) > 255)) {
            throw new \InvalidArgumentException('invalid length for $evaluation_late_reason when calling EdFiStudentSpecialEducationProgramEligibilityAssociation., must be smaller than or equal to 255.');
        }
        if (!is_null($evaluation_late_reason) && (mb_strlen($evaluation_late_reason) < 1)) {
            throw new \InvalidArgumentException('invalid length for $evaluation_late_reason when calling EdFiStudentSpecialEducationProgramEligibilityAssociation., must be bigger than or equal to 1.');
        }

        $this->container['evaluation_late_reason'] = $evaluation_late_reason;

        return $this;
    }

    /**
     * Gets idea_indicator
     *
     * @return bool|null
     */
    public function getIdeaIndicator()
    {
        return $this->container['idea_indicator'];
    }

    /**
     * Sets idea_indicator
     *
     * @param bool|null $idea_indicator Indicates whether or not the student was determined eligible as a result of an evaluation.
     *
     * @return self
     */
    public function setIdeaIndicator($idea_indicator)
    {
        if (is_null($idea_indicator)) {
            array_push($this->openAPINullablesSetToNull, 'idea_indicator');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('idea_indicator', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['idea_indicator'] = $idea_indicator;

        return $this;
    }

    /**
     * Gets idea_part_descriptor
     *
     * @return string
     */
    public function getIdeaPartDescriptor()
    {
        return $this->container['idea_part_descriptor'];
    }

    /**
     * Sets idea_part_descriptor
     *
     * @param string $idea_part_descriptor Indicates if the evaluation is done under Part B IDEA or Part C IDEA.
     *
     * @return self
     */
    public function setIdeaPartDescriptor($idea_part_descriptor)
    {
        if (is_null($idea_part_descriptor)) {
            throw new \InvalidArgumentException('non-nullable idea_part_descriptor cannot be null');
        }
        if ((mb_strlen($idea_part_descriptor) > 306)) {
            throw new \InvalidArgumentException('invalid length for $idea_part_descriptor when calling EdFiStudentSpecialEducationProgramEligibilityAssociation., must be smaller than or equal to 306.');
        }

        $this->container['idea_part_descriptor'] = $idea_part_descriptor;

        return $this;
    }

    /**
     * Gets original_eci_services_date
     *
     * @return \DateTime|null
     */
    public function getOriginalEciServicesDate()
    {
        return $this->container['original_eci_services_date'];
    }

    /**
     * Sets original_eci_services_date
     *
     * @param \DateTime|null $original_eci_services_date The month, date, and year when an infant or toddler, from birth through age 2, began participating in the early childhood intervention (ECI) program.
     *
     * @return self
     */
    public function setOriginalEciServicesDate($original_eci_services_date)
    {
        if (is_null($original_eci_services_date)) {
            array_push($this->openAPINullablesSetToNull, 'original_eci_services_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('original_eci_services_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['original_eci_services_date'] = $original_eci_services_date;

        return $this;
    }

    /**
     * Gets transition_conference_date
     *
     * @return \DateTime|null
     */
    public function getTransitionConferenceDate()
    {
        return $this->container['transition_conference_date'];
    }

    /**
     * Sets transition_conference_date
     *
     * @param \DateTime|null $transition_conference_date Indicates the month, day, and year when the transition conference was held (for a child receiving early childhood intervention (ECI) services) among the lead agency, the family, and the local education agency (LEA) where the child resides to discuss the child's potential eligibility for early childhood special education (ECSE) services.
     *
     * @return self
     */
    public function setTransitionConferenceDate($transition_conference_date)
    {
        if (is_null($transition_conference_date)) {
            array_push($this->openAPINullablesSetToNull, 'transition_conference_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('transition_conference_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['transition_conference_date'] = $transition_conference_date;

        return $this;
    }

    /**
     * Gets transition_notification_date
     *
     * @return \DateTime|null
     */
    public function getTransitionNotificationDate()
    {
        return $this->container['transition_notification_date'];
    }

    /**
     * Sets transition_notification_date
     *
     * @param \DateTime|null $transition_notification_date Indicates the month, day, and year the LEA Notification of Potentially Eligible for Special Education Services was sent by the early childhood intervention (ECI) contractor to the local education agency (LEA) to notify them that a child enrolled in ECI will shortly reach the age of eligibility for Part B services and the child is potentially eligible for services under Part B, early childhood special education (ECSE). The LEA Notification constitutes a referral to the LEA for an initial evaluation and eligibility determination of the child which the parent or guardian may opt out from the referral.
     *
     * @return self
     */
    public function setTransitionNotificationDate($transition_notification_date)
    {
        if (is_null($transition_notification_date)) {
            array_push($this->openAPINullablesSetToNull, 'transition_notification_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('transition_notification_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['transition_notification_date'] = $transition_notification_date;

        return $this;
    }

    /**
     * Gets _etag
     *
     * @return string|null
     */
    public function getEtag()
    {
        return $this->container['_etag'];
    }

    /**
     * Sets _etag
     *
     * @param string|null $_etag A unique system-generated value that identifies the version of the resource.
     *
     * @return self
     */
    public function setEtag($_etag)
    {
        if (is_null($_etag)) {
            throw new \InvalidArgumentException('non-nullable _etag cannot be null');
        }
        $this->container['_etag'] = $_etag;

        return $this;
    }

    /**
     * Gets _last_modified_date
     *
     * @return \DateTime|null
     */
    public function getLastModifiedDate()
    {
        return $this->container['_last_modified_date'];
    }

    /**
     * Sets _last_modified_date
     *
     * @param \DateTime|null $_last_modified_date The date and time the resource was last modified.
     *
     * @return self
     */
    public function setLastModifiedDate($_last_modified_date)
    {
        if (is_null($_last_modified_date)) {
            throw new \InvalidArgumentException('non-nullable _last_modified_date cannot be null');
        }
        $this->container['_last_modified_date'] = $_last_modified_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


