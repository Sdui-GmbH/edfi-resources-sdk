<?php
/**
 * TpdmPerformanceEvaluationRating
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Resources
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Resources\Model;

use \ArrayAccess;
use \Resources\ObjectSerializer;

/**
 * TpdmPerformanceEvaluationRating Class Doc Comment
 *
 * @category Class
 * @package  Resources
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TpdmPerformanceEvaluationRating implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'tpdm_performanceEvaluationRating';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'performance_evaluation_reference' => '\Resources\Model\TpdmPerformanceEvaluationReference',
        'person_reference' => '\Resources\Model\EdFiPersonReference',
        'actual_date' => '\DateTime',
        'actual_duration' => 'int',
        'actual_time' => 'string',
        'announced' => 'bool',
        'comments' => 'string',
        'coteaching_style_observed_descriptor' => 'string',
        'performance_evaluation_rating_level_descriptor' => 'string',
        'results' => '\Resources\Model\TpdmPerformanceEvaluationRatingResult[]',
        'reviewers' => '\Resources\Model\TpdmPerformanceEvaluationRatingReviewer[]',
        'schedule_date' => '\DateTime',
        '_etag' => 'string',
        '_last_modified_date' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'performance_evaluation_reference' => null,
        'person_reference' => null,
        'actual_date' => 'date',
        'actual_duration' => 'int32',
        'actual_time' => null,
        'announced' => null,
        'comments' => null,
        'coteaching_style_observed_descriptor' => null,
        'performance_evaluation_rating_level_descriptor' => null,
        'results' => null,
        'reviewers' => null,
        'schedule_date' => 'date',
        '_etag' => null,
        '_last_modified_date' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'performance_evaluation_reference' => false,
        'person_reference' => false,
        'actual_date' => false,
        'actual_duration' => true,
        'actual_time' => true,
        'announced' => true,
        'comments' => true,
        'coteaching_style_observed_descriptor' => true,
        'performance_evaluation_rating_level_descriptor' => true,
        'results' => false,
        'reviewers' => false,
        'schedule_date' => true,
        '_etag' => false,
        '_last_modified_date' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'performance_evaluation_reference' => 'performanceEvaluationReference',
        'person_reference' => 'personReference',
        'actual_date' => 'actualDate',
        'actual_duration' => 'actualDuration',
        'actual_time' => 'actualTime',
        'announced' => 'announced',
        'comments' => 'comments',
        'coteaching_style_observed_descriptor' => 'coteachingStyleObservedDescriptor',
        'performance_evaluation_rating_level_descriptor' => 'performanceEvaluationRatingLevelDescriptor',
        'results' => 'results',
        'reviewers' => 'reviewers',
        'schedule_date' => 'scheduleDate',
        '_etag' => '_etag',
        '_last_modified_date' => '_lastModifiedDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'performance_evaluation_reference' => 'setPerformanceEvaluationReference',
        'person_reference' => 'setPersonReference',
        'actual_date' => 'setActualDate',
        'actual_duration' => 'setActualDuration',
        'actual_time' => 'setActualTime',
        'announced' => 'setAnnounced',
        'comments' => 'setComments',
        'coteaching_style_observed_descriptor' => 'setCoteachingStyleObservedDescriptor',
        'performance_evaluation_rating_level_descriptor' => 'setPerformanceEvaluationRatingLevelDescriptor',
        'results' => 'setResults',
        'reviewers' => 'setReviewers',
        'schedule_date' => 'setScheduleDate',
        '_etag' => 'setEtag',
        '_last_modified_date' => 'setLastModifiedDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'performance_evaluation_reference' => 'getPerformanceEvaluationReference',
        'person_reference' => 'getPersonReference',
        'actual_date' => 'getActualDate',
        'actual_duration' => 'getActualDuration',
        'actual_time' => 'getActualTime',
        'announced' => 'getAnnounced',
        'comments' => 'getComments',
        'coteaching_style_observed_descriptor' => 'getCoteachingStyleObservedDescriptor',
        'performance_evaluation_rating_level_descriptor' => 'getPerformanceEvaluationRatingLevelDescriptor',
        'results' => 'getResults',
        'reviewers' => 'getReviewers',
        'schedule_date' => 'getScheduleDate',
        '_etag' => 'getEtag',
        '_last_modified_date' => 'getLastModifiedDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('performance_evaluation_reference', $data ?? [], null);
        $this->setIfExists('person_reference', $data ?? [], null);
        $this->setIfExists('actual_date', $data ?? [], null);
        $this->setIfExists('actual_duration', $data ?? [], null);
        $this->setIfExists('actual_time', $data ?? [], null);
        $this->setIfExists('announced', $data ?? [], null);
        $this->setIfExists('comments', $data ?? [], null);
        $this->setIfExists('coteaching_style_observed_descriptor', $data ?? [], null);
        $this->setIfExists('performance_evaluation_rating_level_descriptor', $data ?? [], null);
        $this->setIfExists('results', $data ?? [], null);
        $this->setIfExists('reviewers', $data ?? [], null);
        $this->setIfExists('schedule_date', $data ?? [], null);
        $this->setIfExists('_etag', $data ?? [], null);
        $this->setIfExists('_last_modified_date', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['performance_evaluation_reference'] === null) {
            $invalidProperties[] = "'performance_evaluation_reference' can't be null";
        }
        if ($this->container['person_reference'] === null) {
            $invalidProperties[] = "'person_reference' can't be null";
        }
        if ($this->container['actual_date'] === null) {
            $invalidProperties[] = "'actual_date' can't be null";
        }
        if (!is_null($this->container['actual_duration']) && ($this->container['actual_duration'] < 1)) {
            $invalidProperties[] = "invalid value for 'actual_duration', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['comments']) && (mb_strlen($this->container['comments']) > 1024)) {
            $invalidProperties[] = "invalid value for 'comments', the character length must be smaller than or equal to 1024.";
        }

        if (!is_null($this->container['comments']) && (mb_strlen($this->container['comments']) < 1)) {
            $invalidProperties[] = "invalid value for 'comments', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['coteaching_style_observed_descriptor']) && (mb_strlen($this->container['coteaching_style_observed_descriptor']) > 306)) {
            $invalidProperties[] = "invalid value for 'coteaching_style_observed_descriptor', the character length must be smaller than or equal to 306.";
        }

        if (!is_null($this->container['performance_evaluation_rating_level_descriptor']) && (mb_strlen($this->container['performance_evaluation_rating_level_descriptor']) > 306)) {
            $invalidProperties[] = "invalid value for 'performance_evaluation_rating_level_descriptor', the character length must be smaller than or equal to 306.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id 
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets performance_evaluation_reference
     *
     * @return \Resources\Model\TpdmPerformanceEvaluationReference
     */
    public function getPerformanceEvaluationReference()
    {
        return $this->container['performance_evaluation_reference'];
    }

    /**
     * Sets performance_evaluation_reference
     *
     * @param \Resources\Model\TpdmPerformanceEvaluationReference $performance_evaluation_reference performance_evaluation_reference
     *
     * @return self
     */
    public function setPerformanceEvaluationReference($performance_evaluation_reference)
    {
        if (is_null($performance_evaluation_reference)) {
            throw new \InvalidArgumentException('non-nullable performance_evaluation_reference cannot be null');
        }
        $this->container['performance_evaluation_reference'] = $performance_evaluation_reference;

        return $this;
    }

    /**
     * Gets person_reference
     *
     * @return \Resources\Model\EdFiPersonReference
     */
    public function getPersonReference()
    {
        return $this->container['person_reference'];
    }

    /**
     * Sets person_reference
     *
     * @param \Resources\Model\EdFiPersonReference $person_reference person_reference
     *
     * @return self
     */
    public function setPersonReference($person_reference)
    {
        if (is_null($person_reference)) {
            throw new \InvalidArgumentException('non-nullable person_reference cannot be null');
        }
        $this->container['person_reference'] = $person_reference;

        return $this;
    }

    /**
     * Gets actual_date
     *
     * @return \DateTime
     */
    public function getActualDate()
    {
        return $this->container['actual_date'];
    }

    /**
     * Sets actual_date
     *
     * @param \DateTime $actual_date The month, day, and year on which the performance evaluation was conducted.
     *
     * @return self
     */
    public function setActualDate($actual_date)
    {
        if (is_null($actual_date)) {
            throw new \InvalidArgumentException('non-nullable actual_date cannot be null');
        }
        $this->container['actual_date'] = $actual_date;

        return $this;
    }

    /**
     * Gets actual_duration
     *
     * @return int|null
     */
    public function getActualDuration()
    {
        return $this->container['actual_duration'];
    }

    /**
     * Sets actual_duration
     *
     * @param int|null $actual_duration The actual or estimated number of clock minutes during which the performance evaluation was conducted.
     *
     * @return self
     */
    public function setActualDuration($actual_duration)
    {
        if (is_null($actual_duration)) {
            array_push($this->openAPINullablesSetToNull, 'actual_duration');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('actual_duration', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($actual_duration) && ($actual_duration < 1)) {
            throw new \InvalidArgumentException('invalid value for $actual_duration when calling TpdmPerformanceEvaluationRating., must be bigger than or equal to 1.');
        }

        $this->container['actual_duration'] = $actual_duration;

        return $this;
    }

    /**
     * Gets actual_time
     *
     * @return string|null
     */
    public function getActualTime()
    {
        return $this->container['actual_time'];
    }

    /**
     * Sets actual_time
     *
     * @param string|null $actual_time An indication of the the time at which the performance evaluation was conducted.
     *
     * @return self
     */
    public function setActualTime($actual_time)
    {
        if (is_null($actual_time)) {
            array_push($this->openAPINullablesSetToNull, 'actual_time');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('actual_time', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['actual_time'] = $actual_time;

        return $this;
    }

    /**
     * Gets announced
     *
     * @return bool|null
     */
    public function getAnnounced()
    {
        return $this->container['announced'];
    }

    /**
     * Sets announced
     *
     * @param bool|null $announced An indicator of whether the performance evaluation was announced or not.
     *
     * @return self
     */
    public function setAnnounced($announced)
    {
        if (is_null($announced)) {
            array_push($this->openAPINullablesSetToNull, 'announced');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('announced', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['announced'] = $announced;

        return $this;
    }

    /**
     * Gets comments
     *
     * @return string|null
     */
    public function getComments()
    {
        return $this->container['comments'];
    }

    /**
     * Sets comments
     *
     * @param string|null $comments Any comments about the performance evaluation to be captured.
     *
     * @return self
     */
    public function setComments($comments)
    {
        if (is_null($comments)) {
            array_push($this->openAPINullablesSetToNull, 'comments');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('comments', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($comments) && (mb_strlen($comments) > 1024)) {
            throw new \InvalidArgumentException('invalid length for $comments when calling TpdmPerformanceEvaluationRating., must be smaller than or equal to 1024.');
        }
        if (!is_null($comments) && (mb_strlen($comments) < 1)) {
            throw new \InvalidArgumentException('invalid length for $comments when calling TpdmPerformanceEvaluationRating., must be bigger than or equal to 1.');
        }

        $this->container['comments'] = $comments;

        return $this;
    }

    /**
     * Gets coteaching_style_observed_descriptor
     *
     * @return string|null
     */
    public function getCoteachingStyleObservedDescriptor()
    {
        return $this->container['coteaching_style_observed_descriptor'];
    }

    /**
     * Sets coteaching_style_observed_descriptor
     *
     * @param string|null $coteaching_style_observed_descriptor A type of co-teaching observed as part of the performance evaluation.
     *
     * @return self
     */
    public function setCoteachingStyleObservedDescriptor($coteaching_style_observed_descriptor)
    {
        if (is_null($coteaching_style_observed_descriptor)) {
            array_push($this->openAPINullablesSetToNull, 'coteaching_style_observed_descriptor');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('coteaching_style_observed_descriptor', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($coteaching_style_observed_descriptor) && (mb_strlen($coteaching_style_observed_descriptor) > 306)) {
            throw new \InvalidArgumentException('invalid length for $coteaching_style_observed_descriptor when calling TpdmPerformanceEvaluationRating., must be smaller than or equal to 306.');
        }

        $this->container['coteaching_style_observed_descriptor'] = $coteaching_style_observed_descriptor;

        return $this;
    }

    /**
     * Gets performance_evaluation_rating_level_descriptor
     *
     * @return string|null
     */
    public function getPerformanceEvaluationRatingLevelDescriptor()
    {
        return $this->container['performance_evaluation_rating_level_descriptor'];
    }

    /**
     * Sets performance_evaluation_rating_level_descriptor
     *
     * @param string|null $performance_evaluation_rating_level_descriptor The rating level achieved based upon the rating or score.
     *
     * @return self
     */
    public function setPerformanceEvaluationRatingLevelDescriptor($performance_evaluation_rating_level_descriptor)
    {
        if (is_null($performance_evaluation_rating_level_descriptor)) {
            array_push($this->openAPINullablesSetToNull, 'performance_evaluation_rating_level_descriptor');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('performance_evaluation_rating_level_descriptor', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($performance_evaluation_rating_level_descriptor) && (mb_strlen($performance_evaluation_rating_level_descriptor) > 306)) {
            throw new \InvalidArgumentException('invalid length for $performance_evaluation_rating_level_descriptor when calling TpdmPerformanceEvaluationRating., must be smaller than or equal to 306.');
        }

        $this->container['performance_evaluation_rating_level_descriptor'] = $performance_evaluation_rating_level_descriptor;

        return $this;
    }

    /**
     * Gets results
     *
     * @return \Resources\Model\TpdmPerformanceEvaluationRatingResult[]|null
     */
    public function getResults()
    {
        return $this->container['results'];
    }

    /**
     * Sets results
     *
     * @param \Resources\Model\TpdmPerformanceEvaluationRatingResult[]|null $results An unordered collection of performanceEvaluationRatingResults. The numerical summary rating or score for the performance evaluation.
     *
     * @return self
     */
    public function setResults($results)
    {
        if (is_null($results)) {
            throw new \InvalidArgumentException('non-nullable results cannot be null');
        }
        $this->container['results'] = $results;

        return $this;
    }

    /**
     * Gets reviewers
     *
     * @return \Resources\Model\TpdmPerformanceEvaluationRatingReviewer[]|null
     */
    public function getReviewers()
    {
        return $this->container['reviewers'];
    }

    /**
     * Sets reviewers
     *
     * @param \Resources\Model\TpdmPerformanceEvaluationRatingReviewer[]|null $reviewers An unordered collection of performanceEvaluationRatingReviewers. The person(s) that conducted the performance evaluation.
     *
     * @return self
     */
    public function setReviewers($reviewers)
    {
        if (is_null($reviewers)) {
            throw new \InvalidArgumentException('non-nullable reviewers cannot be null');
        }
        $this->container['reviewers'] = $reviewers;

        return $this;
    }

    /**
     * Gets schedule_date
     *
     * @return \DateTime|null
     */
    public function getScheduleDate()
    {
        return $this->container['schedule_date'];
    }

    /**
     * Sets schedule_date
     *
     * @param \DateTime|null $schedule_date The month, day, and year on which the performance evaluation was scheduled.
     *
     * @return self
     */
    public function setScheduleDate($schedule_date)
    {
        if (is_null($schedule_date)) {
            array_push($this->openAPINullablesSetToNull, 'schedule_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('schedule_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['schedule_date'] = $schedule_date;

        return $this;
    }

    /**
     * Gets _etag
     *
     * @return string|null
     */
    public function getEtag()
    {
        return $this->container['_etag'];
    }

    /**
     * Sets _etag
     *
     * @param string|null $_etag A unique system-generated value that identifies the version of the resource.
     *
     * @return self
     */
    public function setEtag($_etag)
    {
        if (is_null($_etag)) {
            throw new \InvalidArgumentException('non-nullable _etag cannot be null');
        }
        $this->container['_etag'] = $_etag;

        return $this;
    }

    /**
     * Gets _last_modified_date
     *
     * @return \DateTime|null
     */
    public function getLastModifiedDate()
    {
        return $this->container['_last_modified_date'];
    }

    /**
     * Sets _last_modified_date
     *
     * @param \DateTime|null $_last_modified_date The date and time the resource was last modified.
     *
     * @return self
     */
    public function setLastModifiedDate($_last_modified_date)
    {
        if (is_null($_last_modified_date)) {
            throw new \InvalidArgumentException('non-nullable _last_modified_date cannot be null');
        }
        $this->container['_last_modified_date'] = $_last_modified_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


