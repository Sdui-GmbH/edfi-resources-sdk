<?php
/**
 * EdFiObjectiveAssessment
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Resources
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Resources\Model;

use \ArrayAccess;
use \Resources\ObjectSerializer;

/**
 * EdFiObjectiveAssessment Class Doc Comment
 *
 * @category Class
 * @package  Resources
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EdFiObjectiveAssessment implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'edFi_objectiveAssessment';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'identification_code' => 'string',
        'assessment_reference' => '\Resources\Model\EdFiAssessmentReference',
        'parent_objective_assessment_reference' => '\Resources\Model\EdFiObjectiveAssessmentReference',
        'academic_subject_descriptor' => 'string',
        'assessment_items' => '\Resources\Model\EdFiObjectiveAssessmentAssessmentItem[]',
        'description' => 'string',
        'learning_standards' => '\Resources\Model\EdFiObjectiveAssessmentLearningStandard[]',
        'max_raw_score' => 'float',
        'nomenclature' => 'string',
        'percent_of_assessment' => 'float',
        'performance_levels' => '\Resources\Model\EdFiObjectiveAssessmentPerformanceLevel[]',
        'scores' => '\Resources\Model\EdFiObjectiveAssessmentScore[]',
        '_etag' => 'string',
        '_last_modified_date' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'identification_code' => null,
        'assessment_reference' => null,
        'parent_objective_assessment_reference' => null,
        'academic_subject_descriptor' => null,
        'assessment_items' => null,
        'description' => null,
        'learning_standards' => null,
        'max_raw_score' => 'double',
        'nomenclature' => null,
        'percent_of_assessment' => 'double',
        'performance_levels' => null,
        'scores' => null,
        '_etag' => null,
        '_last_modified_date' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'identification_code' => false,
        'assessment_reference' => false,
        'parent_objective_assessment_reference' => false,
        'academic_subject_descriptor' => true,
        'assessment_items' => false,
        'description' => true,
        'learning_standards' => false,
        'max_raw_score' => true,
        'nomenclature' => true,
        'percent_of_assessment' => true,
        'performance_levels' => false,
        'scores' => false,
        '_etag' => false,
        '_last_modified_date' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'identification_code' => 'identificationCode',
        'assessment_reference' => 'assessmentReference',
        'parent_objective_assessment_reference' => 'parentObjectiveAssessmentReference',
        'academic_subject_descriptor' => 'academicSubjectDescriptor',
        'assessment_items' => 'assessmentItems',
        'description' => 'description',
        'learning_standards' => 'learningStandards',
        'max_raw_score' => 'maxRawScore',
        'nomenclature' => 'nomenclature',
        'percent_of_assessment' => 'percentOfAssessment',
        'performance_levels' => 'performanceLevels',
        'scores' => 'scores',
        '_etag' => '_etag',
        '_last_modified_date' => '_lastModifiedDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'identification_code' => 'setIdentificationCode',
        'assessment_reference' => 'setAssessmentReference',
        'parent_objective_assessment_reference' => 'setParentObjectiveAssessmentReference',
        'academic_subject_descriptor' => 'setAcademicSubjectDescriptor',
        'assessment_items' => 'setAssessmentItems',
        'description' => 'setDescription',
        'learning_standards' => 'setLearningStandards',
        'max_raw_score' => 'setMaxRawScore',
        'nomenclature' => 'setNomenclature',
        'percent_of_assessment' => 'setPercentOfAssessment',
        'performance_levels' => 'setPerformanceLevels',
        'scores' => 'setScores',
        '_etag' => 'setEtag',
        '_last_modified_date' => 'setLastModifiedDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'identification_code' => 'getIdentificationCode',
        'assessment_reference' => 'getAssessmentReference',
        'parent_objective_assessment_reference' => 'getParentObjectiveAssessmentReference',
        'academic_subject_descriptor' => 'getAcademicSubjectDescriptor',
        'assessment_items' => 'getAssessmentItems',
        'description' => 'getDescription',
        'learning_standards' => 'getLearningStandards',
        'max_raw_score' => 'getMaxRawScore',
        'nomenclature' => 'getNomenclature',
        'percent_of_assessment' => 'getPercentOfAssessment',
        'performance_levels' => 'getPerformanceLevels',
        'scores' => 'getScores',
        '_etag' => 'getEtag',
        '_last_modified_date' => 'getLastModifiedDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('identification_code', $data ?? [], null);
        $this->setIfExists('assessment_reference', $data ?? [], null);
        $this->setIfExists('parent_objective_assessment_reference', $data ?? [], null);
        $this->setIfExists('academic_subject_descriptor', $data ?? [], null);
        $this->setIfExists('assessment_items', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('learning_standards', $data ?? [], null);
        $this->setIfExists('max_raw_score', $data ?? [], null);
        $this->setIfExists('nomenclature', $data ?? [], null);
        $this->setIfExists('percent_of_assessment', $data ?? [], null);
        $this->setIfExists('performance_levels', $data ?? [], null);
        $this->setIfExists('scores', $data ?? [], null);
        $this->setIfExists('_etag', $data ?? [], null);
        $this->setIfExists('_last_modified_date', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['identification_code'] === null) {
            $invalidProperties[] = "'identification_code' can't be null";
        }
        if ((mb_strlen($this->container['identification_code']) > 60)) {
            $invalidProperties[] = "invalid value for 'identification_code', the character length must be smaller than or equal to 60.";
        }

        if ($this->container['assessment_reference'] === null) {
            $invalidProperties[] = "'assessment_reference' can't be null";
        }
        if (!is_null($this->container['academic_subject_descriptor']) && (mb_strlen($this->container['academic_subject_descriptor']) > 306)) {
            $invalidProperties[] = "invalid value for 'academic_subject_descriptor', the character length must be smaller than or equal to 306.";
        }

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 1024)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 1024.";
        }

        if (!is_null($this->container['max_raw_score']) && ($this->container['max_raw_score'] > 9999999999.99999)) {
            $invalidProperties[] = "invalid value for 'max_raw_score', must be smaller than or equal to 9999999999.99999.";
        }

        if (!is_null($this->container['max_raw_score']) && ($this->container['max_raw_score'] < -9999999999.99999)) {
            $invalidProperties[] = "invalid value for 'max_raw_score', must be bigger than or equal to -9999999999.99999.";
        }

        if (!is_null($this->container['nomenclature']) && (mb_strlen($this->container['nomenclature']) > 100)) {
            $invalidProperties[] = "invalid value for 'nomenclature', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['percent_of_assessment']) && ($this->container['percent_of_assessment'] > 9.9999)) {
            $invalidProperties[] = "invalid value for 'percent_of_assessment', must be smaller than or equal to 9.9999.";
        }

        if (!is_null($this->container['percent_of_assessment']) && ($this->container['percent_of_assessment'] < -9.9999)) {
            $invalidProperties[] = "invalid value for 'percent_of_assessment', must be bigger than or equal to -9.9999.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id 
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets identification_code
     *
     * @return string
     */
    public function getIdentificationCode()
    {
        return $this->container['identification_code'];
    }

    /**
     * Sets identification_code
     *
     * @param string $identification_code A unique number or alphanumeric code assigned to an objective assessment by a school, school system, a state, or other agency or entity.
     *
     * @return self
     */
    public function setIdentificationCode($identification_code)
    {
        if (is_null($identification_code)) {
            throw new \InvalidArgumentException('non-nullable identification_code cannot be null');
        }
        if ((mb_strlen($identification_code) > 60)) {
            throw new \InvalidArgumentException('invalid length for $identification_code when calling EdFiObjectiveAssessment., must be smaller than or equal to 60.');
        }

        $this->container['identification_code'] = $identification_code;

        return $this;
    }

    /**
     * Gets assessment_reference
     *
     * @return \Resources\Model\EdFiAssessmentReference
     */
    public function getAssessmentReference()
    {
        return $this->container['assessment_reference'];
    }

    /**
     * Sets assessment_reference
     *
     * @param \Resources\Model\EdFiAssessmentReference $assessment_reference assessment_reference
     *
     * @return self
     */
    public function setAssessmentReference($assessment_reference)
    {
        if (is_null($assessment_reference)) {
            throw new \InvalidArgumentException('non-nullable assessment_reference cannot be null');
        }
        $this->container['assessment_reference'] = $assessment_reference;

        return $this;
    }

    /**
     * Gets parent_objective_assessment_reference
     *
     * @return \Resources\Model\EdFiObjectiveAssessmentReference|null
     */
    public function getParentObjectiveAssessmentReference()
    {
        return $this->container['parent_objective_assessment_reference'];
    }

    /**
     * Sets parent_objective_assessment_reference
     *
     * @param \Resources\Model\EdFiObjectiveAssessmentReference|null $parent_objective_assessment_reference parent_objective_assessment_reference
     *
     * @return self
     */
    public function setParentObjectiveAssessmentReference($parent_objective_assessment_reference)
    {
        if (is_null($parent_objective_assessment_reference)) {
            throw new \InvalidArgumentException('non-nullable parent_objective_assessment_reference cannot be null');
        }
        $this->container['parent_objective_assessment_reference'] = $parent_objective_assessment_reference;

        return $this;
    }

    /**
     * Gets academic_subject_descriptor
     *
     * @return string|null
     */
    public function getAcademicSubjectDescriptor()
    {
        return $this->container['academic_subject_descriptor'];
    }

    /**
     * Sets academic_subject_descriptor
     *
     * @param string|null $academic_subject_descriptor The subject area of the objective assessment.
     *
     * @return self
     */
    public function setAcademicSubjectDescriptor($academic_subject_descriptor)
    {
        if (is_null($academic_subject_descriptor)) {
            array_push($this->openAPINullablesSetToNull, 'academic_subject_descriptor');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('academic_subject_descriptor', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($academic_subject_descriptor) && (mb_strlen($academic_subject_descriptor) > 306)) {
            throw new \InvalidArgumentException('invalid length for $academic_subject_descriptor when calling EdFiObjectiveAssessment., must be smaller than or equal to 306.');
        }

        $this->container['academic_subject_descriptor'] = $academic_subject_descriptor;

        return $this;
    }

    /**
     * Gets assessment_items
     *
     * @return \Resources\Model\EdFiObjectiveAssessmentAssessmentItem[]|null
     */
    public function getAssessmentItems()
    {
        return $this->container['assessment_items'];
    }

    /**
     * Sets assessment_items
     *
     * @param \Resources\Model\EdFiObjectiveAssessmentAssessmentItem[]|null $assessment_items An unordered collection of objectiveAssessmentAssessmentItems. References individual test items, if appropriate.
     *
     * @return self
     */
    public function setAssessmentItems($assessment_items)
    {
        if (is_null($assessment_items)) {
            throw new \InvalidArgumentException('non-nullable assessment_items cannot be null');
        }
        $this->container['assessment_items'] = $assessment_items;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description The description of the objective assessment (e.g., vocabulary, measurement, or geometry).
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($description) && (mb_strlen($description) > 1024)) {
            throw new \InvalidArgumentException('invalid length for $description when calling EdFiObjectiveAssessment., must be smaller than or equal to 1024.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets learning_standards
     *
     * @return \Resources\Model\EdFiObjectiveAssessmentLearningStandard[]|null
     */
    public function getLearningStandards()
    {
        return $this->container['learning_standards'];
    }

    /**
     * Sets learning_standards
     *
     * @param \Resources\Model\EdFiObjectiveAssessmentLearningStandard[]|null $learning_standards An unordered collection of objectiveAssessmentLearningStandards. Learning standard tested by this objective assessment.
     *
     * @return self
     */
    public function setLearningStandards($learning_standards)
    {
        if (is_null($learning_standards)) {
            throw new \InvalidArgumentException('non-nullable learning_standards cannot be null');
        }
        $this->container['learning_standards'] = $learning_standards;

        return $this;
    }

    /**
     * Gets max_raw_score
     *
     * @return float|null
     */
    public function getMaxRawScore()
    {
        return $this->container['max_raw_score'];
    }

    /**
     * Sets max_raw_score
     *
     * @param float|null $max_raw_score The maximum raw score achievable across all assessment items that are correct and scored at the maximum.
     *
     * @return self
     */
    public function setMaxRawScore($max_raw_score)
    {
        if (is_null($max_raw_score)) {
            array_push($this->openAPINullablesSetToNull, 'max_raw_score');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_raw_score', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($max_raw_score) && ($max_raw_score > 9999999999.99999)) {
            throw new \InvalidArgumentException('invalid value for $max_raw_score when calling EdFiObjectiveAssessment., must be smaller than or equal to 9999999999.99999.');
        }
        if (!is_null($max_raw_score) && ($max_raw_score < -9999999999.99999)) {
            throw new \InvalidArgumentException('invalid value for $max_raw_score when calling EdFiObjectiveAssessment., must be bigger than or equal to -9999999999.99999.');
        }

        $this->container['max_raw_score'] = $max_raw_score;

        return $this;
    }

    /**
     * Gets nomenclature
     *
     * @return string|null
     */
    public function getNomenclature()
    {
        return $this->container['nomenclature'];
    }

    /**
     * Sets nomenclature
     *
     * @param string|null $nomenclature Reflects the specific nomenclature used for this level of objective assessment.
     *
     * @return self
     */
    public function setNomenclature($nomenclature)
    {
        if (is_null($nomenclature)) {
            array_push($this->openAPINullablesSetToNull, 'nomenclature');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('nomenclature', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($nomenclature) && (mb_strlen($nomenclature) > 100)) {
            throw new \InvalidArgumentException('invalid length for $nomenclature when calling EdFiObjectiveAssessment., must be smaller than or equal to 100.');
        }

        $this->container['nomenclature'] = $nomenclature;

        return $this;
    }

    /**
     * Gets percent_of_assessment
     *
     * @return float|null
     */
    public function getPercentOfAssessment()
    {
        return $this->container['percent_of_assessment'];
    }

    /**
     * Sets percent_of_assessment
     *
     * @param float|null $percent_of_assessment The percentage of the assessment that tests this objective.
     *
     * @return self
     */
    public function setPercentOfAssessment($percent_of_assessment)
    {
        if (is_null($percent_of_assessment)) {
            array_push($this->openAPINullablesSetToNull, 'percent_of_assessment');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('percent_of_assessment', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($percent_of_assessment) && ($percent_of_assessment > 9.9999)) {
            throw new \InvalidArgumentException('invalid value for $percent_of_assessment when calling EdFiObjectiveAssessment., must be smaller than or equal to 9.9999.');
        }
        if (!is_null($percent_of_assessment) && ($percent_of_assessment < -9.9999)) {
            throw new \InvalidArgumentException('invalid value for $percent_of_assessment when calling EdFiObjectiveAssessment., must be bigger than or equal to -9.9999.');
        }

        $this->container['percent_of_assessment'] = $percent_of_assessment;

        return $this;
    }

    /**
     * Gets performance_levels
     *
     * @return \Resources\Model\EdFiObjectiveAssessmentPerformanceLevel[]|null
     */
    public function getPerformanceLevels()
    {
        return $this->container['performance_levels'];
    }

    /**
     * Sets performance_levels
     *
     * @param \Resources\Model\EdFiObjectiveAssessmentPerformanceLevel[]|null $performance_levels An unordered collection of objectiveAssessmentPerformanceLevels. Definition of the performance levels and the associated cut scores. Three styles are supported: 1. Specification of performance level by minimum and maximum score, 2. Specification of performance level by cut score, using only minimum score, 3. Specification of performance level without any mapping to scores
     *
     * @return self
     */
    public function setPerformanceLevels($performance_levels)
    {
        if (is_null($performance_levels)) {
            throw new \InvalidArgumentException('non-nullable performance_levels cannot be null');
        }
        $this->container['performance_levels'] = $performance_levels;

        return $this;
    }

    /**
     * Gets scores
     *
     * @return \Resources\Model\EdFiObjectiveAssessmentScore[]|null
     */
    public function getScores()
    {
        return $this->container['scores'];
    }

    /**
     * Sets scores
     *
     * @param \Resources\Model\EdFiObjectiveAssessmentScore[]|null $scores An unordered collection of objectiveAssessmentScores. Definition of the scores to be expected from this objective assessment.
     *
     * @return self
     */
    public function setScores($scores)
    {
        if (is_null($scores)) {
            throw new \InvalidArgumentException('non-nullable scores cannot be null');
        }
        $this->container['scores'] = $scores;

        return $this;
    }

    /**
     * Gets _etag
     *
     * @return string|null
     */
    public function getEtag()
    {
        return $this->container['_etag'];
    }

    /**
     * Sets _etag
     *
     * @param string|null $_etag A unique system-generated value that identifies the version of the resource.
     *
     * @return self
     */
    public function setEtag($_etag)
    {
        if (is_null($_etag)) {
            throw new \InvalidArgumentException('non-nullable _etag cannot be null');
        }
        $this->container['_etag'] = $_etag;

        return $this;
    }

    /**
     * Gets _last_modified_date
     *
     * @return \DateTime|null
     */
    public function getLastModifiedDate()
    {
        return $this->container['_last_modified_date'];
    }

    /**
     * Sets _last_modified_date
     *
     * @param \DateTime|null $_last_modified_date The date and time the resource was last modified.
     *
     * @return self
     */
    public function setLastModifiedDate($_last_modified_date)
    {
        if (is_null($_last_modified_date)) {
            throw new \InvalidArgumentException('non-nullable _last_modified_date cannot be null');
        }
        $this->container['_last_modified_date'] = $_last_modified_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


