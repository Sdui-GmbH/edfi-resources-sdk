<?php
/**
 * EdFiStudentAcademicRecord
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Resources
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Resources\Model;

use \ArrayAccess;
use \Resources\ObjectSerializer;

/**
 * EdFiStudentAcademicRecord Class Doc Comment
 *
 * @category Class
 * @package  Resources
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EdFiStudentAcademicRecord implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'edFi_studentAcademicRecord';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'term_descriptor' => 'string',
        'education_organization_reference' => '\Resources\Model\EdFiEducationOrganizationReference',
        'school_year_type_reference' => '\Resources\Model\EdFiSchoolYearTypeReference',
        'student_reference' => '\Resources\Model\EdFiStudentReference',
        'academic_honors' => '\Resources\Model\EdFiStudentAcademicRecordAcademicHonor[]',
        'class_ranking' => '\Resources\Model\EdFiStudentAcademicRecordClassRanking',
        'cumulative_attempted_credit_conversion' => 'float',
        'cumulative_attempted_credits' => 'float',
        'cumulative_attempted_credit_type_descriptor' => 'string',
        'cumulative_earned_credit_conversion' => 'float',
        'cumulative_earned_credits' => 'float',
        'cumulative_earned_credit_type_descriptor' => 'string',
        'diplomas' => '\Resources\Model\EdFiStudentAcademicRecordDiploma[]',
        'grade_point_averages' => '\Resources\Model\EdFiStudentAcademicRecordGradePointAverage[]',
        'projected_graduation_date' => '\DateTime',
        'recognitions' => '\Resources\Model\EdFiStudentAcademicRecordRecognition[]',
        'report_cards' => '\Resources\Model\EdFiStudentAcademicRecordReportCard[]',
        'session_attempted_credit_conversion' => 'float',
        'session_attempted_credits' => 'float',
        'session_attempted_credit_type_descriptor' => 'string',
        'session_earned_credit_conversion' => 'float',
        'session_earned_credits' => 'float',
        'session_earned_credit_type_descriptor' => 'string',
        '_etag' => 'string',
        '_last_modified_date' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'term_descriptor' => null,
        'education_organization_reference' => null,
        'school_year_type_reference' => null,
        'student_reference' => null,
        'academic_honors' => null,
        'class_ranking' => null,
        'cumulative_attempted_credit_conversion' => 'double',
        'cumulative_attempted_credits' => 'double',
        'cumulative_attempted_credit_type_descriptor' => null,
        'cumulative_earned_credit_conversion' => 'double',
        'cumulative_earned_credits' => 'double',
        'cumulative_earned_credit_type_descriptor' => null,
        'diplomas' => null,
        'grade_point_averages' => null,
        'projected_graduation_date' => 'date',
        'recognitions' => null,
        'report_cards' => null,
        'session_attempted_credit_conversion' => 'double',
        'session_attempted_credits' => 'double',
        'session_attempted_credit_type_descriptor' => null,
        'session_earned_credit_conversion' => 'double',
        'session_earned_credits' => 'double',
        'session_earned_credit_type_descriptor' => null,
        '_etag' => null,
        '_last_modified_date' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'term_descriptor' => false,
        'education_organization_reference' => false,
        'school_year_type_reference' => false,
        'student_reference' => false,
        'academic_honors' => false,
        'class_ranking' => false,
        'cumulative_attempted_credit_conversion' => true,
        'cumulative_attempted_credits' => true,
        'cumulative_attempted_credit_type_descriptor' => true,
        'cumulative_earned_credit_conversion' => true,
        'cumulative_earned_credits' => true,
        'cumulative_earned_credit_type_descriptor' => true,
        'diplomas' => false,
        'grade_point_averages' => false,
        'projected_graduation_date' => true,
        'recognitions' => false,
        'report_cards' => false,
        'session_attempted_credit_conversion' => true,
        'session_attempted_credits' => true,
        'session_attempted_credit_type_descriptor' => true,
        'session_earned_credit_conversion' => true,
        'session_earned_credits' => true,
        'session_earned_credit_type_descriptor' => true,
        '_etag' => false,
        '_last_modified_date' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'term_descriptor' => 'termDescriptor',
        'education_organization_reference' => 'educationOrganizationReference',
        'school_year_type_reference' => 'schoolYearTypeReference',
        'student_reference' => 'studentReference',
        'academic_honors' => 'academicHonors',
        'class_ranking' => 'classRanking',
        'cumulative_attempted_credit_conversion' => 'cumulativeAttemptedCreditConversion',
        'cumulative_attempted_credits' => 'cumulativeAttemptedCredits',
        'cumulative_attempted_credit_type_descriptor' => 'cumulativeAttemptedCreditTypeDescriptor',
        'cumulative_earned_credit_conversion' => 'cumulativeEarnedCreditConversion',
        'cumulative_earned_credits' => 'cumulativeEarnedCredits',
        'cumulative_earned_credit_type_descriptor' => 'cumulativeEarnedCreditTypeDescriptor',
        'diplomas' => 'diplomas',
        'grade_point_averages' => 'gradePointAverages',
        'projected_graduation_date' => 'projectedGraduationDate',
        'recognitions' => 'recognitions',
        'report_cards' => 'reportCards',
        'session_attempted_credit_conversion' => 'sessionAttemptedCreditConversion',
        'session_attempted_credits' => 'sessionAttemptedCredits',
        'session_attempted_credit_type_descriptor' => 'sessionAttemptedCreditTypeDescriptor',
        'session_earned_credit_conversion' => 'sessionEarnedCreditConversion',
        'session_earned_credits' => 'sessionEarnedCredits',
        'session_earned_credit_type_descriptor' => 'sessionEarnedCreditTypeDescriptor',
        '_etag' => '_etag',
        '_last_modified_date' => '_lastModifiedDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'term_descriptor' => 'setTermDescriptor',
        'education_organization_reference' => 'setEducationOrganizationReference',
        'school_year_type_reference' => 'setSchoolYearTypeReference',
        'student_reference' => 'setStudentReference',
        'academic_honors' => 'setAcademicHonors',
        'class_ranking' => 'setClassRanking',
        'cumulative_attempted_credit_conversion' => 'setCumulativeAttemptedCreditConversion',
        'cumulative_attempted_credits' => 'setCumulativeAttemptedCredits',
        'cumulative_attempted_credit_type_descriptor' => 'setCumulativeAttemptedCreditTypeDescriptor',
        'cumulative_earned_credit_conversion' => 'setCumulativeEarnedCreditConversion',
        'cumulative_earned_credits' => 'setCumulativeEarnedCredits',
        'cumulative_earned_credit_type_descriptor' => 'setCumulativeEarnedCreditTypeDescriptor',
        'diplomas' => 'setDiplomas',
        'grade_point_averages' => 'setGradePointAverages',
        'projected_graduation_date' => 'setProjectedGraduationDate',
        'recognitions' => 'setRecognitions',
        'report_cards' => 'setReportCards',
        'session_attempted_credit_conversion' => 'setSessionAttemptedCreditConversion',
        'session_attempted_credits' => 'setSessionAttemptedCredits',
        'session_attempted_credit_type_descriptor' => 'setSessionAttemptedCreditTypeDescriptor',
        'session_earned_credit_conversion' => 'setSessionEarnedCreditConversion',
        'session_earned_credits' => 'setSessionEarnedCredits',
        'session_earned_credit_type_descriptor' => 'setSessionEarnedCreditTypeDescriptor',
        '_etag' => 'setEtag',
        '_last_modified_date' => 'setLastModifiedDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'term_descriptor' => 'getTermDescriptor',
        'education_organization_reference' => 'getEducationOrganizationReference',
        'school_year_type_reference' => 'getSchoolYearTypeReference',
        'student_reference' => 'getStudentReference',
        'academic_honors' => 'getAcademicHonors',
        'class_ranking' => 'getClassRanking',
        'cumulative_attempted_credit_conversion' => 'getCumulativeAttemptedCreditConversion',
        'cumulative_attempted_credits' => 'getCumulativeAttemptedCredits',
        'cumulative_attempted_credit_type_descriptor' => 'getCumulativeAttemptedCreditTypeDescriptor',
        'cumulative_earned_credit_conversion' => 'getCumulativeEarnedCreditConversion',
        'cumulative_earned_credits' => 'getCumulativeEarnedCredits',
        'cumulative_earned_credit_type_descriptor' => 'getCumulativeEarnedCreditTypeDescriptor',
        'diplomas' => 'getDiplomas',
        'grade_point_averages' => 'getGradePointAverages',
        'projected_graduation_date' => 'getProjectedGraduationDate',
        'recognitions' => 'getRecognitions',
        'report_cards' => 'getReportCards',
        'session_attempted_credit_conversion' => 'getSessionAttemptedCreditConversion',
        'session_attempted_credits' => 'getSessionAttemptedCredits',
        'session_attempted_credit_type_descriptor' => 'getSessionAttemptedCreditTypeDescriptor',
        'session_earned_credit_conversion' => 'getSessionEarnedCreditConversion',
        'session_earned_credits' => 'getSessionEarnedCredits',
        'session_earned_credit_type_descriptor' => 'getSessionEarnedCreditTypeDescriptor',
        '_etag' => 'getEtag',
        '_last_modified_date' => 'getLastModifiedDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('term_descriptor', $data ?? [], null);
        $this->setIfExists('education_organization_reference', $data ?? [], null);
        $this->setIfExists('school_year_type_reference', $data ?? [], null);
        $this->setIfExists('student_reference', $data ?? [], null);
        $this->setIfExists('academic_honors', $data ?? [], null);
        $this->setIfExists('class_ranking', $data ?? [], null);
        $this->setIfExists('cumulative_attempted_credit_conversion', $data ?? [], null);
        $this->setIfExists('cumulative_attempted_credits', $data ?? [], null);
        $this->setIfExists('cumulative_attempted_credit_type_descriptor', $data ?? [], null);
        $this->setIfExists('cumulative_earned_credit_conversion', $data ?? [], null);
        $this->setIfExists('cumulative_earned_credits', $data ?? [], null);
        $this->setIfExists('cumulative_earned_credit_type_descriptor', $data ?? [], null);
        $this->setIfExists('diplomas', $data ?? [], null);
        $this->setIfExists('grade_point_averages', $data ?? [], null);
        $this->setIfExists('projected_graduation_date', $data ?? [], null);
        $this->setIfExists('recognitions', $data ?? [], null);
        $this->setIfExists('report_cards', $data ?? [], null);
        $this->setIfExists('session_attempted_credit_conversion', $data ?? [], null);
        $this->setIfExists('session_attempted_credits', $data ?? [], null);
        $this->setIfExists('session_attempted_credit_type_descriptor', $data ?? [], null);
        $this->setIfExists('session_earned_credit_conversion', $data ?? [], null);
        $this->setIfExists('session_earned_credits', $data ?? [], null);
        $this->setIfExists('session_earned_credit_type_descriptor', $data ?? [], null);
        $this->setIfExists('_etag', $data ?? [], null);
        $this->setIfExists('_last_modified_date', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['term_descriptor'] === null) {
            $invalidProperties[] = "'term_descriptor' can't be null";
        }
        if ((mb_strlen($this->container['term_descriptor']) > 306)) {
            $invalidProperties[] = "invalid value for 'term_descriptor', the character length must be smaller than or equal to 306.";
        }

        if ($this->container['education_organization_reference'] === null) {
            $invalidProperties[] = "'education_organization_reference' can't be null";
        }
        if ($this->container['school_year_type_reference'] === null) {
            $invalidProperties[] = "'school_year_type_reference' can't be null";
        }
        if ($this->container['student_reference'] === null) {
            $invalidProperties[] = "'student_reference' can't be null";
        }
        if (!is_null($this->container['cumulative_attempted_credits']) && ($this->container['cumulative_attempted_credits'] < 0.0)) {
            $invalidProperties[] = "invalid value for 'cumulative_attempted_credits', must be bigger than or equal to 0.0.";
        }

        if (!is_null($this->container['cumulative_attempted_credit_type_descriptor']) && (mb_strlen($this->container['cumulative_attempted_credit_type_descriptor']) > 306)) {
            $invalidProperties[] = "invalid value for 'cumulative_attempted_credit_type_descriptor', the character length must be smaller than or equal to 306.";
        }

        if (!is_null($this->container['cumulative_earned_credits']) && ($this->container['cumulative_earned_credits'] < 0.0)) {
            $invalidProperties[] = "invalid value for 'cumulative_earned_credits', must be bigger than or equal to 0.0.";
        }

        if (!is_null($this->container['cumulative_earned_credit_type_descriptor']) && (mb_strlen($this->container['cumulative_earned_credit_type_descriptor']) > 306)) {
            $invalidProperties[] = "invalid value for 'cumulative_earned_credit_type_descriptor', the character length must be smaller than or equal to 306.";
        }

        if (!is_null($this->container['session_attempted_credits']) && ($this->container['session_attempted_credits'] < 0.0)) {
            $invalidProperties[] = "invalid value for 'session_attempted_credits', must be bigger than or equal to 0.0.";
        }

        if (!is_null($this->container['session_attempted_credit_type_descriptor']) && (mb_strlen($this->container['session_attempted_credit_type_descriptor']) > 306)) {
            $invalidProperties[] = "invalid value for 'session_attempted_credit_type_descriptor', the character length must be smaller than or equal to 306.";
        }

        if (!is_null($this->container['session_earned_credits']) && ($this->container['session_earned_credits'] < 0.0)) {
            $invalidProperties[] = "invalid value for 'session_earned_credits', must be bigger than or equal to 0.0.";
        }

        if (!is_null($this->container['session_earned_credit_type_descriptor']) && (mb_strlen($this->container['session_earned_credit_type_descriptor']) > 306)) {
            $invalidProperties[] = "invalid value for 'session_earned_credit_type_descriptor', the character length must be smaller than or equal to 306.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id 
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets term_descriptor
     *
     * @return string
     */
    public function getTermDescriptor()
    {
        return $this->container['term_descriptor'];
    }

    /**
     * Sets term_descriptor
     *
     * @param string $term_descriptor The term for the session during the school year.
     *
     * @return self
     */
    public function setTermDescriptor($term_descriptor)
    {
        if (is_null($term_descriptor)) {
            throw new \InvalidArgumentException('non-nullable term_descriptor cannot be null');
        }
        if ((mb_strlen($term_descriptor) > 306)) {
            throw new \InvalidArgumentException('invalid length for $term_descriptor when calling EdFiStudentAcademicRecord., must be smaller than or equal to 306.');
        }

        $this->container['term_descriptor'] = $term_descriptor;

        return $this;
    }

    /**
     * Gets education_organization_reference
     *
     * @return \Resources\Model\EdFiEducationOrganizationReference
     */
    public function getEducationOrganizationReference()
    {
        return $this->container['education_organization_reference'];
    }

    /**
     * Sets education_organization_reference
     *
     * @param \Resources\Model\EdFiEducationOrganizationReference $education_organization_reference education_organization_reference
     *
     * @return self
     */
    public function setEducationOrganizationReference($education_organization_reference)
    {
        if (is_null($education_organization_reference)) {
            throw new \InvalidArgumentException('non-nullable education_organization_reference cannot be null');
        }
        $this->container['education_organization_reference'] = $education_organization_reference;

        return $this;
    }

    /**
     * Gets school_year_type_reference
     *
     * @return \Resources\Model\EdFiSchoolYearTypeReference
     */
    public function getSchoolYearTypeReference()
    {
        return $this->container['school_year_type_reference'];
    }

    /**
     * Sets school_year_type_reference
     *
     * @param \Resources\Model\EdFiSchoolYearTypeReference $school_year_type_reference school_year_type_reference
     *
     * @return self
     */
    public function setSchoolYearTypeReference($school_year_type_reference)
    {
        if (is_null($school_year_type_reference)) {
            throw new \InvalidArgumentException('non-nullable school_year_type_reference cannot be null');
        }
        $this->container['school_year_type_reference'] = $school_year_type_reference;

        return $this;
    }

    /**
     * Gets student_reference
     *
     * @return \Resources\Model\EdFiStudentReference
     */
    public function getStudentReference()
    {
        return $this->container['student_reference'];
    }

    /**
     * Sets student_reference
     *
     * @param \Resources\Model\EdFiStudentReference $student_reference student_reference
     *
     * @return self
     */
    public function setStudentReference($student_reference)
    {
        if (is_null($student_reference)) {
            throw new \InvalidArgumentException('non-nullable student_reference cannot be null');
        }
        $this->container['student_reference'] = $student_reference;

        return $this;
    }

    /**
     * Gets academic_honors
     *
     * @return \Resources\Model\EdFiStudentAcademicRecordAcademicHonor[]|null
     */
    public function getAcademicHonors()
    {
        return $this->container['academic_honors'];
    }

    /**
     * Sets academic_honors
     *
     * @param \Resources\Model\EdFiStudentAcademicRecordAcademicHonor[]|null $academic_honors An unordered collection of studentAcademicRecordAcademicHonors. Academic distinctions earned by or awarded to the student.
     *
     * @return self
     */
    public function setAcademicHonors($academic_honors)
    {
        if (is_null($academic_honors)) {
            throw new \InvalidArgumentException('non-nullable academic_honors cannot be null');
        }
        $this->container['academic_honors'] = $academic_honors;

        return $this;
    }

    /**
     * Gets class_ranking
     *
     * @return \Resources\Model\EdFiStudentAcademicRecordClassRanking|null
     */
    public function getClassRanking()
    {
        return $this->container['class_ranking'];
    }

    /**
     * Sets class_ranking
     *
     * @param \Resources\Model\EdFiStudentAcademicRecordClassRanking|null $class_ranking class_ranking
     *
     * @return self
     */
    public function setClassRanking($class_ranking)
    {
        if (is_null($class_ranking)) {
            throw new \InvalidArgumentException('non-nullable class_ranking cannot be null');
        }
        $this->container['class_ranking'] = $class_ranking;

        return $this;
    }

    /**
     * Gets cumulative_attempted_credit_conversion
     *
     * @return float|null
     */
    public function getCumulativeAttemptedCreditConversion()
    {
        return $this->container['cumulative_attempted_credit_conversion'];
    }

    /**
     * Sets cumulative_attempted_credit_conversion
     *
     * @param float|null $cumulative_attempted_credit_conversion Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.
     *
     * @return self
     */
    public function setCumulativeAttemptedCreditConversion($cumulative_attempted_credit_conversion)
    {
        if (is_null($cumulative_attempted_credit_conversion)) {
            array_push($this->openAPINullablesSetToNull, 'cumulative_attempted_credit_conversion');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cumulative_attempted_credit_conversion', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cumulative_attempted_credit_conversion'] = $cumulative_attempted_credit_conversion;

        return $this;
    }

    /**
     * Gets cumulative_attempted_credits
     *
     * @return float|null
     */
    public function getCumulativeAttemptedCredits()
    {
        return $this->container['cumulative_attempted_credits'];
    }

    /**
     * Sets cumulative_attempted_credits
     *
     * @param float|null $cumulative_attempted_credits The value of credits or units of value awarded for the completion of a course.
     *
     * @return self
     */
    public function setCumulativeAttemptedCredits($cumulative_attempted_credits)
    {
        if (is_null($cumulative_attempted_credits)) {
            array_push($this->openAPINullablesSetToNull, 'cumulative_attempted_credits');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cumulative_attempted_credits', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($cumulative_attempted_credits) && ($cumulative_attempted_credits < 0.0)) {
            throw new \InvalidArgumentException('invalid value for $cumulative_attempted_credits when calling EdFiStudentAcademicRecord., must be bigger than or equal to 0.0.');
        }

        $this->container['cumulative_attempted_credits'] = $cumulative_attempted_credits;

        return $this;
    }

    /**
     * Gets cumulative_attempted_credit_type_descriptor
     *
     * @return string|null
     */
    public function getCumulativeAttemptedCreditTypeDescriptor()
    {
        return $this->container['cumulative_attempted_credit_type_descriptor'];
    }

    /**
     * Sets cumulative_attempted_credit_type_descriptor
     *
     * @param string|null $cumulative_attempted_credit_type_descriptor The type of credits or units of value awarded for the completion of a course.
     *
     * @return self
     */
    public function setCumulativeAttemptedCreditTypeDescriptor($cumulative_attempted_credit_type_descriptor)
    {
        if (is_null($cumulative_attempted_credit_type_descriptor)) {
            array_push($this->openAPINullablesSetToNull, 'cumulative_attempted_credit_type_descriptor');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cumulative_attempted_credit_type_descriptor', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($cumulative_attempted_credit_type_descriptor) && (mb_strlen($cumulative_attempted_credit_type_descriptor) > 306)) {
            throw new \InvalidArgumentException('invalid length for $cumulative_attempted_credit_type_descriptor when calling EdFiStudentAcademicRecord., must be smaller than or equal to 306.');
        }

        $this->container['cumulative_attempted_credit_type_descriptor'] = $cumulative_attempted_credit_type_descriptor;

        return $this;
    }

    /**
     * Gets cumulative_earned_credit_conversion
     *
     * @return float|null
     */
    public function getCumulativeEarnedCreditConversion()
    {
        return $this->container['cumulative_earned_credit_conversion'];
    }

    /**
     * Sets cumulative_earned_credit_conversion
     *
     * @param float|null $cumulative_earned_credit_conversion Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.
     *
     * @return self
     */
    public function setCumulativeEarnedCreditConversion($cumulative_earned_credit_conversion)
    {
        if (is_null($cumulative_earned_credit_conversion)) {
            array_push($this->openAPINullablesSetToNull, 'cumulative_earned_credit_conversion');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cumulative_earned_credit_conversion', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cumulative_earned_credit_conversion'] = $cumulative_earned_credit_conversion;

        return $this;
    }

    /**
     * Gets cumulative_earned_credits
     *
     * @return float|null
     */
    public function getCumulativeEarnedCredits()
    {
        return $this->container['cumulative_earned_credits'];
    }

    /**
     * Sets cumulative_earned_credits
     *
     * @param float|null $cumulative_earned_credits The value of credits or units of value awarded for the completion of a course.
     *
     * @return self
     */
    public function setCumulativeEarnedCredits($cumulative_earned_credits)
    {
        if (is_null($cumulative_earned_credits)) {
            array_push($this->openAPINullablesSetToNull, 'cumulative_earned_credits');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cumulative_earned_credits', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($cumulative_earned_credits) && ($cumulative_earned_credits < 0.0)) {
            throw new \InvalidArgumentException('invalid value for $cumulative_earned_credits when calling EdFiStudentAcademicRecord., must be bigger than or equal to 0.0.');
        }

        $this->container['cumulative_earned_credits'] = $cumulative_earned_credits;

        return $this;
    }

    /**
     * Gets cumulative_earned_credit_type_descriptor
     *
     * @return string|null
     */
    public function getCumulativeEarnedCreditTypeDescriptor()
    {
        return $this->container['cumulative_earned_credit_type_descriptor'];
    }

    /**
     * Sets cumulative_earned_credit_type_descriptor
     *
     * @param string|null $cumulative_earned_credit_type_descriptor The type of credits or units of value awarded for the completion of a course.
     *
     * @return self
     */
    public function setCumulativeEarnedCreditTypeDescriptor($cumulative_earned_credit_type_descriptor)
    {
        if (is_null($cumulative_earned_credit_type_descriptor)) {
            array_push($this->openAPINullablesSetToNull, 'cumulative_earned_credit_type_descriptor');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cumulative_earned_credit_type_descriptor', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($cumulative_earned_credit_type_descriptor) && (mb_strlen($cumulative_earned_credit_type_descriptor) > 306)) {
            throw new \InvalidArgumentException('invalid length for $cumulative_earned_credit_type_descriptor when calling EdFiStudentAcademicRecord., must be smaller than or equal to 306.');
        }

        $this->container['cumulative_earned_credit_type_descriptor'] = $cumulative_earned_credit_type_descriptor;

        return $this;
    }

    /**
     * Gets diplomas
     *
     * @return \Resources\Model\EdFiStudentAcademicRecordDiploma[]|null
     */
    public function getDiplomas()
    {
        return $this->container['diplomas'];
    }

    /**
     * Sets diplomas
     *
     * @param \Resources\Model\EdFiStudentAcademicRecordDiploma[]|null $diplomas An unordered collection of studentAcademicRecordDiplomas. Diploma(s) earned by the student.
     *
     * @return self
     */
    public function setDiplomas($diplomas)
    {
        if (is_null($diplomas)) {
            throw new \InvalidArgumentException('non-nullable diplomas cannot be null');
        }
        $this->container['diplomas'] = $diplomas;

        return $this;
    }

    /**
     * Gets grade_point_averages
     *
     * @return \Resources\Model\EdFiStudentAcademicRecordGradePointAverage[]|null
     */
    public function getGradePointAverages()
    {
        return $this->container['grade_point_averages'];
    }

    /**
     * Sets grade_point_averages
     *
     * @param \Resources\Model\EdFiStudentAcademicRecordGradePointAverage[]|null $grade_point_averages An unordered collection of studentAcademicRecordGradePointAverages. The grade point average for an individual computed as the grade points earned divided by the number of credits attempted.
     *
     * @return self
     */
    public function setGradePointAverages($grade_point_averages)
    {
        if (is_null($grade_point_averages)) {
            throw new \InvalidArgumentException('non-nullable grade_point_averages cannot be null');
        }
        $this->container['grade_point_averages'] = $grade_point_averages;

        return $this;
    }

    /**
     * Gets projected_graduation_date
     *
     * @return \DateTime|null
     */
    public function getProjectedGraduationDate()
    {
        return $this->container['projected_graduation_date'];
    }

    /**
     * Sets projected_graduation_date
     *
     * @param \DateTime|null $projected_graduation_date The month and year the student is projected to graduate.
     *
     * @return self
     */
    public function setProjectedGraduationDate($projected_graduation_date)
    {
        if (is_null($projected_graduation_date)) {
            array_push($this->openAPINullablesSetToNull, 'projected_graduation_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('projected_graduation_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['projected_graduation_date'] = $projected_graduation_date;

        return $this;
    }

    /**
     * Gets recognitions
     *
     * @return \Resources\Model\EdFiStudentAcademicRecordRecognition[]|null
     */
    public function getRecognitions()
    {
        return $this->container['recognitions'];
    }

    /**
     * Sets recognitions
     *
     * @param \Resources\Model\EdFiStudentAcademicRecordRecognition[]|null $recognitions An unordered collection of studentAcademicRecordRecognitions. Recognitions given to the student for accomplishments in a co-curricular or extracurricular activity.
     *
     * @return self
     */
    public function setRecognitions($recognitions)
    {
        if (is_null($recognitions)) {
            throw new \InvalidArgumentException('non-nullable recognitions cannot be null');
        }
        $this->container['recognitions'] = $recognitions;

        return $this;
    }

    /**
     * Gets report_cards
     *
     * @return \Resources\Model\EdFiStudentAcademicRecordReportCard[]|null
     */
    public function getReportCards()
    {
        return $this->container['report_cards'];
    }

    /**
     * Sets report_cards
     *
     * @param \Resources\Model\EdFiStudentAcademicRecordReportCard[]|null $report_cards An unordered collection of studentAcademicRecordReportCards. Report cards for the student.
     *
     * @return self
     */
    public function setReportCards($report_cards)
    {
        if (is_null($report_cards)) {
            throw new \InvalidArgumentException('non-nullable report_cards cannot be null');
        }
        $this->container['report_cards'] = $report_cards;

        return $this;
    }

    /**
     * Gets session_attempted_credit_conversion
     *
     * @return float|null
     */
    public function getSessionAttemptedCreditConversion()
    {
        return $this->container['session_attempted_credit_conversion'];
    }

    /**
     * Sets session_attempted_credit_conversion
     *
     * @param float|null $session_attempted_credit_conversion Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.
     *
     * @return self
     */
    public function setSessionAttemptedCreditConversion($session_attempted_credit_conversion)
    {
        if (is_null($session_attempted_credit_conversion)) {
            array_push($this->openAPINullablesSetToNull, 'session_attempted_credit_conversion');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('session_attempted_credit_conversion', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['session_attempted_credit_conversion'] = $session_attempted_credit_conversion;

        return $this;
    }

    /**
     * Gets session_attempted_credits
     *
     * @return float|null
     */
    public function getSessionAttemptedCredits()
    {
        return $this->container['session_attempted_credits'];
    }

    /**
     * Sets session_attempted_credits
     *
     * @param float|null $session_attempted_credits The value of credits or units of value awarded for the completion of a course.
     *
     * @return self
     */
    public function setSessionAttemptedCredits($session_attempted_credits)
    {
        if (is_null($session_attempted_credits)) {
            array_push($this->openAPINullablesSetToNull, 'session_attempted_credits');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('session_attempted_credits', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($session_attempted_credits) && ($session_attempted_credits < 0.0)) {
            throw new \InvalidArgumentException('invalid value for $session_attempted_credits when calling EdFiStudentAcademicRecord., must be bigger than or equal to 0.0.');
        }

        $this->container['session_attempted_credits'] = $session_attempted_credits;

        return $this;
    }

    /**
     * Gets session_attempted_credit_type_descriptor
     *
     * @return string|null
     */
    public function getSessionAttemptedCreditTypeDescriptor()
    {
        return $this->container['session_attempted_credit_type_descriptor'];
    }

    /**
     * Sets session_attempted_credit_type_descriptor
     *
     * @param string|null $session_attempted_credit_type_descriptor The type of credits or units of value awarded for the completion of a course.
     *
     * @return self
     */
    public function setSessionAttemptedCreditTypeDescriptor($session_attempted_credit_type_descriptor)
    {
        if (is_null($session_attempted_credit_type_descriptor)) {
            array_push($this->openAPINullablesSetToNull, 'session_attempted_credit_type_descriptor');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('session_attempted_credit_type_descriptor', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($session_attempted_credit_type_descriptor) && (mb_strlen($session_attempted_credit_type_descriptor) > 306)) {
            throw new \InvalidArgumentException('invalid length for $session_attempted_credit_type_descriptor when calling EdFiStudentAcademicRecord., must be smaller than or equal to 306.');
        }

        $this->container['session_attempted_credit_type_descriptor'] = $session_attempted_credit_type_descriptor;

        return $this;
    }

    /**
     * Gets session_earned_credit_conversion
     *
     * @return float|null
     */
    public function getSessionEarnedCreditConversion()
    {
        return $this->container['session_earned_credit_conversion'];
    }

    /**
     * Sets session_earned_credit_conversion
     *
     * @param float|null $session_earned_credit_conversion Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.
     *
     * @return self
     */
    public function setSessionEarnedCreditConversion($session_earned_credit_conversion)
    {
        if (is_null($session_earned_credit_conversion)) {
            array_push($this->openAPINullablesSetToNull, 'session_earned_credit_conversion');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('session_earned_credit_conversion', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['session_earned_credit_conversion'] = $session_earned_credit_conversion;

        return $this;
    }

    /**
     * Gets session_earned_credits
     *
     * @return float|null
     */
    public function getSessionEarnedCredits()
    {
        return $this->container['session_earned_credits'];
    }

    /**
     * Sets session_earned_credits
     *
     * @param float|null $session_earned_credits The value of credits or units of value awarded for the completion of a course.
     *
     * @return self
     */
    public function setSessionEarnedCredits($session_earned_credits)
    {
        if (is_null($session_earned_credits)) {
            array_push($this->openAPINullablesSetToNull, 'session_earned_credits');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('session_earned_credits', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($session_earned_credits) && ($session_earned_credits < 0.0)) {
            throw new \InvalidArgumentException('invalid value for $session_earned_credits when calling EdFiStudentAcademicRecord., must be bigger than or equal to 0.0.');
        }

        $this->container['session_earned_credits'] = $session_earned_credits;

        return $this;
    }

    /**
     * Gets session_earned_credit_type_descriptor
     *
     * @return string|null
     */
    public function getSessionEarnedCreditTypeDescriptor()
    {
        return $this->container['session_earned_credit_type_descriptor'];
    }

    /**
     * Sets session_earned_credit_type_descriptor
     *
     * @param string|null $session_earned_credit_type_descriptor The type of credits or units of value awarded for the completion of a course.
     *
     * @return self
     */
    public function setSessionEarnedCreditTypeDescriptor($session_earned_credit_type_descriptor)
    {
        if (is_null($session_earned_credit_type_descriptor)) {
            array_push($this->openAPINullablesSetToNull, 'session_earned_credit_type_descriptor');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('session_earned_credit_type_descriptor', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($session_earned_credit_type_descriptor) && (mb_strlen($session_earned_credit_type_descriptor) > 306)) {
            throw new \InvalidArgumentException('invalid length for $session_earned_credit_type_descriptor when calling EdFiStudentAcademicRecord., must be smaller than or equal to 306.');
        }

        $this->container['session_earned_credit_type_descriptor'] = $session_earned_credit_type_descriptor;

        return $this;
    }

    /**
     * Gets _etag
     *
     * @return string|null
     */
    public function getEtag()
    {
        return $this->container['_etag'];
    }

    /**
     * Sets _etag
     *
     * @param string|null $_etag A unique system-generated value that identifies the version of the resource.
     *
     * @return self
     */
    public function setEtag($_etag)
    {
        if (is_null($_etag)) {
            throw new \InvalidArgumentException('non-nullable _etag cannot be null');
        }
        $this->container['_etag'] = $_etag;

        return $this;
    }

    /**
     * Gets _last_modified_date
     *
     * @return \DateTime|null
     */
    public function getLastModifiedDate()
    {
        return $this->container['_last_modified_date'];
    }

    /**
     * Sets _last_modified_date
     *
     * @param \DateTime|null $_last_modified_date The date and time the resource was last modified.
     *
     * @return self
     */
    public function setLastModifiedDate($_last_modified_date)
    {
        if (is_null($_last_modified_date)) {
            throw new \InvalidArgumentException('non-nullable _last_modified_date cannot be null');
        }
        $this->container['_last_modified_date'] = $_last_modified_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


