<?php
/**
 * EdFiStudentSection504ProgramAssociation
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Resources
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Resources\Model;

use \ArrayAccess;
use \Resources\ObjectSerializer;

/**
 * EdFiStudentSection504ProgramAssociation Class Doc Comment
 *
 * @category Class
 * @package  Resources
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EdFiStudentSection504ProgramAssociation implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'edFi_studentSection504ProgramAssociation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'begin_date' => '\DateTime',
        'education_organization_reference' => '\Resources\Model\EdFiEducationOrganizationReference',
        'program_reference' => '\Resources\Model\EdFiProgramReference',
        'student_reference' => '\Resources\Model\EdFiStudentReference',
        'accommodation_plan' => 'bool',
        'end_date' => '\DateTime',
        'program_participation_statuses' => '\Resources\Model\EdFiGeneralStudentProgramAssociationProgramParticipationStatus[]',
        'reason_exited_descriptor' => 'string',
        'section504_disability_descriptor' => 'string',
        'section504_eligibility' => 'bool',
        'section504_eligibility_decision_date' => '\DateTime',
        'section504_meeting_date' => '\DateTime',
        'served_outside_of_regular_session' => 'bool',
        '_etag' => 'string',
        '_last_modified_date' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'begin_date' => 'date',
        'education_organization_reference' => null,
        'program_reference' => null,
        'student_reference' => null,
        'accommodation_plan' => null,
        'end_date' => 'date',
        'program_participation_statuses' => null,
        'reason_exited_descriptor' => null,
        'section504_disability_descriptor' => null,
        'section504_eligibility' => null,
        'section504_eligibility_decision_date' => 'date',
        'section504_meeting_date' => 'date',
        'served_outside_of_regular_session' => null,
        '_etag' => null,
        '_last_modified_date' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'begin_date' => false,
        'education_organization_reference' => false,
        'program_reference' => false,
        'student_reference' => false,
        'accommodation_plan' => true,
        'end_date' => true,
        'program_participation_statuses' => false,
        'reason_exited_descriptor' => true,
        'section504_disability_descriptor' => true,
        'section504_eligibility' => false,
        'section504_eligibility_decision_date' => true,
        'section504_meeting_date' => true,
        'served_outside_of_regular_session' => true,
        '_etag' => false,
        '_last_modified_date' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'begin_date' => 'beginDate',
        'education_organization_reference' => 'educationOrganizationReference',
        'program_reference' => 'programReference',
        'student_reference' => 'studentReference',
        'accommodation_plan' => 'accommodationPlan',
        'end_date' => 'endDate',
        'program_participation_statuses' => 'programParticipationStatuses',
        'reason_exited_descriptor' => 'reasonExitedDescriptor',
        'section504_disability_descriptor' => 'section504DisabilityDescriptor',
        'section504_eligibility' => 'section504Eligibility',
        'section504_eligibility_decision_date' => 'section504EligibilityDecisionDate',
        'section504_meeting_date' => 'section504MeetingDate',
        'served_outside_of_regular_session' => 'servedOutsideOfRegularSession',
        '_etag' => '_etag',
        '_last_modified_date' => '_lastModifiedDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'begin_date' => 'setBeginDate',
        'education_organization_reference' => 'setEducationOrganizationReference',
        'program_reference' => 'setProgramReference',
        'student_reference' => 'setStudentReference',
        'accommodation_plan' => 'setAccommodationPlan',
        'end_date' => 'setEndDate',
        'program_participation_statuses' => 'setProgramParticipationStatuses',
        'reason_exited_descriptor' => 'setReasonExitedDescriptor',
        'section504_disability_descriptor' => 'setSection504DisabilityDescriptor',
        'section504_eligibility' => 'setSection504Eligibility',
        'section504_eligibility_decision_date' => 'setSection504EligibilityDecisionDate',
        'section504_meeting_date' => 'setSection504MeetingDate',
        'served_outside_of_regular_session' => 'setServedOutsideOfRegularSession',
        '_etag' => 'setEtag',
        '_last_modified_date' => 'setLastModifiedDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'begin_date' => 'getBeginDate',
        'education_organization_reference' => 'getEducationOrganizationReference',
        'program_reference' => 'getProgramReference',
        'student_reference' => 'getStudentReference',
        'accommodation_plan' => 'getAccommodationPlan',
        'end_date' => 'getEndDate',
        'program_participation_statuses' => 'getProgramParticipationStatuses',
        'reason_exited_descriptor' => 'getReasonExitedDescriptor',
        'section504_disability_descriptor' => 'getSection504DisabilityDescriptor',
        'section504_eligibility' => 'getSection504Eligibility',
        'section504_eligibility_decision_date' => 'getSection504EligibilityDecisionDate',
        'section504_meeting_date' => 'getSection504MeetingDate',
        'served_outside_of_regular_session' => 'getServedOutsideOfRegularSession',
        '_etag' => 'getEtag',
        '_last_modified_date' => 'getLastModifiedDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('begin_date', $data ?? [], null);
        $this->setIfExists('education_organization_reference', $data ?? [], null);
        $this->setIfExists('program_reference', $data ?? [], null);
        $this->setIfExists('student_reference', $data ?? [], null);
        $this->setIfExists('accommodation_plan', $data ?? [], null);
        $this->setIfExists('end_date', $data ?? [], null);
        $this->setIfExists('program_participation_statuses', $data ?? [], null);
        $this->setIfExists('reason_exited_descriptor', $data ?? [], null);
        $this->setIfExists('section504_disability_descriptor', $data ?? [], null);
        $this->setIfExists('section504_eligibility', $data ?? [], null);
        $this->setIfExists('section504_eligibility_decision_date', $data ?? [], null);
        $this->setIfExists('section504_meeting_date', $data ?? [], null);
        $this->setIfExists('served_outside_of_regular_session', $data ?? [], null);
        $this->setIfExists('_etag', $data ?? [], null);
        $this->setIfExists('_last_modified_date', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['begin_date'] === null) {
            $invalidProperties[] = "'begin_date' can't be null";
        }
        if ($this->container['education_organization_reference'] === null) {
            $invalidProperties[] = "'education_organization_reference' can't be null";
        }
        if ($this->container['program_reference'] === null) {
            $invalidProperties[] = "'program_reference' can't be null";
        }
        if ($this->container['student_reference'] === null) {
            $invalidProperties[] = "'student_reference' can't be null";
        }
        if (!is_null($this->container['reason_exited_descriptor']) && (mb_strlen($this->container['reason_exited_descriptor']) > 306)) {
            $invalidProperties[] = "invalid value for 'reason_exited_descriptor', the character length must be smaller than or equal to 306.";
        }

        if (!is_null($this->container['section504_disability_descriptor']) && (mb_strlen($this->container['section504_disability_descriptor']) > 306)) {
            $invalidProperties[] = "invalid value for 'section504_disability_descriptor', the character length must be smaller than or equal to 306.";
        }

        if ($this->container['section504_eligibility'] === null) {
            $invalidProperties[] = "'section504_eligibility' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id 
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets begin_date
     *
     * @return \DateTime
     */
    public function getBeginDate()
    {
        return $this->container['begin_date'];
    }

    /**
     * Sets begin_date
     *
     * @param \DateTime $begin_date The earliest date the student is involved with the program. Typically, this is the date the student becomes eligible for the program.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.
     *
     * @return self
     */
    public function setBeginDate($begin_date)
    {
        if (is_null($begin_date)) {
            throw new \InvalidArgumentException('non-nullable begin_date cannot be null');
        }
        $this->container['begin_date'] = $begin_date;

        return $this;
    }

    /**
     * Gets education_organization_reference
     *
     * @return \Resources\Model\EdFiEducationOrganizationReference
     */
    public function getEducationOrganizationReference()
    {
        return $this->container['education_organization_reference'];
    }

    /**
     * Sets education_organization_reference
     *
     * @param \Resources\Model\EdFiEducationOrganizationReference $education_organization_reference education_organization_reference
     *
     * @return self
     */
    public function setEducationOrganizationReference($education_organization_reference)
    {
        if (is_null($education_organization_reference)) {
            throw new \InvalidArgumentException('non-nullable education_organization_reference cannot be null');
        }
        $this->container['education_organization_reference'] = $education_organization_reference;

        return $this;
    }

    /**
     * Gets program_reference
     *
     * @return \Resources\Model\EdFiProgramReference
     */
    public function getProgramReference()
    {
        return $this->container['program_reference'];
    }

    /**
     * Sets program_reference
     *
     * @param \Resources\Model\EdFiProgramReference $program_reference program_reference
     *
     * @return self
     */
    public function setProgramReference($program_reference)
    {
        if (is_null($program_reference)) {
            throw new \InvalidArgumentException('non-nullable program_reference cannot be null');
        }
        $this->container['program_reference'] = $program_reference;

        return $this;
    }

    /**
     * Gets student_reference
     *
     * @return \Resources\Model\EdFiStudentReference
     */
    public function getStudentReference()
    {
        return $this->container['student_reference'];
    }

    /**
     * Sets student_reference
     *
     * @param \Resources\Model\EdFiStudentReference $student_reference student_reference
     *
     * @return self
     */
    public function setStudentReference($student_reference)
    {
        if (is_null($student_reference)) {
            throw new \InvalidArgumentException('non-nullable student_reference cannot be null');
        }
        $this->container['student_reference'] = $student_reference;

        return $this;
    }

    /**
     * Gets accommodation_plan
     *
     * @return bool|null
     */
    public function getAccommodationPlan()
    {
        return $this->container['accommodation_plan'];
    }

    /**
     * Sets accommodation_plan
     *
     * @param bool|null $accommodation_plan Indicates whether student has a Section 504 accommodation plan.
     *
     * @return self
     */
    public function setAccommodationPlan($accommodation_plan)
    {
        if (is_null($accommodation_plan)) {
            array_push($this->openAPINullablesSetToNull, 'accommodation_plan');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('accommodation_plan', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['accommodation_plan'] = $accommodation_plan;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return \DateTime|null
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param \DateTime|null $end_date The month, day, and year on which the student exited the program or stopped receiving services.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.
     *
     * @return self
     */
    public function setEndDate($end_date)
    {
        if (is_null($end_date)) {
            array_push($this->openAPINullablesSetToNull, 'end_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('end_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets program_participation_statuses
     *
     * @return \Resources\Model\EdFiGeneralStudentProgramAssociationProgramParticipationStatus[]|null
     */
    public function getProgramParticipationStatuses()
    {
        return $this->container['program_participation_statuses'];
    }

    /**
     * Sets program_participation_statuses
     *
     * @param \Resources\Model\EdFiGeneralStudentProgramAssociationProgramParticipationStatus[]|null $program_participation_statuses An unordered collection of generalStudentProgramAssociationProgramParticipationStatuses. The status of the student's program participation.
     *
     * @return self
     */
    public function setProgramParticipationStatuses($program_participation_statuses)
    {
        if (is_null($program_participation_statuses)) {
            throw new \InvalidArgumentException('non-nullable program_participation_statuses cannot be null');
        }
        $this->container['program_participation_statuses'] = $program_participation_statuses;

        return $this;
    }

    /**
     * Gets reason_exited_descriptor
     *
     * @return string|null
     */
    public function getReasonExitedDescriptor()
    {
        return $this->container['reason_exited_descriptor'];
    }

    /**
     * Sets reason_exited_descriptor
     *
     * @param string|null $reason_exited_descriptor The reason the student left the program within a school or district.
     *
     * @return self
     */
    public function setReasonExitedDescriptor($reason_exited_descriptor)
    {
        if (is_null($reason_exited_descriptor)) {
            array_push($this->openAPINullablesSetToNull, 'reason_exited_descriptor');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('reason_exited_descriptor', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($reason_exited_descriptor) && (mb_strlen($reason_exited_descriptor) > 306)) {
            throw new \InvalidArgumentException('invalid length for $reason_exited_descriptor when calling EdFiStudentSection504ProgramAssociation., must be smaller than or equal to 306.');
        }

        $this->container['reason_exited_descriptor'] = $reason_exited_descriptor;

        return $this;
    }

    /**
     * Gets section504_disability_descriptor
     *
     * @return string|null
     */
    public function getSection504DisabilityDescriptor()
    {
        return $this->container['section504_disability_descriptor'];
    }

    /**
     * Sets section504_disability_descriptor
     *
     * @param string|null $section504_disability_descriptor Defines one or more disabilities student has that qualifies them for a Section 504 plan.
     *
     * @return self
     */
    public function setSection504DisabilityDescriptor($section504_disability_descriptor)
    {
        if (is_null($section504_disability_descriptor)) {
            array_push($this->openAPINullablesSetToNull, 'section504_disability_descriptor');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('section504_disability_descriptor', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($section504_disability_descriptor) && (mb_strlen($section504_disability_descriptor) > 306)) {
            throw new \InvalidArgumentException('invalid length for $section504_disability_descriptor when calling EdFiStudentSection504ProgramAssociation., must be smaller than or equal to 306.');
        }

        $this->container['section504_disability_descriptor'] = $section504_disability_descriptor;

        return $this;
    }

    /**
     * Gets section504_eligibility
     *
     * @return bool
     */
    public function getSection504Eligibility()
    {
        return $this->container['section504_eligibility'];
    }

    /**
     * Sets section504_eligibility
     *
     * @param bool $section504_eligibility Indicates whether student has a disability, either temporary or permenant, that qualifies student for Section 504 consideration. Selection of FALSE for this boolean is equivalent to marking student as 'Did Not Qualify'.
     *
     * @return self
     */
    public function setSection504Eligibility($section504_eligibility)
    {
        if (is_null($section504_eligibility)) {
            throw new \InvalidArgumentException('non-nullable section504_eligibility cannot be null');
        }
        $this->container['section504_eligibility'] = $section504_eligibility;

        return $this;
    }

    /**
     * Gets section504_eligibility_decision_date
     *
     * @return \DateTime|null
     */
    public function getSection504EligibilityDecisionDate()
    {
        return $this->container['section504_eligibility_decision_date'];
    }

    /**
     * Sets section504_eligibility_decision_date
     *
     * @param \DateTime|null $section504_eligibility_decision_date The month, day, and year on which the Section 504 eligibility decision is made.
     *
     * @return self
     */
    public function setSection504EligibilityDecisionDate($section504_eligibility_decision_date)
    {
        if (is_null($section504_eligibility_decision_date)) {
            array_push($this->openAPINullablesSetToNull, 'section504_eligibility_decision_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('section504_eligibility_decision_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['section504_eligibility_decision_date'] = $section504_eligibility_decision_date;

        return $this;
    }

    /**
     * Gets section504_meeting_date
     *
     * @return \DateTime|null
     */
    public function getSection504MeetingDate()
    {
        return $this->container['section504_meeting_date'];
    }

    /**
     * Sets section504_meeting_date
     *
     * @param \DateTime|null $section504_meeting_date The month, day, and year on which the meeting with student's parent/guardian held to discuss the 504 eligibility of the student.
     *
     * @return self
     */
    public function setSection504MeetingDate($section504_meeting_date)
    {
        if (is_null($section504_meeting_date)) {
            array_push($this->openAPINullablesSetToNull, 'section504_meeting_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('section504_meeting_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['section504_meeting_date'] = $section504_meeting_date;

        return $this;
    }

    /**
     * Gets served_outside_of_regular_session
     *
     * @return bool|null
     */
    public function getServedOutsideOfRegularSession()
    {
        return $this->container['served_outside_of_regular_session'];
    }

    /**
     * Sets served_outside_of_regular_session
     *
     * @param bool|null $served_outside_of_regular_session Indicates whether the student received services during the summer session or between sessions.
     *
     * @return self
     */
    public function setServedOutsideOfRegularSession($served_outside_of_regular_session)
    {
        if (is_null($served_outside_of_regular_session)) {
            array_push($this->openAPINullablesSetToNull, 'served_outside_of_regular_session');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('served_outside_of_regular_session', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['served_outside_of_regular_session'] = $served_outside_of_regular_session;

        return $this;
    }

    /**
     * Gets _etag
     *
     * @return string|null
     */
    public function getEtag()
    {
        return $this->container['_etag'];
    }

    /**
     * Sets _etag
     *
     * @param string|null $_etag A unique system-generated value that identifies the version of the resource.
     *
     * @return self
     */
    public function setEtag($_etag)
    {
        if (is_null($_etag)) {
            throw new \InvalidArgumentException('non-nullable _etag cannot be null');
        }
        $this->container['_etag'] = $_etag;

        return $this;
    }

    /**
     * Gets _last_modified_date
     *
     * @return \DateTime|null
     */
    public function getLastModifiedDate()
    {
        return $this->container['_last_modified_date'];
    }

    /**
     * Sets _last_modified_date
     *
     * @param \DateTime|null $_last_modified_date The date and time the resource was last modified.
     *
     * @return self
     */
    public function setLastModifiedDate($_last_modified_date)
    {
        if (is_null($_last_modified_date)) {
            throw new \InvalidArgumentException('non-nullable _last_modified_date cannot be null');
        }
        $this->container['_last_modified_date'] = $_last_modified_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


