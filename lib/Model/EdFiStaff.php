<?php
/**
 * EdFiStaff
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * EdFiStaff Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EdFiStaff implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'edFi_staff';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'staff_unique_id' => 'string',
        'person_reference' => '\OpenAPI\Client\Model\EdFiPersonReference',
        'addresses' => '\OpenAPI\Client\Model\EdFiStaffAddress[]',
        'ancestry_ethnic_origins' => '\OpenAPI\Client\Model\EdFiStaffAncestryEthnicOrigin[]',
        'birth_date' => '\DateTime',
        'citizenship_status_descriptor' => 'string',
        'credentials' => '\OpenAPI\Client\Model\EdFiStaffCredential[]',
        'electronic_mails' => '\OpenAPI\Client\Model\EdFiStaffElectronicMail[]',
        'first_name' => 'string',
        'gender_identity' => 'string',
        'generation_code_suffix' => 'string',
        'highest_completed_level_of_education_descriptor' => 'string',
        'highly_qualified_teacher' => 'bool',
        'hispanic_latino_ethnicity' => 'bool',
        'identification_codes' => '\OpenAPI\Client\Model\EdFiStaffIdentificationCode[]',
        'identification_documents' => '\OpenAPI\Client\Model\EdFiStaffIdentificationDocument[]',
        'international_addresses' => '\OpenAPI\Client\Model\EdFiStaffInternationalAddress[]',
        'languages' => '\OpenAPI\Client\Model\EdFiStaffLanguage[]',
        'last_surname' => 'string',
        'login_id' => 'string',
        'maiden_name' => 'string',
        'middle_name' => 'string',
        'other_names' => '\OpenAPI\Client\Model\EdFiStaffOtherName[]',
        'personal_identification_documents' => '\OpenAPI\Client\Model\EdFiStaffPersonalIdentificationDocument[]',
        'personal_title_prefix' => 'string',
        'preferred_first_name' => 'string',
        'preferred_last_surname' => 'string',
        'races' => '\OpenAPI\Client\Model\EdFiStaffRace[]',
        'recognitions' => '\OpenAPI\Client\Model\EdFiStaffRecognition[]',
        'sex_descriptor' => 'string',
        'telephones' => '\OpenAPI\Client\Model\EdFiStaffTelephone[]',
        'tribal_affiliations' => '\OpenAPI\Client\Model\EdFiStaffTribalAffiliation[]',
        'visas' => '\OpenAPI\Client\Model\EdFiStaffVisa[]',
        'years_of_prior_professional_experience' => 'float',
        'years_of_prior_teaching_experience' => 'float',
        '_etag' => 'string',
        '_last_modified_date' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'staff_unique_id' => null,
        'person_reference' => null,
        'addresses' => null,
        'ancestry_ethnic_origins' => null,
        'birth_date' => 'date',
        'citizenship_status_descriptor' => null,
        'credentials' => null,
        'electronic_mails' => null,
        'first_name' => null,
        'gender_identity' => null,
        'generation_code_suffix' => null,
        'highest_completed_level_of_education_descriptor' => null,
        'highly_qualified_teacher' => null,
        'hispanic_latino_ethnicity' => null,
        'identification_codes' => null,
        'identification_documents' => null,
        'international_addresses' => null,
        'languages' => null,
        'last_surname' => null,
        'login_id' => null,
        'maiden_name' => null,
        'middle_name' => null,
        'other_names' => null,
        'personal_identification_documents' => null,
        'personal_title_prefix' => null,
        'preferred_first_name' => null,
        'preferred_last_surname' => null,
        'races' => null,
        'recognitions' => null,
        'sex_descriptor' => null,
        'telephones' => null,
        'tribal_affiliations' => null,
        'visas' => null,
        'years_of_prior_professional_experience' => 'double',
        'years_of_prior_teaching_experience' => 'double',
        '_etag' => null,
        '_last_modified_date' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'staff_unique_id' => false,
        'person_reference' => false,
        'addresses' => false,
        'ancestry_ethnic_origins' => false,
        'birth_date' => true,
        'citizenship_status_descriptor' => true,
        'credentials' => false,
        'electronic_mails' => false,
        'first_name' => false,
        'gender_identity' => true,
        'generation_code_suffix' => true,
        'highest_completed_level_of_education_descriptor' => true,
        'highly_qualified_teacher' => true,
        'hispanic_latino_ethnicity' => true,
        'identification_codes' => false,
        'identification_documents' => false,
        'international_addresses' => false,
        'languages' => false,
        'last_surname' => false,
        'login_id' => true,
        'maiden_name' => true,
        'middle_name' => true,
        'other_names' => false,
        'personal_identification_documents' => false,
        'personal_title_prefix' => true,
        'preferred_first_name' => true,
        'preferred_last_surname' => true,
        'races' => false,
        'recognitions' => false,
        'sex_descriptor' => true,
        'telephones' => false,
        'tribal_affiliations' => false,
        'visas' => false,
        'years_of_prior_professional_experience' => true,
        'years_of_prior_teaching_experience' => true,
        '_etag' => false,
        '_last_modified_date' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'staff_unique_id' => 'staffUniqueId',
        'person_reference' => 'personReference',
        'addresses' => 'addresses',
        'ancestry_ethnic_origins' => 'ancestryEthnicOrigins',
        'birth_date' => 'birthDate',
        'citizenship_status_descriptor' => 'citizenshipStatusDescriptor',
        'credentials' => 'credentials',
        'electronic_mails' => 'electronicMails',
        'first_name' => 'firstName',
        'gender_identity' => 'genderIdentity',
        'generation_code_suffix' => 'generationCodeSuffix',
        'highest_completed_level_of_education_descriptor' => 'highestCompletedLevelOfEducationDescriptor',
        'highly_qualified_teacher' => 'highlyQualifiedTeacher',
        'hispanic_latino_ethnicity' => 'hispanicLatinoEthnicity',
        'identification_codes' => 'identificationCodes',
        'identification_documents' => 'identificationDocuments',
        'international_addresses' => 'internationalAddresses',
        'languages' => 'languages',
        'last_surname' => 'lastSurname',
        'login_id' => 'loginId',
        'maiden_name' => 'maidenName',
        'middle_name' => 'middleName',
        'other_names' => 'otherNames',
        'personal_identification_documents' => 'personalIdentificationDocuments',
        'personal_title_prefix' => 'personalTitlePrefix',
        'preferred_first_name' => 'preferredFirstName',
        'preferred_last_surname' => 'preferredLastSurname',
        'races' => 'races',
        'recognitions' => 'recognitions',
        'sex_descriptor' => 'sexDescriptor',
        'telephones' => 'telephones',
        'tribal_affiliations' => 'tribalAffiliations',
        'visas' => 'visas',
        'years_of_prior_professional_experience' => 'yearsOfPriorProfessionalExperience',
        'years_of_prior_teaching_experience' => 'yearsOfPriorTeachingExperience',
        '_etag' => '_etag',
        '_last_modified_date' => '_lastModifiedDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'staff_unique_id' => 'setStaffUniqueId',
        'person_reference' => 'setPersonReference',
        'addresses' => 'setAddresses',
        'ancestry_ethnic_origins' => 'setAncestryEthnicOrigins',
        'birth_date' => 'setBirthDate',
        'citizenship_status_descriptor' => 'setCitizenshipStatusDescriptor',
        'credentials' => 'setCredentials',
        'electronic_mails' => 'setElectronicMails',
        'first_name' => 'setFirstName',
        'gender_identity' => 'setGenderIdentity',
        'generation_code_suffix' => 'setGenerationCodeSuffix',
        'highest_completed_level_of_education_descriptor' => 'setHighestCompletedLevelOfEducationDescriptor',
        'highly_qualified_teacher' => 'setHighlyQualifiedTeacher',
        'hispanic_latino_ethnicity' => 'setHispanicLatinoEthnicity',
        'identification_codes' => 'setIdentificationCodes',
        'identification_documents' => 'setIdentificationDocuments',
        'international_addresses' => 'setInternationalAddresses',
        'languages' => 'setLanguages',
        'last_surname' => 'setLastSurname',
        'login_id' => 'setLoginId',
        'maiden_name' => 'setMaidenName',
        'middle_name' => 'setMiddleName',
        'other_names' => 'setOtherNames',
        'personal_identification_documents' => 'setPersonalIdentificationDocuments',
        'personal_title_prefix' => 'setPersonalTitlePrefix',
        'preferred_first_name' => 'setPreferredFirstName',
        'preferred_last_surname' => 'setPreferredLastSurname',
        'races' => 'setRaces',
        'recognitions' => 'setRecognitions',
        'sex_descriptor' => 'setSexDescriptor',
        'telephones' => 'setTelephones',
        'tribal_affiliations' => 'setTribalAffiliations',
        'visas' => 'setVisas',
        'years_of_prior_professional_experience' => 'setYearsOfPriorProfessionalExperience',
        'years_of_prior_teaching_experience' => 'setYearsOfPriorTeachingExperience',
        '_etag' => 'setEtag',
        '_last_modified_date' => 'setLastModifiedDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'staff_unique_id' => 'getStaffUniqueId',
        'person_reference' => 'getPersonReference',
        'addresses' => 'getAddresses',
        'ancestry_ethnic_origins' => 'getAncestryEthnicOrigins',
        'birth_date' => 'getBirthDate',
        'citizenship_status_descriptor' => 'getCitizenshipStatusDescriptor',
        'credentials' => 'getCredentials',
        'electronic_mails' => 'getElectronicMails',
        'first_name' => 'getFirstName',
        'gender_identity' => 'getGenderIdentity',
        'generation_code_suffix' => 'getGenerationCodeSuffix',
        'highest_completed_level_of_education_descriptor' => 'getHighestCompletedLevelOfEducationDescriptor',
        'highly_qualified_teacher' => 'getHighlyQualifiedTeacher',
        'hispanic_latino_ethnicity' => 'getHispanicLatinoEthnicity',
        'identification_codes' => 'getIdentificationCodes',
        'identification_documents' => 'getIdentificationDocuments',
        'international_addresses' => 'getInternationalAddresses',
        'languages' => 'getLanguages',
        'last_surname' => 'getLastSurname',
        'login_id' => 'getLoginId',
        'maiden_name' => 'getMaidenName',
        'middle_name' => 'getMiddleName',
        'other_names' => 'getOtherNames',
        'personal_identification_documents' => 'getPersonalIdentificationDocuments',
        'personal_title_prefix' => 'getPersonalTitlePrefix',
        'preferred_first_name' => 'getPreferredFirstName',
        'preferred_last_surname' => 'getPreferredLastSurname',
        'races' => 'getRaces',
        'recognitions' => 'getRecognitions',
        'sex_descriptor' => 'getSexDescriptor',
        'telephones' => 'getTelephones',
        'tribal_affiliations' => 'getTribalAffiliations',
        'visas' => 'getVisas',
        'years_of_prior_professional_experience' => 'getYearsOfPriorProfessionalExperience',
        'years_of_prior_teaching_experience' => 'getYearsOfPriorTeachingExperience',
        '_etag' => 'getEtag',
        '_last_modified_date' => 'getLastModifiedDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('staff_unique_id', $data ?? [], null);
        $this->setIfExists('person_reference', $data ?? [], null);
        $this->setIfExists('addresses', $data ?? [], null);
        $this->setIfExists('ancestry_ethnic_origins', $data ?? [], null);
        $this->setIfExists('birth_date', $data ?? [], null);
        $this->setIfExists('citizenship_status_descriptor', $data ?? [], null);
        $this->setIfExists('credentials', $data ?? [], null);
        $this->setIfExists('electronic_mails', $data ?? [], null);
        $this->setIfExists('first_name', $data ?? [], null);
        $this->setIfExists('gender_identity', $data ?? [], null);
        $this->setIfExists('generation_code_suffix', $data ?? [], null);
        $this->setIfExists('highest_completed_level_of_education_descriptor', $data ?? [], null);
        $this->setIfExists('highly_qualified_teacher', $data ?? [], null);
        $this->setIfExists('hispanic_latino_ethnicity', $data ?? [], null);
        $this->setIfExists('identification_codes', $data ?? [], null);
        $this->setIfExists('identification_documents', $data ?? [], null);
        $this->setIfExists('international_addresses', $data ?? [], null);
        $this->setIfExists('languages', $data ?? [], null);
        $this->setIfExists('last_surname', $data ?? [], null);
        $this->setIfExists('login_id', $data ?? [], null);
        $this->setIfExists('maiden_name', $data ?? [], null);
        $this->setIfExists('middle_name', $data ?? [], null);
        $this->setIfExists('other_names', $data ?? [], null);
        $this->setIfExists('personal_identification_documents', $data ?? [], null);
        $this->setIfExists('personal_title_prefix', $data ?? [], null);
        $this->setIfExists('preferred_first_name', $data ?? [], null);
        $this->setIfExists('preferred_last_surname', $data ?? [], null);
        $this->setIfExists('races', $data ?? [], null);
        $this->setIfExists('recognitions', $data ?? [], null);
        $this->setIfExists('sex_descriptor', $data ?? [], null);
        $this->setIfExists('telephones', $data ?? [], null);
        $this->setIfExists('tribal_affiliations', $data ?? [], null);
        $this->setIfExists('visas', $data ?? [], null);
        $this->setIfExists('years_of_prior_professional_experience', $data ?? [], null);
        $this->setIfExists('years_of_prior_teaching_experience', $data ?? [], null);
        $this->setIfExists('_etag', $data ?? [], null);
        $this->setIfExists('_last_modified_date', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['staff_unique_id'] === null) {
            $invalidProperties[] = "'staff_unique_id' can't be null";
        }
        if ((mb_strlen($this->container['staff_unique_id']) > 32)) {
            $invalidProperties[] = "invalid value for 'staff_unique_id', the character length must be smaller than or equal to 32.";
        }

        if ((mb_strlen($this->container['staff_unique_id']) < 1)) {
            $invalidProperties[] = "invalid value for 'staff_unique_id', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['citizenship_status_descriptor']) && (mb_strlen($this->container['citizenship_status_descriptor']) > 306)) {
            $invalidProperties[] = "invalid value for 'citizenship_status_descriptor', the character length must be smaller than or equal to 306.";
        }

        if ($this->container['first_name'] === null) {
            $invalidProperties[] = "'first_name' can't be null";
        }
        if ((mb_strlen($this->container['first_name']) > 75)) {
            $invalidProperties[] = "invalid value for 'first_name', the character length must be smaller than or equal to 75.";
        }

        if ((mb_strlen($this->container['first_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'first_name', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['gender_identity']) && (mb_strlen($this->container['gender_identity']) > 60)) {
            $invalidProperties[] = "invalid value for 'gender_identity', the character length must be smaller than or equal to 60.";
        }

        if (!is_null($this->container['generation_code_suffix']) && (mb_strlen($this->container['generation_code_suffix']) > 10)) {
            $invalidProperties[] = "invalid value for 'generation_code_suffix', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['generation_code_suffix']) && (mb_strlen($this->container['generation_code_suffix']) < 1)) {
            $invalidProperties[] = "invalid value for 'generation_code_suffix', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['highest_completed_level_of_education_descriptor']) && (mb_strlen($this->container['highest_completed_level_of_education_descriptor']) > 306)) {
            $invalidProperties[] = "invalid value for 'highest_completed_level_of_education_descriptor', the character length must be smaller than or equal to 306.";
        }

        if ($this->container['last_surname'] === null) {
            $invalidProperties[] = "'last_surname' can't be null";
        }
        if ((mb_strlen($this->container['last_surname']) > 75)) {
            $invalidProperties[] = "invalid value for 'last_surname', the character length must be smaller than or equal to 75.";
        }

        if ((mb_strlen($this->container['last_surname']) < 1)) {
            $invalidProperties[] = "invalid value for 'last_surname', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['login_id']) && (mb_strlen($this->container['login_id']) > 60)) {
            $invalidProperties[] = "invalid value for 'login_id', the character length must be smaller than or equal to 60.";
        }

        if (!is_null($this->container['login_id']) && (mb_strlen($this->container['login_id']) < 1)) {
            $invalidProperties[] = "invalid value for 'login_id', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['maiden_name']) && (mb_strlen($this->container['maiden_name']) > 75)) {
            $invalidProperties[] = "invalid value for 'maiden_name', the character length must be smaller than or equal to 75.";
        }

        if (!is_null($this->container['maiden_name']) && (mb_strlen($this->container['maiden_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'maiden_name', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['middle_name']) && (mb_strlen($this->container['middle_name']) > 75)) {
            $invalidProperties[] = "invalid value for 'middle_name', the character length must be smaller than or equal to 75.";
        }

        if (!is_null($this->container['middle_name']) && (mb_strlen($this->container['middle_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'middle_name', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['personal_title_prefix']) && (mb_strlen($this->container['personal_title_prefix']) > 30)) {
            $invalidProperties[] = "invalid value for 'personal_title_prefix', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['personal_title_prefix']) && (mb_strlen($this->container['personal_title_prefix']) < 1)) {
            $invalidProperties[] = "invalid value for 'personal_title_prefix', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['preferred_first_name']) && (mb_strlen($this->container['preferred_first_name']) > 75)) {
            $invalidProperties[] = "invalid value for 'preferred_first_name', the character length must be smaller than or equal to 75.";
        }

        if (!is_null($this->container['preferred_first_name']) && (mb_strlen($this->container['preferred_first_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'preferred_first_name', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['preferred_last_surname']) && (mb_strlen($this->container['preferred_last_surname']) > 75)) {
            $invalidProperties[] = "invalid value for 'preferred_last_surname', the character length must be smaller than or equal to 75.";
        }

        if (!is_null($this->container['preferred_last_surname']) && (mb_strlen($this->container['preferred_last_surname']) < 1)) {
            $invalidProperties[] = "invalid value for 'preferred_last_surname', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['sex_descriptor']) && (mb_strlen($this->container['sex_descriptor']) > 306)) {
            $invalidProperties[] = "invalid value for 'sex_descriptor', the character length must be smaller than or equal to 306.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id 
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets staff_unique_id
     *
     * @return string
     */
    public function getStaffUniqueId()
    {
        return $this->container['staff_unique_id'];
    }

    /**
     * Sets staff_unique_id
     *
     * @param string $staff_unique_id A unique alphanumeric code assigned to a staff.
     *
     * @return self
     */
    public function setStaffUniqueId($staff_unique_id)
    {
        if (is_null($staff_unique_id)) {
            throw new \InvalidArgumentException('non-nullable staff_unique_id cannot be null');
        }
        if ((mb_strlen($staff_unique_id) > 32)) {
            throw new \InvalidArgumentException('invalid length for $staff_unique_id when calling EdFiStaff., must be smaller than or equal to 32.');
        }
        if ((mb_strlen($staff_unique_id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $staff_unique_id when calling EdFiStaff., must be bigger than or equal to 1.');
        }

        $this->container['staff_unique_id'] = $staff_unique_id;

        return $this;
    }

    /**
     * Gets person_reference
     *
     * @return \OpenAPI\Client\Model\EdFiPersonReference|null
     */
    public function getPersonReference()
    {
        return $this->container['person_reference'];
    }

    /**
     * Sets person_reference
     *
     * @param \OpenAPI\Client\Model\EdFiPersonReference|null $person_reference person_reference
     *
     * @return self
     */
    public function setPersonReference($person_reference)
    {
        if (is_null($person_reference)) {
            throw new \InvalidArgumentException('non-nullable person_reference cannot be null');
        }
        $this->container['person_reference'] = $person_reference;

        return $this;
    }

    /**
     * Gets addresses
     *
     * @return \OpenAPI\Client\Model\EdFiStaffAddress[]|null
     */
    public function getAddresses()
    {
        return $this->container['addresses'];
    }

    /**
     * Sets addresses
     *
     * @param \OpenAPI\Client\Model\EdFiStaffAddress[]|null $addresses An unordered collection of staffAddresses. The set of elements that describes an address, including the street address, city, state, and ZIP code.
     *
     * @return self
     */
    public function setAddresses($addresses)
    {
        if (is_null($addresses)) {
            throw new \InvalidArgumentException('non-nullable addresses cannot be null');
        }
        $this->container['addresses'] = $addresses;

        return $this;
    }

    /**
     * Gets ancestry_ethnic_origins
     *
     * @return \OpenAPI\Client\Model\EdFiStaffAncestryEthnicOrigin[]|null
     */
    public function getAncestryEthnicOrigins()
    {
        return $this->container['ancestry_ethnic_origins'];
    }

    /**
     * Sets ancestry_ethnic_origins
     *
     * @param \OpenAPI\Client\Model\EdFiStaffAncestryEthnicOrigin[]|null $ancestry_ethnic_origins An unordered collection of staffAncestryEthnicOrigins. The original peoples or cultures with which the individual identifies.
     *
     * @return self
     */
    public function setAncestryEthnicOrigins($ancestry_ethnic_origins)
    {
        if (is_null($ancestry_ethnic_origins)) {
            throw new \InvalidArgumentException('non-nullable ancestry_ethnic_origins cannot be null');
        }
        $this->container['ancestry_ethnic_origins'] = $ancestry_ethnic_origins;

        return $this;
    }

    /**
     * Gets birth_date
     *
     * @return \DateTime|null
     */
    public function getBirthDate()
    {
        return $this->container['birth_date'];
    }

    /**
     * Sets birth_date
     *
     * @param \DateTime|null $birth_date The month, day, and year on which an individual was born.
     *
     * @return self
     */
    public function setBirthDate($birth_date)
    {
        if (is_null($birth_date)) {
            array_push($this->openAPINullablesSetToNull, 'birth_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('birth_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['birth_date'] = $birth_date;

        return $this;
    }

    /**
     * Gets citizenship_status_descriptor
     *
     * @return string|null
     */
    public function getCitizenshipStatusDescriptor()
    {
        return $this->container['citizenship_status_descriptor'];
    }

    /**
     * Sets citizenship_status_descriptor
     *
     * @param string|null $citizenship_status_descriptor An indicator of whether or not the person is a U.S. citizen.
     *
     * @return self
     */
    public function setCitizenshipStatusDescriptor($citizenship_status_descriptor)
    {
        if (is_null($citizenship_status_descriptor)) {
            array_push($this->openAPINullablesSetToNull, 'citizenship_status_descriptor');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('citizenship_status_descriptor', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($citizenship_status_descriptor) && (mb_strlen($citizenship_status_descriptor) > 306)) {
            throw new \InvalidArgumentException('invalid length for $citizenship_status_descriptor when calling EdFiStaff., must be smaller than or equal to 306.');
        }

        $this->container['citizenship_status_descriptor'] = $citizenship_status_descriptor;

        return $this;
    }

    /**
     * Gets credentials
     *
     * @return \OpenAPI\Client\Model\EdFiStaffCredential[]|null
     */
    public function getCredentials()
    {
        return $this->container['credentials'];
    }

    /**
     * Sets credentials
     *
     * @param \OpenAPI\Client\Model\EdFiStaffCredential[]|null $credentials An unordered collection of staffCredentials. The legal document giving authorization to perform teaching assignment services.
     *
     * @return self
     */
    public function setCredentials($credentials)
    {
        if (is_null($credentials)) {
            throw new \InvalidArgumentException('non-nullable credentials cannot be null');
        }
        $this->container['credentials'] = $credentials;

        return $this;
    }

    /**
     * Gets electronic_mails
     *
     * @return \OpenAPI\Client\Model\EdFiStaffElectronicMail[]|null
     */
    public function getElectronicMails()
    {
        return $this->container['electronic_mails'];
    }

    /**
     * Sets electronic_mails
     *
     * @param \OpenAPI\Client\Model\EdFiStaffElectronicMail[]|null $electronic_mails An unordered collection of staffElectronicMails. The numbers, letters, and symbols used to identify an electronic mail (e-mail) user within the network to which the individual or organization belongs.
     *
     * @return self
     */
    public function setElectronicMails($electronic_mails)
    {
        if (is_null($electronic_mails)) {
            throw new \InvalidArgumentException('non-nullable electronic_mails cannot be null');
        }
        $this->container['electronic_mails'] = $electronic_mails;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string $first_name A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.
     *
     * @return self
     */
    public function setFirstName($first_name)
    {
        if (is_null($first_name)) {
            throw new \InvalidArgumentException('non-nullable first_name cannot be null');
        }
        if ((mb_strlen($first_name) > 75)) {
            throw new \InvalidArgumentException('invalid length for $first_name when calling EdFiStaff., must be smaller than or equal to 75.');
        }
        if ((mb_strlen($first_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $first_name when calling EdFiStaff., must be bigger than or equal to 1.');
        }

        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets gender_identity
     *
     * @return string|null
     */
    public function getGenderIdentity()
    {
        return $this->container['gender_identity'];
    }

    /**
     * Sets gender_identity
     *
     * @param string|null $gender_identity The gender the staff member identifies themselves as.
     *
     * @return self
     */
    public function setGenderIdentity($gender_identity)
    {
        if (is_null($gender_identity)) {
            array_push($this->openAPINullablesSetToNull, 'gender_identity');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('gender_identity', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($gender_identity) && (mb_strlen($gender_identity) > 60)) {
            throw new \InvalidArgumentException('invalid length for $gender_identity when calling EdFiStaff., must be smaller than or equal to 60.');
        }

        $this->container['gender_identity'] = $gender_identity;

        return $this;
    }

    /**
     * Gets generation_code_suffix
     *
     * @return string|null
     */
    public function getGenerationCodeSuffix()
    {
        return $this->container['generation_code_suffix'];
    }

    /**
     * Sets generation_code_suffix
     *
     * @param string|null $generation_code_suffix An appendage, if any, used to denote an individual's generation in his family (e.g., Jr., Sr., III).
     *
     * @return self
     */
    public function setGenerationCodeSuffix($generation_code_suffix)
    {
        if (is_null($generation_code_suffix)) {
            array_push($this->openAPINullablesSetToNull, 'generation_code_suffix');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('generation_code_suffix', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($generation_code_suffix) && (mb_strlen($generation_code_suffix) > 10)) {
            throw new \InvalidArgumentException('invalid length for $generation_code_suffix when calling EdFiStaff., must be smaller than or equal to 10.');
        }
        if (!is_null($generation_code_suffix) && (mb_strlen($generation_code_suffix) < 1)) {
            throw new \InvalidArgumentException('invalid length for $generation_code_suffix when calling EdFiStaff., must be bigger than or equal to 1.');
        }

        $this->container['generation_code_suffix'] = $generation_code_suffix;

        return $this;
    }

    /**
     * Gets highest_completed_level_of_education_descriptor
     *
     * @return string|null
     */
    public function getHighestCompletedLevelOfEducationDescriptor()
    {
        return $this->container['highest_completed_level_of_education_descriptor'];
    }

    /**
     * Sets highest_completed_level_of_education_descriptor
     *
     * @param string|null $highest_completed_level_of_education_descriptor The extent of formal instruction an individual has received (e.g., the highest grade in school completed or its equivalent or the highest degree received).
     *
     * @return self
     */
    public function setHighestCompletedLevelOfEducationDescriptor($highest_completed_level_of_education_descriptor)
    {
        if (is_null($highest_completed_level_of_education_descriptor)) {
            array_push($this->openAPINullablesSetToNull, 'highest_completed_level_of_education_descriptor');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('highest_completed_level_of_education_descriptor', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($highest_completed_level_of_education_descriptor) && (mb_strlen($highest_completed_level_of_education_descriptor) > 306)) {
            throw new \InvalidArgumentException('invalid length for $highest_completed_level_of_education_descriptor when calling EdFiStaff., must be smaller than or equal to 306.');
        }

        $this->container['highest_completed_level_of_education_descriptor'] = $highest_completed_level_of_education_descriptor;

        return $this;
    }

    /**
     * Gets highly_qualified_teacher
     *
     * @return bool|null
     */
    public function getHighlyQualifiedTeacher()
    {
        return $this->container['highly_qualified_teacher'];
    }

    /**
     * Sets highly_qualified_teacher
     *
     * @param bool|null $highly_qualified_teacher An indication of whether a teacher is classified as highly qualified for his/her assignment according to state definition. This attribute indicates the teacher is highly qualified for ALL Sections being taught.
     *
     * @return self
     */
    public function setHighlyQualifiedTeacher($highly_qualified_teacher)
    {
        if (is_null($highly_qualified_teacher)) {
            array_push($this->openAPINullablesSetToNull, 'highly_qualified_teacher');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('highly_qualified_teacher', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['highly_qualified_teacher'] = $highly_qualified_teacher;

        return $this;
    }

    /**
     * Gets hispanic_latino_ethnicity
     *
     * @return bool|null
     */
    public function getHispanicLatinoEthnicity()
    {
        return $this->container['hispanic_latino_ethnicity'];
    }

    /**
     * Sets hispanic_latino_ethnicity
     *
     * @param bool|null $hispanic_latino_ethnicity An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, \"Spanish origin,\" can be used in addition to \"Hispanic or Latino.\"
     *
     * @return self
     */
    public function setHispanicLatinoEthnicity($hispanic_latino_ethnicity)
    {
        if (is_null($hispanic_latino_ethnicity)) {
            array_push($this->openAPINullablesSetToNull, 'hispanic_latino_ethnicity');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('hispanic_latino_ethnicity', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['hispanic_latino_ethnicity'] = $hispanic_latino_ethnicity;

        return $this;
    }

    /**
     * Gets identification_codes
     *
     * @return \OpenAPI\Client\Model\EdFiStaffIdentificationCode[]|null
     */
    public function getIdentificationCodes()
    {
        return $this->container['identification_codes'];
    }

    /**
     * Sets identification_codes
     *
     * @param \OpenAPI\Client\Model\EdFiStaffIdentificationCode[]|null $identification_codes An unordered collection of staffIdentificationCodes. A unique number or alphanumeric code assigned to a staff member by a school, school system, a state, or other agency or entity.
     *
     * @return self
     */
    public function setIdentificationCodes($identification_codes)
    {
        if (is_null($identification_codes)) {
            throw new \InvalidArgumentException('non-nullable identification_codes cannot be null');
        }
        $this->container['identification_codes'] = $identification_codes;

        return $this;
    }

    /**
     * Gets identification_documents
     *
     * @return \OpenAPI\Client\Model\EdFiStaffIdentificationDocument[]|null
     */
    public function getIdentificationDocuments()
    {
        return $this->container['identification_documents'];
    }

    /**
     * Sets identification_documents
     *
     * @param \OpenAPI\Client\Model\EdFiStaffIdentificationDocument[]|null $identification_documents An unordered collection of staffIdentificationDocuments. Describe the documentation of citizenship.
     *
     * @return self
     */
    public function setIdentificationDocuments($identification_documents)
    {
        if (is_null($identification_documents)) {
            throw new \InvalidArgumentException('non-nullable identification_documents cannot be null');
        }
        $this->container['identification_documents'] = $identification_documents;

        return $this;
    }

    /**
     * Gets international_addresses
     *
     * @return \OpenAPI\Client\Model\EdFiStaffInternationalAddress[]|null
     */
    public function getInternationalAddresses()
    {
        return $this->container['international_addresses'];
    }

    /**
     * Sets international_addresses
     *
     * @param \OpenAPI\Client\Model\EdFiStaffInternationalAddress[]|null $international_addresses An unordered collection of staffInternationalAddresses. The set of elements that describes an international address.
     *
     * @return self
     */
    public function setInternationalAddresses($international_addresses)
    {
        if (is_null($international_addresses)) {
            throw new \InvalidArgumentException('non-nullable international_addresses cannot be null');
        }
        $this->container['international_addresses'] = $international_addresses;

        return $this;
    }

    /**
     * Gets languages
     *
     * @return \OpenAPI\Client\Model\EdFiStaffLanguage[]|null
     */
    public function getLanguages()
    {
        return $this->container['languages'];
    }

    /**
     * Sets languages
     *
     * @param \OpenAPI\Client\Model\EdFiStaffLanguage[]|null $languages An unordered collection of staffLanguages. The language(s) the individual uses to communicate. It is strongly recommended that entries use only ISO 639-2 language codes.
     *
     * @return self
     */
    public function setLanguages($languages)
    {
        if (is_null($languages)) {
            throw new \InvalidArgumentException('non-nullable languages cannot be null');
        }
        $this->container['languages'] = $languages;

        return $this;
    }

    /**
     * Gets last_surname
     *
     * @return string
     */
    public function getLastSurname()
    {
        return $this->container['last_surname'];
    }

    /**
     * Sets last_surname
     *
     * @param string $last_surname The name borne in common by members of a family.
     *
     * @return self
     */
    public function setLastSurname($last_surname)
    {
        if (is_null($last_surname)) {
            throw new \InvalidArgumentException('non-nullable last_surname cannot be null');
        }
        if ((mb_strlen($last_surname) > 75)) {
            throw new \InvalidArgumentException('invalid length for $last_surname when calling EdFiStaff., must be smaller than or equal to 75.');
        }
        if ((mb_strlen($last_surname) < 1)) {
            throw new \InvalidArgumentException('invalid length for $last_surname when calling EdFiStaff., must be bigger than or equal to 1.');
        }

        $this->container['last_surname'] = $last_surname;

        return $this;
    }

    /**
     * Gets login_id
     *
     * @return string|null
     */
    public function getLoginId()
    {
        return $this->container['login_id'];
    }

    /**
     * Sets login_id
     *
     * @param string|null $login_id The login ID for the user; used for security access control interface.
     *
     * @return self
     */
    public function setLoginId($login_id)
    {
        if (is_null($login_id)) {
            array_push($this->openAPINullablesSetToNull, 'login_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('login_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($login_id) && (mb_strlen($login_id) > 60)) {
            throw new \InvalidArgumentException('invalid length for $login_id when calling EdFiStaff., must be smaller than or equal to 60.');
        }
        if (!is_null($login_id) && (mb_strlen($login_id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $login_id when calling EdFiStaff., must be bigger than or equal to 1.');
        }

        $this->container['login_id'] = $login_id;

        return $this;
    }

    /**
     * Gets maiden_name
     *
     * @return string|null
     */
    public function getMaidenName()
    {
        return $this->container['maiden_name'];
    }

    /**
     * Sets maiden_name
     *
     * @param string|null $maiden_name The individual's maiden name.
     *
     * @return self
     */
    public function setMaidenName($maiden_name)
    {
        if (is_null($maiden_name)) {
            array_push($this->openAPINullablesSetToNull, 'maiden_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('maiden_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($maiden_name) && (mb_strlen($maiden_name) > 75)) {
            throw new \InvalidArgumentException('invalid length for $maiden_name when calling EdFiStaff., must be smaller than or equal to 75.');
        }
        if (!is_null($maiden_name) && (mb_strlen($maiden_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $maiden_name when calling EdFiStaff., must be bigger than or equal to 1.');
        }

        $this->container['maiden_name'] = $maiden_name;

        return $this;
    }

    /**
     * Gets middle_name
     *
     * @return string|null
     */
    public function getMiddleName()
    {
        return $this->container['middle_name'];
    }

    /**
     * Sets middle_name
     *
     * @param string|null $middle_name A secondary name given to an individual at birth, baptism, or during another naming ceremony.
     *
     * @return self
     */
    public function setMiddleName($middle_name)
    {
        if (is_null($middle_name)) {
            array_push($this->openAPINullablesSetToNull, 'middle_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('middle_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($middle_name) && (mb_strlen($middle_name) > 75)) {
            throw new \InvalidArgumentException('invalid length for $middle_name when calling EdFiStaff., must be smaller than or equal to 75.');
        }
        if (!is_null($middle_name) && (mb_strlen($middle_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $middle_name when calling EdFiStaff., must be bigger than or equal to 1.');
        }

        $this->container['middle_name'] = $middle_name;

        return $this;
    }

    /**
     * Gets other_names
     *
     * @return \OpenAPI\Client\Model\EdFiStaffOtherName[]|null
     */
    public function getOtherNames()
    {
        return $this->container['other_names'];
    }

    /**
     * Sets other_names
     *
     * @param \OpenAPI\Client\Model\EdFiStaffOtherName[]|null $other_names An unordered collection of staffOtherNames. Other names (e.g., alias, nickname, previous legal name) associated with a person.
     *
     * @return self
     */
    public function setOtherNames($other_names)
    {
        if (is_null($other_names)) {
            throw new \InvalidArgumentException('non-nullable other_names cannot be null');
        }
        $this->container['other_names'] = $other_names;

        return $this;
    }

    /**
     * Gets personal_identification_documents
     *
     * @return \OpenAPI\Client\Model\EdFiStaffPersonalIdentificationDocument[]|null
     */
    public function getPersonalIdentificationDocuments()
    {
        return $this->container['personal_identification_documents'];
    }

    /**
     * Sets personal_identification_documents
     *
     * @param \OpenAPI\Client\Model\EdFiStaffPersonalIdentificationDocument[]|null $personal_identification_documents An unordered collection of staffPersonalIdentificationDocuments. The documents presented as evident to verify one's personal identity; for example: drivers license, passport, birth certificate, etc.
     *
     * @return self
     */
    public function setPersonalIdentificationDocuments($personal_identification_documents)
    {
        if (is_null($personal_identification_documents)) {
            throw new \InvalidArgumentException('non-nullable personal_identification_documents cannot be null');
        }
        $this->container['personal_identification_documents'] = $personal_identification_documents;

        return $this;
    }

    /**
     * Gets personal_title_prefix
     *
     * @return string|null
     */
    public function getPersonalTitlePrefix()
    {
        return $this->container['personal_title_prefix'];
    }

    /**
     * Sets personal_title_prefix
     *
     * @param string|null $personal_title_prefix A prefix used to denote the title, degree, position, or seniority of the individual.
     *
     * @return self
     */
    public function setPersonalTitlePrefix($personal_title_prefix)
    {
        if (is_null($personal_title_prefix)) {
            array_push($this->openAPINullablesSetToNull, 'personal_title_prefix');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('personal_title_prefix', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($personal_title_prefix) && (mb_strlen($personal_title_prefix) > 30)) {
            throw new \InvalidArgumentException('invalid length for $personal_title_prefix when calling EdFiStaff., must be smaller than or equal to 30.');
        }
        if (!is_null($personal_title_prefix) && (mb_strlen($personal_title_prefix) < 1)) {
            throw new \InvalidArgumentException('invalid length for $personal_title_prefix when calling EdFiStaff., must be bigger than or equal to 1.');
        }

        $this->container['personal_title_prefix'] = $personal_title_prefix;

        return $this;
    }

    /**
     * Gets preferred_first_name
     *
     * @return string|null
     */
    public function getPreferredFirstName()
    {
        return $this->container['preferred_first_name'];
    }

    /**
     * Sets preferred_first_name
     *
     * @param string|null $preferred_first_name The first name the individual prefers, if different from their legal first name
     *
     * @return self
     */
    public function setPreferredFirstName($preferred_first_name)
    {
        if (is_null($preferred_first_name)) {
            array_push($this->openAPINullablesSetToNull, 'preferred_first_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('preferred_first_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($preferred_first_name) && (mb_strlen($preferred_first_name) > 75)) {
            throw new \InvalidArgumentException('invalid length for $preferred_first_name when calling EdFiStaff., must be smaller than or equal to 75.');
        }
        if (!is_null($preferred_first_name) && (mb_strlen($preferred_first_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $preferred_first_name when calling EdFiStaff., must be bigger than or equal to 1.');
        }

        $this->container['preferred_first_name'] = $preferred_first_name;

        return $this;
    }

    /**
     * Gets preferred_last_surname
     *
     * @return string|null
     */
    public function getPreferredLastSurname()
    {
        return $this->container['preferred_last_surname'];
    }

    /**
     * Sets preferred_last_surname
     *
     * @param string|null $preferred_last_surname The last name the individual prefers, if different from their legal last name
     *
     * @return self
     */
    public function setPreferredLastSurname($preferred_last_surname)
    {
        if (is_null($preferred_last_surname)) {
            array_push($this->openAPINullablesSetToNull, 'preferred_last_surname');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('preferred_last_surname', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($preferred_last_surname) && (mb_strlen($preferred_last_surname) > 75)) {
            throw new \InvalidArgumentException('invalid length for $preferred_last_surname when calling EdFiStaff., must be smaller than or equal to 75.');
        }
        if (!is_null($preferred_last_surname) && (mb_strlen($preferred_last_surname) < 1)) {
            throw new \InvalidArgumentException('invalid length for $preferred_last_surname when calling EdFiStaff., must be bigger than or equal to 1.');
        }

        $this->container['preferred_last_surname'] = $preferred_last_surname;

        return $this;
    }

    /**
     * Gets races
     *
     * @return \OpenAPI\Client\Model\EdFiStaffRace[]|null
     */
    public function getRaces()
    {
        return $this->container['races'];
    }

    /**
     * Sets races
     *
     * @param \OpenAPI\Client\Model\EdFiStaffRace[]|null $races An unordered collection of staffRaces. The general racial category which most clearly reflects the individual's recognition of his or her community or with which the individual most identifies. The way this data element is listed, it must allow for multiple entries so that each individual can specify all appropriate races.
     *
     * @return self
     */
    public function setRaces($races)
    {
        if (is_null($races)) {
            throw new \InvalidArgumentException('non-nullable races cannot be null');
        }
        $this->container['races'] = $races;

        return $this;
    }

    /**
     * Gets recognitions
     *
     * @return \OpenAPI\Client\Model\EdFiStaffRecognition[]|null
     */
    public function getRecognitions()
    {
        return $this->container['recognitions'];
    }

    /**
     * Sets recognitions
     *
     * @param \OpenAPI\Client\Model\EdFiStaffRecognition[]|null $recognitions An unordered collection of staffRecognitions. Recognitions given to the staff for accomplishments in a co-curricular or extracurricular activity.
     *
     * @return self
     */
    public function setRecognitions($recognitions)
    {
        if (is_null($recognitions)) {
            throw new \InvalidArgumentException('non-nullable recognitions cannot be null');
        }
        $this->container['recognitions'] = $recognitions;

        return $this;
    }

    /**
     * Gets sex_descriptor
     *
     * @return string|null
     */
    public function getSexDescriptor()
    {
        return $this->container['sex_descriptor'];
    }

    /**
     * Sets sex_descriptor
     *
     * @param string|null $sex_descriptor The birth sex of the staff member.
     *
     * @return self
     */
    public function setSexDescriptor($sex_descriptor)
    {
        if (is_null($sex_descriptor)) {
            array_push($this->openAPINullablesSetToNull, 'sex_descriptor');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sex_descriptor', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($sex_descriptor) && (mb_strlen($sex_descriptor) > 306)) {
            throw new \InvalidArgumentException('invalid length for $sex_descriptor when calling EdFiStaff., must be smaller than or equal to 306.');
        }

        $this->container['sex_descriptor'] = $sex_descriptor;

        return $this;
    }

    /**
     * Gets telephones
     *
     * @return \OpenAPI\Client\Model\EdFiStaffTelephone[]|null
     */
    public function getTelephones()
    {
        return $this->container['telephones'];
    }

    /**
     * Sets telephones
     *
     * @param \OpenAPI\Client\Model\EdFiStaffTelephone[]|null $telephones An unordered collection of staffTelephones. The 10-digit telephone number, including the area code, for the person.
     *
     * @return self
     */
    public function setTelephones($telephones)
    {
        if (is_null($telephones)) {
            throw new \InvalidArgumentException('non-nullable telephones cannot be null');
        }
        $this->container['telephones'] = $telephones;

        return $this;
    }

    /**
     * Gets tribal_affiliations
     *
     * @return \OpenAPI\Client\Model\EdFiStaffTribalAffiliation[]|null
     */
    public function getTribalAffiliations()
    {
        return $this->container['tribal_affiliations'];
    }

    /**
     * Sets tribal_affiliations
     *
     * @param \OpenAPI\Client\Model\EdFiStaffTribalAffiliation[]|null $tribal_affiliations An unordered collection of staffTribalAffiliations. An American Indian tribe with which the staff member is affiliated.
     *
     * @return self
     */
    public function setTribalAffiliations($tribal_affiliations)
    {
        if (is_null($tribal_affiliations)) {
            throw new \InvalidArgumentException('non-nullable tribal_affiliations cannot be null');
        }
        $this->container['tribal_affiliations'] = $tribal_affiliations;

        return $this;
    }

    /**
     * Gets visas
     *
     * @return \OpenAPI\Client\Model\EdFiStaffVisa[]|null
     */
    public function getVisas()
    {
        return $this->container['visas'];
    }

    /**
     * Sets visas
     *
     * @param \OpenAPI\Client\Model\EdFiStaffVisa[]|null $visas An unordered collection of staffVisas. An indicator of a non-US citizen's Visa type.
     *
     * @return self
     */
    public function setVisas($visas)
    {
        if (is_null($visas)) {
            throw new \InvalidArgumentException('non-nullable visas cannot be null');
        }
        $this->container['visas'] = $visas;

        return $this;
    }

    /**
     * Gets years_of_prior_professional_experience
     *
     * @return float|null
     */
    public function getYearsOfPriorProfessionalExperience()
    {
        return $this->container['years_of_prior_professional_experience'];
    }

    /**
     * Sets years_of_prior_professional_experience
     *
     * @param float|null $years_of_prior_professional_experience The total number of years that an individual has previously held a similar professional position in one or more education institutions prior to the current school year.
     *
     * @return self
     */
    public function setYearsOfPriorProfessionalExperience($years_of_prior_professional_experience)
    {
        if (is_null($years_of_prior_professional_experience)) {
            array_push($this->openAPINullablesSetToNull, 'years_of_prior_professional_experience');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('years_of_prior_professional_experience', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['years_of_prior_professional_experience'] = $years_of_prior_professional_experience;

        return $this;
    }

    /**
     * Gets years_of_prior_teaching_experience
     *
     * @return float|null
     */
    public function getYearsOfPriorTeachingExperience()
    {
        return $this->container['years_of_prior_teaching_experience'];
    }

    /**
     * Sets years_of_prior_teaching_experience
     *
     * @param float|null $years_of_prior_teaching_experience The total number of years that an individual has previously held a teaching position in one or more education institutions prior to the current school year.
     *
     * @return self
     */
    public function setYearsOfPriorTeachingExperience($years_of_prior_teaching_experience)
    {
        if (is_null($years_of_prior_teaching_experience)) {
            array_push($this->openAPINullablesSetToNull, 'years_of_prior_teaching_experience');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('years_of_prior_teaching_experience', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['years_of_prior_teaching_experience'] = $years_of_prior_teaching_experience;

        return $this;
    }

    /**
     * Gets _etag
     *
     * @return string|null
     */
    public function getEtag()
    {
        return $this->container['_etag'];
    }

    /**
     * Sets _etag
     *
     * @param string|null $_etag A unique system-generated value that identifies the version of the resource.
     *
     * @return self
     */
    public function setEtag($_etag)
    {
        if (is_null($_etag)) {
            throw new \InvalidArgumentException('non-nullable _etag cannot be null');
        }
        $this->container['_etag'] = $_etag;

        return $this;
    }

    /**
     * Gets _last_modified_date
     *
     * @return \DateTime|null
     */
    public function getLastModifiedDate()
    {
        return $this->container['_last_modified_date'];
    }

    /**
     * Sets _last_modified_date
     *
     * @param \DateTime|null $_last_modified_date The date and time the resource was last modified.
     *
     * @return self
     */
    public function setLastModifiedDate($_last_modified_date)
    {
        if (is_null($_last_modified_date)) {
            throw new \InvalidArgumentException('non-nullable _last_modified_date cannot be null');
        }
        $this->container['_last_modified_date'] = $_last_modified_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


