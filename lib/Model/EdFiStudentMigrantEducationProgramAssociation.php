<?php
/**
 * EdFiStudentMigrantEducationProgramAssociation
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * EdFiStudentMigrantEducationProgramAssociation Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EdFiStudentMigrantEducationProgramAssociation implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'edFi_studentMigrantEducationProgramAssociation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'begin_date' => '\DateTime',
        'education_organization_reference' => '\OpenAPI\Client\Model\EdFiEducationOrganizationReference',
        'program_reference' => '\OpenAPI\Client\Model\EdFiProgramReference',
        'student_reference' => '\OpenAPI\Client\Model\EdFiStudentReference',
        'continuation_of_services_reason_descriptor' => 'string',
        'eligibility_expiration_date' => '\DateTime',
        'end_date' => '\DateTime',
        'last_qualifying_move' => '\DateTime',
        'migrant_education_program_services' => '\OpenAPI\Client\Model\EdFiStudentMigrantEducationProgramAssociationMigrantEducationProgramService[]',
        'priority_for_services' => 'bool',
        'program_participation_statuses' => '\OpenAPI\Client\Model\EdFiGeneralStudentProgramAssociationProgramParticipationStatus[]',
        'qualifying_arrival_date' => '\DateTime',
        'reason_exited_descriptor' => 'string',
        'served_outside_of_regular_session' => 'bool',
        'state_residency_date' => '\DateTime',
        'us_initial_entry' => '\DateTime',
        'us_initial_school_entry' => '\DateTime',
        'us_most_recent_entry' => '\DateTime',
        '_etag' => 'string',
        '_last_modified_date' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'begin_date' => 'date',
        'education_organization_reference' => null,
        'program_reference' => null,
        'student_reference' => null,
        'continuation_of_services_reason_descriptor' => null,
        'eligibility_expiration_date' => 'date',
        'end_date' => 'date',
        'last_qualifying_move' => 'date',
        'migrant_education_program_services' => null,
        'priority_for_services' => null,
        'program_participation_statuses' => null,
        'qualifying_arrival_date' => 'date',
        'reason_exited_descriptor' => null,
        'served_outside_of_regular_session' => null,
        'state_residency_date' => 'date',
        'us_initial_entry' => 'date',
        'us_initial_school_entry' => 'date',
        'us_most_recent_entry' => 'date',
        '_etag' => null,
        '_last_modified_date' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'begin_date' => false,
        'education_organization_reference' => false,
        'program_reference' => false,
        'student_reference' => false,
        'continuation_of_services_reason_descriptor' => true,
        'eligibility_expiration_date' => true,
        'end_date' => true,
        'last_qualifying_move' => false,
        'migrant_education_program_services' => false,
        'priority_for_services' => false,
        'program_participation_statuses' => false,
        'qualifying_arrival_date' => true,
        'reason_exited_descriptor' => true,
        'served_outside_of_regular_session' => true,
        'state_residency_date' => true,
        'us_initial_entry' => true,
        'us_initial_school_entry' => true,
        'us_most_recent_entry' => true,
        '_etag' => false,
        '_last_modified_date' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'begin_date' => 'beginDate',
        'education_organization_reference' => 'educationOrganizationReference',
        'program_reference' => 'programReference',
        'student_reference' => 'studentReference',
        'continuation_of_services_reason_descriptor' => 'continuationOfServicesReasonDescriptor',
        'eligibility_expiration_date' => 'eligibilityExpirationDate',
        'end_date' => 'endDate',
        'last_qualifying_move' => 'lastQualifyingMove',
        'migrant_education_program_services' => 'migrantEducationProgramServices',
        'priority_for_services' => 'priorityForServices',
        'program_participation_statuses' => 'programParticipationStatuses',
        'qualifying_arrival_date' => 'qualifyingArrivalDate',
        'reason_exited_descriptor' => 'reasonExitedDescriptor',
        'served_outside_of_regular_session' => 'servedOutsideOfRegularSession',
        'state_residency_date' => 'stateResidencyDate',
        'us_initial_entry' => 'usInitialEntry',
        'us_initial_school_entry' => 'usInitialSchoolEntry',
        'us_most_recent_entry' => 'usMostRecentEntry',
        '_etag' => '_etag',
        '_last_modified_date' => '_lastModifiedDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'begin_date' => 'setBeginDate',
        'education_organization_reference' => 'setEducationOrganizationReference',
        'program_reference' => 'setProgramReference',
        'student_reference' => 'setStudentReference',
        'continuation_of_services_reason_descriptor' => 'setContinuationOfServicesReasonDescriptor',
        'eligibility_expiration_date' => 'setEligibilityExpirationDate',
        'end_date' => 'setEndDate',
        'last_qualifying_move' => 'setLastQualifyingMove',
        'migrant_education_program_services' => 'setMigrantEducationProgramServices',
        'priority_for_services' => 'setPriorityForServices',
        'program_participation_statuses' => 'setProgramParticipationStatuses',
        'qualifying_arrival_date' => 'setQualifyingArrivalDate',
        'reason_exited_descriptor' => 'setReasonExitedDescriptor',
        'served_outside_of_regular_session' => 'setServedOutsideOfRegularSession',
        'state_residency_date' => 'setStateResidencyDate',
        'us_initial_entry' => 'setUsInitialEntry',
        'us_initial_school_entry' => 'setUsInitialSchoolEntry',
        'us_most_recent_entry' => 'setUsMostRecentEntry',
        '_etag' => 'setEtag',
        '_last_modified_date' => 'setLastModifiedDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'begin_date' => 'getBeginDate',
        'education_organization_reference' => 'getEducationOrganizationReference',
        'program_reference' => 'getProgramReference',
        'student_reference' => 'getStudentReference',
        'continuation_of_services_reason_descriptor' => 'getContinuationOfServicesReasonDescriptor',
        'eligibility_expiration_date' => 'getEligibilityExpirationDate',
        'end_date' => 'getEndDate',
        'last_qualifying_move' => 'getLastQualifyingMove',
        'migrant_education_program_services' => 'getMigrantEducationProgramServices',
        'priority_for_services' => 'getPriorityForServices',
        'program_participation_statuses' => 'getProgramParticipationStatuses',
        'qualifying_arrival_date' => 'getQualifyingArrivalDate',
        'reason_exited_descriptor' => 'getReasonExitedDescriptor',
        'served_outside_of_regular_session' => 'getServedOutsideOfRegularSession',
        'state_residency_date' => 'getStateResidencyDate',
        'us_initial_entry' => 'getUsInitialEntry',
        'us_initial_school_entry' => 'getUsInitialSchoolEntry',
        'us_most_recent_entry' => 'getUsMostRecentEntry',
        '_etag' => 'getEtag',
        '_last_modified_date' => 'getLastModifiedDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('begin_date', $data ?? [], null);
        $this->setIfExists('education_organization_reference', $data ?? [], null);
        $this->setIfExists('program_reference', $data ?? [], null);
        $this->setIfExists('student_reference', $data ?? [], null);
        $this->setIfExists('continuation_of_services_reason_descriptor', $data ?? [], null);
        $this->setIfExists('eligibility_expiration_date', $data ?? [], null);
        $this->setIfExists('end_date', $data ?? [], null);
        $this->setIfExists('last_qualifying_move', $data ?? [], null);
        $this->setIfExists('migrant_education_program_services', $data ?? [], null);
        $this->setIfExists('priority_for_services', $data ?? [], null);
        $this->setIfExists('program_participation_statuses', $data ?? [], null);
        $this->setIfExists('qualifying_arrival_date', $data ?? [], null);
        $this->setIfExists('reason_exited_descriptor', $data ?? [], null);
        $this->setIfExists('served_outside_of_regular_session', $data ?? [], null);
        $this->setIfExists('state_residency_date', $data ?? [], null);
        $this->setIfExists('us_initial_entry', $data ?? [], null);
        $this->setIfExists('us_initial_school_entry', $data ?? [], null);
        $this->setIfExists('us_most_recent_entry', $data ?? [], null);
        $this->setIfExists('_etag', $data ?? [], null);
        $this->setIfExists('_last_modified_date', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['begin_date'] === null) {
            $invalidProperties[] = "'begin_date' can't be null";
        }
        if ($this->container['education_organization_reference'] === null) {
            $invalidProperties[] = "'education_organization_reference' can't be null";
        }
        if ($this->container['program_reference'] === null) {
            $invalidProperties[] = "'program_reference' can't be null";
        }
        if ($this->container['student_reference'] === null) {
            $invalidProperties[] = "'student_reference' can't be null";
        }
        if (!is_null($this->container['continuation_of_services_reason_descriptor']) && (mb_strlen($this->container['continuation_of_services_reason_descriptor']) > 306)) {
            $invalidProperties[] = "invalid value for 'continuation_of_services_reason_descriptor', the character length must be smaller than or equal to 306.";
        }

        if ($this->container['last_qualifying_move'] === null) {
            $invalidProperties[] = "'last_qualifying_move' can't be null";
        }
        if ($this->container['priority_for_services'] === null) {
            $invalidProperties[] = "'priority_for_services' can't be null";
        }
        if (!is_null($this->container['reason_exited_descriptor']) && (mb_strlen($this->container['reason_exited_descriptor']) > 306)) {
            $invalidProperties[] = "invalid value for 'reason_exited_descriptor', the character length must be smaller than or equal to 306.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id 
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets begin_date
     *
     * @return \DateTime
     */
    public function getBeginDate()
    {
        return $this->container['begin_date'];
    }

    /**
     * Sets begin_date
     *
     * @param \DateTime $begin_date The earliest date the student is involved with the program. Typically, this is the date the student becomes eligible for the program.
     *
     * @return self
     */
    public function setBeginDate($begin_date)
    {
        if (is_null($begin_date)) {
            throw new \InvalidArgumentException('non-nullable begin_date cannot be null');
        }
        $this->container['begin_date'] = $begin_date;

        return $this;
    }

    /**
     * Gets education_organization_reference
     *
     * @return \OpenAPI\Client\Model\EdFiEducationOrganizationReference
     */
    public function getEducationOrganizationReference()
    {
        return $this->container['education_organization_reference'];
    }

    /**
     * Sets education_organization_reference
     *
     * @param \OpenAPI\Client\Model\EdFiEducationOrganizationReference $education_organization_reference education_organization_reference
     *
     * @return self
     */
    public function setEducationOrganizationReference($education_organization_reference)
    {
        if (is_null($education_organization_reference)) {
            throw new \InvalidArgumentException('non-nullable education_organization_reference cannot be null');
        }
        $this->container['education_organization_reference'] = $education_organization_reference;

        return $this;
    }

    /**
     * Gets program_reference
     *
     * @return \OpenAPI\Client\Model\EdFiProgramReference
     */
    public function getProgramReference()
    {
        return $this->container['program_reference'];
    }

    /**
     * Sets program_reference
     *
     * @param \OpenAPI\Client\Model\EdFiProgramReference $program_reference program_reference
     *
     * @return self
     */
    public function setProgramReference($program_reference)
    {
        if (is_null($program_reference)) {
            throw new \InvalidArgumentException('non-nullable program_reference cannot be null');
        }
        $this->container['program_reference'] = $program_reference;

        return $this;
    }

    /**
     * Gets student_reference
     *
     * @return \OpenAPI\Client\Model\EdFiStudentReference
     */
    public function getStudentReference()
    {
        return $this->container['student_reference'];
    }

    /**
     * Sets student_reference
     *
     * @param \OpenAPI\Client\Model\EdFiStudentReference $student_reference student_reference
     *
     * @return self
     */
    public function setStudentReference($student_reference)
    {
        if (is_null($student_reference)) {
            throw new \InvalidArgumentException('non-nullable student_reference cannot be null');
        }
        $this->container['student_reference'] = $student_reference;

        return $this;
    }

    /**
     * Gets continuation_of_services_reason_descriptor
     *
     * @return string|null
     */
    public function getContinuationOfServicesReasonDescriptor()
    {
        return $this->container['continuation_of_services_reason_descriptor'];
    }

    /**
     * Sets continuation_of_services_reason_descriptor
     *
     * @param string|null $continuation_of_services_reason_descriptor The \"continuation of services\" provision found in Section 1304(e) of the statute provides that (1) a child who ceases to be a migratory child during a school term shall be eligible for services until the end of such term; (2) a child who is no longer a migratory child may continue to receive services for one additional school year, but only if comparable services are not available through other programs; and (3) secondary school students who were eligible for services in secondary school may continue to be served through credit accrual programs until graduation. Only students who received services at any time during their 36 month eligibility period may continue to receive services (not necessarily the same service).
     *
     * @return self
     */
    public function setContinuationOfServicesReasonDescriptor($continuation_of_services_reason_descriptor)
    {
        if (is_null($continuation_of_services_reason_descriptor)) {
            array_push($this->openAPINullablesSetToNull, 'continuation_of_services_reason_descriptor');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('continuation_of_services_reason_descriptor', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($continuation_of_services_reason_descriptor) && (mb_strlen($continuation_of_services_reason_descriptor) > 306)) {
            throw new \InvalidArgumentException('invalid length for $continuation_of_services_reason_descriptor when calling EdFiStudentMigrantEducationProgramAssociation., must be smaller than or equal to 306.');
        }

        $this->container['continuation_of_services_reason_descriptor'] = $continuation_of_services_reason_descriptor;

        return $this;
    }

    /**
     * Gets eligibility_expiration_date
     *
     * @return \DateTime|null
     */
    public function getEligibilityExpirationDate()
    {
        return $this->container['eligibility_expiration_date'];
    }

    /**
     * Sets eligibility_expiration_date
     *
     * @param \DateTime|null $eligibility_expiration_date The eligibility expiration date is used to determine end of eligibility and to account for a child's eligibility expiring earlier than 36 months from the child's QAD. A child's eligibility would end earlier than 36 months from the child's QAD, if the child is no longer entitled to a free public education (e.g., graduated with a high school diploma, obtained a high school equivalency diploma (HSED), or for other reasons as determined by states' requirements), or if the child passes away.
     *
     * @return self
     */
    public function setEligibilityExpirationDate($eligibility_expiration_date)
    {
        if (is_null($eligibility_expiration_date)) {
            array_push($this->openAPINullablesSetToNull, 'eligibility_expiration_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('eligibility_expiration_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['eligibility_expiration_date'] = $eligibility_expiration_date;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return \DateTime|null
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param \DateTime|null $end_date The month, day, and year on which the student exited the program or stopped receiving services.
     *
     * @return self
     */
    public function setEndDate($end_date)
    {
        if (is_null($end_date)) {
            array_push($this->openAPINullablesSetToNull, 'end_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('end_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets last_qualifying_move
     *
     * @return \DateTime
     */
    public function getLastQualifyingMove()
    {
        return $this->container['last_qualifying_move'];
    }

    /**
     * Sets last_qualifying_move
     *
     * @param \DateTime $last_qualifying_move Date the last qualifying move occurred; used to compute MEP status.
     *
     * @return self
     */
    public function setLastQualifyingMove($last_qualifying_move)
    {
        if (is_null($last_qualifying_move)) {
            throw new \InvalidArgumentException('non-nullable last_qualifying_move cannot be null');
        }
        $this->container['last_qualifying_move'] = $last_qualifying_move;

        return $this;
    }

    /**
     * Gets migrant_education_program_services
     *
     * @return \OpenAPI\Client\Model\EdFiStudentMigrantEducationProgramAssociationMigrantEducationProgramService[]|null
     */
    public function getMigrantEducationProgramServices()
    {
        return $this->container['migrant_education_program_services'];
    }

    /**
     * Sets migrant_education_program_services
     *
     * @param \OpenAPI\Client\Model\EdFiStudentMigrantEducationProgramAssociationMigrantEducationProgramService[]|null $migrant_education_program_services An unordered collection of studentMigrantEducationProgramAssociationMigrantEducationProgramServices. Indicates the service(s) being provided to the student by the migrant education program.
     *
     * @return self
     */
    public function setMigrantEducationProgramServices($migrant_education_program_services)
    {
        if (is_null($migrant_education_program_services)) {
            throw new \InvalidArgumentException('non-nullable migrant_education_program_services cannot be null');
        }
        $this->container['migrant_education_program_services'] = $migrant_education_program_services;

        return $this;
    }

    /**
     * Gets priority_for_services
     *
     * @return bool
     */
    public function getPriorityForServices()
    {
        return $this->container['priority_for_services'];
    }

    /**
     * Sets priority_for_services
     *
     * @param bool $priority_for_services Report migratory children who are classified as having \"priority for services\" because they are failing, or most at risk of failing to meet the state's challenging state academic content standards and challenging state student academic achievement standards, and their education has been interrupted during the regular school year.
     *
     * @return self
     */
    public function setPriorityForServices($priority_for_services)
    {
        if (is_null($priority_for_services)) {
            throw new \InvalidArgumentException('non-nullable priority_for_services cannot be null');
        }
        $this->container['priority_for_services'] = $priority_for_services;

        return $this;
    }

    /**
     * Gets program_participation_statuses
     *
     * @return \OpenAPI\Client\Model\EdFiGeneralStudentProgramAssociationProgramParticipationStatus[]|null
     */
    public function getProgramParticipationStatuses()
    {
        return $this->container['program_participation_statuses'];
    }

    /**
     * Sets program_participation_statuses
     *
     * @param \OpenAPI\Client\Model\EdFiGeneralStudentProgramAssociationProgramParticipationStatus[]|null $program_participation_statuses An unordered collection of generalStudentProgramAssociationProgramParticipationStatuses. The status of the student's program participation.
     *
     * @return self
     */
    public function setProgramParticipationStatuses($program_participation_statuses)
    {
        if (is_null($program_participation_statuses)) {
            throw new \InvalidArgumentException('non-nullable program_participation_statuses cannot be null');
        }
        $this->container['program_participation_statuses'] = $program_participation_statuses;

        return $this;
    }

    /**
     * Gets qualifying_arrival_date
     *
     * @return \DateTime|null
     */
    public function getQualifyingArrivalDate()
    {
        return $this->container['qualifying_arrival_date'];
    }

    /**
     * Sets qualifying_arrival_date
     *
     * @param \DateTime|null $qualifying_arrival_date The qualifying arrival date (QAD) is the date the child joins the worker who has already moved, or the date when the worker joins the child who has already moved. The QAD is the date that the child's eligibility for the MEP begins. The QAD is not affected by subsequent non-qualifying moves.
     *
     * @return self
     */
    public function setQualifyingArrivalDate($qualifying_arrival_date)
    {
        if (is_null($qualifying_arrival_date)) {
            array_push($this->openAPINullablesSetToNull, 'qualifying_arrival_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('qualifying_arrival_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['qualifying_arrival_date'] = $qualifying_arrival_date;

        return $this;
    }

    /**
     * Gets reason_exited_descriptor
     *
     * @return string|null
     */
    public function getReasonExitedDescriptor()
    {
        return $this->container['reason_exited_descriptor'];
    }

    /**
     * Sets reason_exited_descriptor
     *
     * @param string|null $reason_exited_descriptor The reason the student left the program within a school or district.
     *
     * @return self
     */
    public function setReasonExitedDescriptor($reason_exited_descriptor)
    {
        if (is_null($reason_exited_descriptor)) {
            array_push($this->openAPINullablesSetToNull, 'reason_exited_descriptor');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('reason_exited_descriptor', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($reason_exited_descriptor) && (mb_strlen($reason_exited_descriptor) > 306)) {
            throw new \InvalidArgumentException('invalid length for $reason_exited_descriptor when calling EdFiStudentMigrantEducationProgramAssociation., must be smaller than or equal to 306.');
        }

        $this->container['reason_exited_descriptor'] = $reason_exited_descriptor;

        return $this;
    }

    /**
     * Gets served_outside_of_regular_session
     *
     * @return bool|null
     */
    public function getServedOutsideOfRegularSession()
    {
        return $this->container['served_outside_of_regular_session'];
    }

    /**
     * Sets served_outside_of_regular_session
     *
     * @param bool|null $served_outside_of_regular_session Indicates whether the student received services during the summer session or between sessions.
     *
     * @return self
     */
    public function setServedOutsideOfRegularSession($served_outside_of_regular_session)
    {
        if (is_null($served_outside_of_regular_session)) {
            array_push($this->openAPINullablesSetToNull, 'served_outside_of_regular_session');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('served_outside_of_regular_session', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['served_outside_of_regular_session'] = $served_outside_of_regular_session;

        return $this;
    }

    /**
     * Gets state_residency_date
     *
     * @return \DateTime|null
     */
    public function getStateResidencyDate()
    {
        return $this->container['state_residency_date'];
    }

    /**
     * Sets state_residency_date
     *
     * @param \DateTime|null $state_residency_date The verified state residency for the student.
     *
     * @return self
     */
    public function setStateResidencyDate($state_residency_date)
    {
        if (is_null($state_residency_date)) {
            array_push($this->openAPINullablesSetToNull, 'state_residency_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('state_residency_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['state_residency_date'] = $state_residency_date;

        return $this;
    }

    /**
     * Gets us_initial_entry
     *
     * @return \DateTime|null
     */
    public function getUsInitialEntry()
    {
        return $this->container['us_initial_entry'];
    }

    /**
     * Sets us_initial_entry
     *
     * @param \DateTime|null $us_initial_entry The month, day, and year on which the student first entered the U.S.
     *
     * @return self
     */
    public function setUsInitialEntry($us_initial_entry)
    {
        if (is_null($us_initial_entry)) {
            array_push($this->openAPINullablesSetToNull, 'us_initial_entry');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('us_initial_entry', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['us_initial_entry'] = $us_initial_entry;

        return $this;
    }

    /**
     * Gets us_initial_school_entry
     *
     * @return \DateTime|null
     */
    public function getUsInitialSchoolEntry()
    {
        return $this->container['us_initial_school_entry'];
    }

    /**
     * Sets us_initial_school_entry
     *
     * @param \DateTime|null $us_initial_school_entry The month, day, and year on which the student first entered a U.S. school.
     *
     * @return self
     */
    public function setUsInitialSchoolEntry($us_initial_school_entry)
    {
        if (is_null($us_initial_school_entry)) {
            array_push($this->openAPINullablesSetToNull, 'us_initial_school_entry');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('us_initial_school_entry', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['us_initial_school_entry'] = $us_initial_school_entry;

        return $this;
    }

    /**
     * Gets us_most_recent_entry
     *
     * @return \DateTime|null
     */
    public function getUsMostRecentEntry()
    {
        return $this->container['us_most_recent_entry'];
    }

    /**
     * Sets us_most_recent_entry
     *
     * @param \DateTime|null $us_most_recent_entry The month, day, and year of the student's most recent entry into the U.S.
     *
     * @return self
     */
    public function setUsMostRecentEntry($us_most_recent_entry)
    {
        if (is_null($us_most_recent_entry)) {
            array_push($this->openAPINullablesSetToNull, 'us_most_recent_entry');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('us_most_recent_entry', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['us_most_recent_entry'] = $us_most_recent_entry;

        return $this;
    }

    /**
     * Gets _etag
     *
     * @return string|null
     */
    public function getEtag()
    {
        return $this->container['_etag'];
    }

    /**
     * Sets _etag
     *
     * @param string|null $_etag A unique system-generated value that identifies the version of the resource.
     *
     * @return self
     */
    public function setEtag($_etag)
    {
        if (is_null($_etag)) {
            throw new \InvalidArgumentException('non-nullable _etag cannot be null');
        }
        $this->container['_etag'] = $_etag;

        return $this;
    }

    /**
     * Gets _last_modified_date
     *
     * @return \DateTime|null
     */
    public function getLastModifiedDate()
    {
        return $this->container['_last_modified_date'];
    }

    /**
     * Sets _last_modified_date
     *
     * @param \DateTime|null $_last_modified_date The date and time the resource was last modified.
     *
     * @return self
     */
    public function setLastModifiedDate($_last_modified_date)
    {
        if (is_null($_last_modified_date)) {
            throw new \InvalidArgumentException('non-nullable _last_modified_date cannot be null');
        }
        $this->container['_last_modified_date'] = $_last_modified_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


