<?php
/**
 * EdFiDisciplineAction
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * EdFiDisciplineAction Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EdFiDisciplineAction implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'edFi_disciplineAction';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'discipline_action_identifier' => 'string',
        'discipline_date' => '\DateTime',
        'disciplines' => '\OpenAPI\Client\Model\EdFiDisciplineActionDiscipline[]',
        'assignment_school_reference' => '\OpenAPI\Client\Model\EdFiSchoolReference',
        'responsibility_school_reference' => '\OpenAPI\Client\Model\EdFiSchoolReference',
        'student_reference' => '\OpenAPI\Client\Model\EdFiStudentReference',
        'actual_discipline_action_length' => 'float',
        'discipline_action_length' => 'float',
        'discipline_action_length_difference_reason_descriptor' => 'string',
        'iep_placement_meeting_indicator' => 'bool',
        'related_to_zero_tolerance_policy' => 'bool',
        'staffs' => '\OpenAPI\Client\Model\EdFiDisciplineActionStaff[]',
        'student_discipline_incident_behavior_associations' => '\OpenAPI\Client\Model\EdFiDisciplineActionStudentDisciplineIncidentBehaviorAssociation[]',
        '_etag' => 'string',
        '_last_modified_date' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'discipline_action_identifier' => null,
        'discipline_date' => 'date',
        'disciplines' => null,
        'assignment_school_reference' => null,
        'responsibility_school_reference' => null,
        'student_reference' => null,
        'actual_discipline_action_length' => 'double',
        'discipline_action_length' => 'double',
        'discipline_action_length_difference_reason_descriptor' => null,
        'iep_placement_meeting_indicator' => null,
        'related_to_zero_tolerance_policy' => null,
        'staffs' => null,
        'student_discipline_incident_behavior_associations' => null,
        '_etag' => null,
        '_last_modified_date' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'discipline_action_identifier' => false,
        'discipline_date' => false,
        'disciplines' => false,
        'assignment_school_reference' => false,
        'responsibility_school_reference' => false,
        'student_reference' => false,
        'actual_discipline_action_length' => true,
        'discipline_action_length' => true,
        'discipline_action_length_difference_reason_descriptor' => true,
        'iep_placement_meeting_indicator' => true,
        'related_to_zero_tolerance_policy' => true,
        'staffs' => false,
        'student_discipline_incident_behavior_associations' => false,
        '_etag' => false,
        '_last_modified_date' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'discipline_action_identifier' => 'disciplineActionIdentifier',
        'discipline_date' => 'disciplineDate',
        'disciplines' => 'disciplines',
        'assignment_school_reference' => 'assignmentSchoolReference',
        'responsibility_school_reference' => 'responsibilitySchoolReference',
        'student_reference' => 'studentReference',
        'actual_discipline_action_length' => 'actualDisciplineActionLength',
        'discipline_action_length' => 'disciplineActionLength',
        'discipline_action_length_difference_reason_descriptor' => 'disciplineActionLengthDifferenceReasonDescriptor',
        'iep_placement_meeting_indicator' => 'iepPlacementMeetingIndicator',
        'related_to_zero_tolerance_policy' => 'relatedToZeroTolerancePolicy',
        'staffs' => 'staffs',
        'student_discipline_incident_behavior_associations' => 'studentDisciplineIncidentBehaviorAssociations',
        '_etag' => '_etag',
        '_last_modified_date' => '_lastModifiedDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'discipline_action_identifier' => 'setDisciplineActionIdentifier',
        'discipline_date' => 'setDisciplineDate',
        'disciplines' => 'setDisciplines',
        'assignment_school_reference' => 'setAssignmentSchoolReference',
        'responsibility_school_reference' => 'setResponsibilitySchoolReference',
        'student_reference' => 'setStudentReference',
        'actual_discipline_action_length' => 'setActualDisciplineActionLength',
        'discipline_action_length' => 'setDisciplineActionLength',
        'discipline_action_length_difference_reason_descriptor' => 'setDisciplineActionLengthDifferenceReasonDescriptor',
        'iep_placement_meeting_indicator' => 'setIepPlacementMeetingIndicator',
        'related_to_zero_tolerance_policy' => 'setRelatedToZeroTolerancePolicy',
        'staffs' => 'setStaffs',
        'student_discipline_incident_behavior_associations' => 'setStudentDisciplineIncidentBehaviorAssociations',
        '_etag' => 'setEtag',
        '_last_modified_date' => 'setLastModifiedDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'discipline_action_identifier' => 'getDisciplineActionIdentifier',
        'discipline_date' => 'getDisciplineDate',
        'disciplines' => 'getDisciplines',
        'assignment_school_reference' => 'getAssignmentSchoolReference',
        'responsibility_school_reference' => 'getResponsibilitySchoolReference',
        'student_reference' => 'getStudentReference',
        'actual_discipline_action_length' => 'getActualDisciplineActionLength',
        'discipline_action_length' => 'getDisciplineActionLength',
        'discipline_action_length_difference_reason_descriptor' => 'getDisciplineActionLengthDifferenceReasonDescriptor',
        'iep_placement_meeting_indicator' => 'getIepPlacementMeetingIndicator',
        'related_to_zero_tolerance_policy' => 'getRelatedToZeroTolerancePolicy',
        'staffs' => 'getStaffs',
        'student_discipline_incident_behavior_associations' => 'getStudentDisciplineIncidentBehaviorAssociations',
        '_etag' => 'getEtag',
        '_last_modified_date' => 'getLastModifiedDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('discipline_action_identifier', $data ?? [], null);
        $this->setIfExists('discipline_date', $data ?? [], null);
        $this->setIfExists('disciplines', $data ?? [], null);
        $this->setIfExists('assignment_school_reference', $data ?? [], null);
        $this->setIfExists('responsibility_school_reference', $data ?? [], null);
        $this->setIfExists('student_reference', $data ?? [], null);
        $this->setIfExists('actual_discipline_action_length', $data ?? [], null);
        $this->setIfExists('discipline_action_length', $data ?? [], null);
        $this->setIfExists('discipline_action_length_difference_reason_descriptor', $data ?? [], null);
        $this->setIfExists('iep_placement_meeting_indicator', $data ?? [], null);
        $this->setIfExists('related_to_zero_tolerance_policy', $data ?? [], null);
        $this->setIfExists('staffs', $data ?? [], null);
        $this->setIfExists('student_discipline_incident_behavior_associations', $data ?? [], null);
        $this->setIfExists('_etag', $data ?? [], null);
        $this->setIfExists('_last_modified_date', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['discipline_action_identifier'] === null) {
            $invalidProperties[] = "'discipline_action_identifier' can't be null";
        }
        if ((mb_strlen($this->container['discipline_action_identifier']) > 36)) {
            $invalidProperties[] = "invalid value for 'discipline_action_identifier', the character length must be smaller than or equal to 36.";
        }

        if ((mb_strlen($this->container['discipline_action_identifier']) < 1)) {
            $invalidProperties[] = "invalid value for 'discipline_action_identifier', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['discipline_date'] === null) {
            $invalidProperties[] = "'discipline_date' can't be null";
        }
        if ($this->container['disciplines'] === null) {
            $invalidProperties[] = "'disciplines' can't be null";
        }
        if ($this->container['responsibility_school_reference'] === null) {
            $invalidProperties[] = "'responsibility_school_reference' can't be null";
        }
        if ($this->container['student_reference'] === null) {
            $invalidProperties[] = "'student_reference' can't be null";
        }
        if (!is_null($this->container['actual_discipline_action_length']) && ($this->container['actual_discipline_action_length'] < 0.0)) {
            $invalidProperties[] = "invalid value for 'actual_discipline_action_length', must be bigger than or equal to 0.0.";
        }

        if (!is_null($this->container['discipline_action_length']) && ($this->container['discipline_action_length'] < 0.0)) {
            $invalidProperties[] = "invalid value for 'discipline_action_length', must be bigger than or equal to 0.0.";
        }

        if (!is_null($this->container['discipline_action_length_difference_reason_descriptor']) && (mb_strlen($this->container['discipline_action_length_difference_reason_descriptor']) > 306)) {
            $invalidProperties[] = "invalid value for 'discipline_action_length_difference_reason_descriptor', the character length must be smaller than or equal to 306.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id 
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets discipline_action_identifier
     *
     * @return string
     */
    public function getDisciplineActionIdentifier()
    {
        return $this->container['discipline_action_identifier'];
    }

    /**
     * Sets discipline_action_identifier
     *
     * @param string $discipline_action_identifier Identifier assigned by the education organization to the discipline action.
     *
     * @return self
     */
    public function setDisciplineActionIdentifier($discipline_action_identifier)
    {
        if (is_null($discipline_action_identifier)) {
            throw new \InvalidArgumentException('non-nullable discipline_action_identifier cannot be null');
        }
        if ((mb_strlen($discipline_action_identifier) > 36)) {
            throw new \InvalidArgumentException('invalid length for $discipline_action_identifier when calling EdFiDisciplineAction., must be smaller than or equal to 36.');
        }
        if ((mb_strlen($discipline_action_identifier) < 1)) {
            throw new \InvalidArgumentException('invalid length for $discipline_action_identifier when calling EdFiDisciplineAction., must be bigger than or equal to 1.');
        }

        $this->container['discipline_action_identifier'] = $discipline_action_identifier;

        return $this;
    }

    /**
     * Gets discipline_date
     *
     * @return \DateTime
     */
    public function getDisciplineDate()
    {
        return $this->container['discipline_date'];
    }

    /**
     * Sets discipline_date
     *
     * @param \DateTime $discipline_date The date of the discipline action.
     *
     * @return self
     */
    public function setDisciplineDate($discipline_date)
    {
        if (is_null($discipline_date)) {
            throw new \InvalidArgumentException('non-nullable discipline_date cannot be null');
        }
        $this->container['discipline_date'] = $discipline_date;

        return $this;
    }

    /**
     * Gets disciplines
     *
     * @return \OpenAPI\Client\Model\EdFiDisciplineActionDiscipline[]
     */
    public function getDisciplines()
    {
        return $this->container['disciplines'];
    }

    /**
     * Sets disciplines
     *
     * @param \OpenAPI\Client\Model\EdFiDisciplineActionDiscipline[] $disciplines An unordered collection of disciplineActionDisciplines. Type of action, such as removal from the classroom, used to discipline the student involved as a perpetrator in a discipline incident.
     *
     * @return self
     */
    public function setDisciplines($disciplines)
    {
        if (is_null($disciplines)) {
            throw new \InvalidArgumentException('non-nullable disciplines cannot be null');
        }
        $this->container['disciplines'] = $disciplines;

        return $this;
    }

    /**
     * Gets assignment_school_reference
     *
     * @return \OpenAPI\Client\Model\EdFiSchoolReference|null
     */
    public function getAssignmentSchoolReference()
    {
        return $this->container['assignment_school_reference'];
    }

    /**
     * Sets assignment_school_reference
     *
     * @param \OpenAPI\Client\Model\EdFiSchoolReference|null $assignment_school_reference assignment_school_reference
     *
     * @return self
     */
    public function setAssignmentSchoolReference($assignment_school_reference)
    {
        if (is_null($assignment_school_reference)) {
            throw new \InvalidArgumentException('non-nullable assignment_school_reference cannot be null');
        }
        $this->container['assignment_school_reference'] = $assignment_school_reference;

        return $this;
    }

    /**
     * Gets responsibility_school_reference
     *
     * @return \OpenAPI\Client\Model\EdFiSchoolReference
     */
    public function getResponsibilitySchoolReference()
    {
        return $this->container['responsibility_school_reference'];
    }

    /**
     * Sets responsibility_school_reference
     *
     * @param \OpenAPI\Client\Model\EdFiSchoolReference $responsibility_school_reference responsibility_school_reference
     *
     * @return self
     */
    public function setResponsibilitySchoolReference($responsibility_school_reference)
    {
        if (is_null($responsibility_school_reference)) {
            throw new \InvalidArgumentException('non-nullable responsibility_school_reference cannot be null');
        }
        $this->container['responsibility_school_reference'] = $responsibility_school_reference;

        return $this;
    }

    /**
     * Gets student_reference
     *
     * @return \OpenAPI\Client\Model\EdFiStudentReference
     */
    public function getStudentReference()
    {
        return $this->container['student_reference'];
    }

    /**
     * Sets student_reference
     *
     * @param \OpenAPI\Client\Model\EdFiStudentReference $student_reference student_reference
     *
     * @return self
     */
    public function setStudentReference($student_reference)
    {
        if (is_null($student_reference)) {
            throw new \InvalidArgumentException('non-nullable student_reference cannot be null');
        }
        $this->container['student_reference'] = $student_reference;

        return $this;
    }

    /**
     * Gets actual_discipline_action_length
     *
     * @return float|null
     */
    public function getActualDisciplineActionLength()
    {
        return $this->container['actual_discipline_action_length'];
    }

    /**
     * Sets actual_discipline_action_length
     *
     * @param float|null $actual_discipline_action_length Indicates the actual length in school days of a student's disciplinary assignment.
     *
     * @return self
     */
    public function setActualDisciplineActionLength($actual_discipline_action_length)
    {
        if (is_null($actual_discipline_action_length)) {
            array_push($this->openAPINullablesSetToNull, 'actual_discipline_action_length');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('actual_discipline_action_length', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($actual_discipline_action_length) && ($actual_discipline_action_length < 0.0)) {
            throw new \InvalidArgumentException('invalid value for $actual_discipline_action_length when calling EdFiDisciplineAction., must be bigger than or equal to 0.0.');
        }

        $this->container['actual_discipline_action_length'] = $actual_discipline_action_length;

        return $this;
    }

    /**
     * Gets discipline_action_length
     *
     * @return float|null
     */
    public function getDisciplineActionLength()
    {
        return $this->container['discipline_action_length'];
    }

    /**
     * Sets discipline_action_length
     *
     * @param float|null $discipline_action_length The length of time in school days for the discipline action (e.g. removal, detention), if applicable.
     *
     * @return self
     */
    public function setDisciplineActionLength($discipline_action_length)
    {
        if (is_null($discipline_action_length)) {
            array_push($this->openAPINullablesSetToNull, 'discipline_action_length');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('discipline_action_length', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($discipline_action_length) && ($discipline_action_length < 0.0)) {
            throw new \InvalidArgumentException('invalid value for $discipline_action_length when calling EdFiDisciplineAction., must be bigger than or equal to 0.0.');
        }

        $this->container['discipline_action_length'] = $discipline_action_length;

        return $this;
    }

    /**
     * Gets discipline_action_length_difference_reason_descriptor
     *
     * @return string|null
     */
    public function getDisciplineActionLengthDifferenceReasonDescriptor()
    {
        return $this->container['discipline_action_length_difference_reason_descriptor'];
    }

    /**
     * Sets discipline_action_length_difference_reason_descriptor
     *
     * @param string|null $discipline_action_length_difference_reason_descriptor Indicates the reason for the difference, if any, between the official and actual lengths of a student's disciplinary assignment.
     *
     * @return self
     */
    public function setDisciplineActionLengthDifferenceReasonDescriptor($discipline_action_length_difference_reason_descriptor)
    {
        if (is_null($discipline_action_length_difference_reason_descriptor)) {
            array_push($this->openAPINullablesSetToNull, 'discipline_action_length_difference_reason_descriptor');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('discipline_action_length_difference_reason_descriptor', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($discipline_action_length_difference_reason_descriptor) && (mb_strlen($discipline_action_length_difference_reason_descriptor) > 306)) {
            throw new \InvalidArgumentException('invalid length for $discipline_action_length_difference_reason_descriptor when calling EdFiDisciplineAction., must be smaller than or equal to 306.');
        }

        $this->container['discipline_action_length_difference_reason_descriptor'] = $discipline_action_length_difference_reason_descriptor;

        return $this;
    }

    /**
     * Gets iep_placement_meeting_indicator
     *
     * @return bool|null
     */
    public function getIepPlacementMeetingIndicator()
    {
        return $this->container['iep_placement_meeting_indicator'];
    }

    /**
     * Sets iep_placement_meeting_indicator
     *
     * @param bool|null $iep_placement_meeting_indicator An indication as to whether an offense and/or disciplinary action resulted in a meeting of a student's Individualized Education Program (IEP) team to determine appropriate placement.
     *
     * @return self
     */
    public function setIepPlacementMeetingIndicator($iep_placement_meeting_indicator)
    {
        if (is_null($iep_placement_meeting_indicator)) {
            array_push($this->openAPINullablesSetToNull, 'iep_placement_meeting_indicator');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('iep_placement_meeting_indicator', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['iep_placement_meeting_indicator'] = $iep_placement_meeting_indicator;

        return $this;
    }

    /**
     * Gets related_to_zero_tolerance_policy
     *
     * @return bool|null
     */
    public function getRelatedToZeroTolerancePolicy()
    {
        return $this->container['related_to_zero_tolerance_policy'];
    }

    /**
     * Sets related_to_zero_tolerance_policy
     *
     * @param bool|null $related_to_zero_tolerance_policy An indication of whether or not this disciplinary action taken against a student was imposed as a consequence of state or local zero tolerance policies.
     *
     * @return self
     */
    public function setRelatedToZeroTolerancePolicy($related_to_zero_tolerance_policy)
    {
        if (is_null($related_to_zero_tolerance_policy)) {
            array_push($this->openAPINullablesSetToNull, 'related_to_zero_tolerance_policy');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('related_to_zero_tolerance_policy', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['related_to_zero_tolerance_policy'] = $related_to_zero_tolerance_policy;

        return $this;
    }

    /**
     * Gets staffs
     *
     * @return \OpenAPI\Client\Model\EdFiDisciplineActionStaff[]|null
     */
    public function getStaffs()
    {
        return $this->container['staffs'];
    }

    /**
     * Sets staffs
     *
     * @param \OpenAPI\Client\Model\EdFiDisciplineActionStaff[]|null $staffs An unordered collection of disciplineActionStaffs. The staff responsible for enforcing the discipline action.
     *
     * @return self
     */
    public function setStaffs($staffs)
    {
        if (is_null($staffs)) {
            throw new \InvalidArgumentException('non-nullable staffs cannot be null');
        }
        $this->container['staffs'] = $staffs;

        return $this;
    }

    /**
     * Gets student_discipline_incident_behavior_associations
     *
     * @return \OpenAPI\Client\Model\EdFiDisciplineActionStudentDisciplineIncidentBehaviorAssociation[]|null
     */
    public function getStudentDisciplineIncidentBehaviorAssociations()
    {
        return $this->container['student_discipline_incident_behavior_associations'];
    }

    /**
     * Sets student_discipline_incident_behavior_associations
     *
     * @param \OpenAPI\Client\Model\EdFiDisciplineActionStudentDisciplineIncidentBehaviorAssociation[]|null $student_discipline_incident_behavior_associations An unordered collection of disciplineActionStudentDisciplineIncidentBehaviorAssociations. A reference to the behavior(s) by the student that led or contributed to this specific action.
     *
     * @return self
     */
    public function setStudentDisciplineIncidentBehaviorAssociations($student_discipline_incident_behavior_associations)
    {
        if (is_null($student_discipline_incident_behavior_associations)) {
            throw new \InvalidArgumentException('non-nullable student_discipline_incident_behavior_associations cannot be null');
        }
        $this->container['student_discipline_incident_behavior_associations'] = $student_discipline_incident_behavior_associations;

        return $this;
    }

    /**
     * Gets _etag
     *
     * @return string|null
     */
    public function getEtag()
    {
        return $this->container['_etag'];
    }

    /**
     * Sets _etag
     *
     * @param string|null $_etag A unique system-generated value that identifies the version of the resource.
     *
     * @return self
     */
    public function setEtag($_etag)
    {
        if (is_null($_etag)) {
            throw new \InvalidArgumentException('non-nullable _etag cannot be null');
        }
        $this->container['_etag'] = $_etag;

        return $this;
    }

    /**
     * Gets _last_modified_date
     *
     * @return \DateTime|null
     */
    public function getLastModifiedDate()
    {
        return $this->container['_last_modified_date'];
    }

    /**
     * Sets _last_modified_date
     *
     * @param \DateTime|null $_last_modified_date The date and time the resource was last modified.
     *
     * @return self
     */
    public function setLastModifiedDate($_last_modified_date)
    {
        if (is_null($_last_modified_date)) {
            throw new \InvalidArgumentException('non-nullable _last_modified_date cannot be null');
        }
        $this->container['_last_modified_date'] = $_last_modified_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


