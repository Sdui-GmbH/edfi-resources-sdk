<?php
/**
 * EdFiStudentAcademicRecordRecognition
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Resources
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Resources\Model;

use \ArrayAccess;
use \Resources\ObjectSerializer;

/**
 * EdFiStudentAcademicRecordRecognition Class Doc Comment
 *
 * @category Class
 * @package  Resources
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EdFiStudentAcademicRecordRecognition implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'edFi_studentAcademicRecordRecognition';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'recognition_type_descriptor' => 'string',
        'achievement_category_descriptor' => 'string',
        'achievement_category_system' => 'string',
        'achievement_title' => 'string',
        'criteria' => 'string',
        'criteria_url' => 'string',
        'evidence_statement' => 'string',
        'image_url' => 'string',
        'issuer_name' => 'string',
        'issuer_origin_url' => 'string',
        'recognition_award_date' => '\DateTime',
        'recognition_award_expires_date' => '\DateTime',
        'recognition_description' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'recognition_type_descriptor' => null,
        'achievement_category_descriptor' => null,
        'achievement_category_system' => null,
        'achievement_title' => null,
        'criteria' => null,
        'criteria_url' => null,
        'evidence_statement' => null,
        'image_url' => null,
        'issuer_name' => null,
        'issuer_origin_url' => null,
        'recognition_award_date' => 'date',
        'recognition_award_expires_date' => 'date',
        'recognition_description' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'recognition_type_descriptor' => false,
        'achievement_category_descriptor' => true,
        'achievement_category_system' => true,
        'achievement_title' => true,
        'criteria' => true,
        'criteria_url' => true,
        'evidence_statement' => true,
        'image_url' => true,
        'issuer_name' => true,
        'issuer_origin_url' => true,
        'recognition_award_date' => true,
        'recognition_award_expires_date' => true,
        'recognition_description' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'recognition_type_descriptor' => 'recognitionTypeDescriptor',
        'achievement_category_descriptor' => 'achievementCategoryDescriptor',
        'achievement_category_system' => 'achievementCategorySystem',
        'achievement_title' => 'achievementTitle',
        'criteria' => 'criteria',
        'criteria_url' => 'criteriaURL',
        'evidence_statement' => 'evidenceStatement',
        'image_url' => 'imageURL',
        'issuer_name' => 'issuerName',
        'issuer_origin_url' => 'issuerOriginURL',
        'recognition_award_date' => 'recognitionAwardDate',
        'recognition_award_expires_date' => 'recognitionAwardExpiresDate',
        'recognition_description' => 'recognitionDescription'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'recognition_type_descriptor' => 'setRecognitionTypeDescriptor',
        'achievement_category_descriptor' => 'setAchievementCategoryDescriptor',
        'achievement_category_system' => 'setAchievementCategorySystem',
        'achievement_title' => 'setAchievementTitle',
        'criteria' => 'setCriteria',
        'criteria_url' => 'setCriteriaUrl',
        'evidence_statement' => 'setEvidenceStatement',
        'image_url' => 'setImageUrl',
        'issuer_name' => 'setIssuerName',
        'issuer_origin_url' => 'setIssuerOriginUrl',
        'recognition_award_date' => 'setRecognitionAwardDate',
        'recognition_award_expires_date' => 'setRecognitionAwardExpiresDate',
        'recognition_description' => 'setRecognitionDescription'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'recognition_type_descriptor' => 'getRecognitionTypeDescriptor',
        'achievement_category_descriptor' => 'getAchievementCategoryDescriptor',
        'achievement_category_system' => 'getAchievementCategorySystem',
        'achievement_title' => 'getAchievementTitle',
        'criteria' => 'getCriteria',
        'criteria_url' => 'getCriteriaUrl',
        'evidence_statement' => 'getEvidenceStatement',
        'image_url' => 'getImageUrl',
        'issuer_name' => 'getIssuerName',
        'issuer_origin_url' => 'getIssuerOriginUrl',
        'recognition_award_date' => 'getRecognitionAwardDate',
        'recognition_award_expires_date' => 'getRecognitionAwardExpiresDate',
        'recognition_description' => 'getRecognitionDescription'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('recognition_type_descriptor', $data ?? [], null);
        $this->setIfExists('achievement_category_descriptor', $data ?? [], null);
        $this->setIfExists('achievement_category_system', $data ?? [], null);
        $this->setIfExists('achievement_title', $data ?? [], null);
        $this->setIfExists('criteria', $data ?? [], null);
        $this->setIfExists('criteria_url', $data ?? [], null);
        $this->setIfExists('evidence_statement', $data ?? [], null);
        $this->setIfExists('image_url', $data ?? [], null);
        $this->setIfExists('issuer_name', $data ?? [], null);
        $this->setIfExists('issuer_origin_url', $data ?? [], null);
        $this->setIfExists('recognition_award_date', $data ?? [], null);
        $this->setIfExists('recognition_award_expires_date', $data ?? [], null);
        $this->setIfExists('recognition_description', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['recognition_type_descriptor'] === null) {
            $invalidProperties[] = "'recognition_type_descriptor' can't be null";
        }
        if ((mb_strlen($this->container['recognition_type_descriptor']) > 306)) {
            $invalidProperties[] = "invalid value for 'recognition_type_descriptor', the character length must be smaller than or equal to 306.";
        }

        if (!is_null($this->container['achievement_category_descriptor']) && (mb_strlen($this->container['achievement_category_descriptor']) > 306)) {
            $invalidProperties[] = "invalid value for 'achievement_category_descriptor', the character length must be smaller than or equal to 306.";
        }

        if (!is_null($this->container['achievement_category_system']) && (mb_strlen($this->container['achievement_category_system']) > 60)) {
            $invalidProperties[] = "invalid value for 'achievement_category_system', the character length must be smaller than or equal to 60.";
        }

        if (!is_null($this->container['achievement_title']) && (mb_strlen($this->container['achievement_title']) > 60)) {
            $invalidProperties[] = "invalid value for 'achievement_title', the character length must be smaller than or equal to 60.";
        }

        if (!is_null($this->container['criteria']) && (mb_strlen($this->container['criteria']) > 150)) {
            $invalidProperties[] = "invalid value for 'criteria', the character length must be smaller than or equal to 150.";
        }

        if (!is_null($this->container['criteria_url']) && (mb_strlen($this->container['criteria_url']) > 255)) {
            $invalidProperties[] = "invalid value for 'criteria_url', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['criteria_url']) && (mb_strlen($this->container['criteria_url']) < 5)) {
            $invalidProperties[] = "invalid value for 'criteria_url', the character length must be bigger than or equal to 5.";
        }

        if (!is_null($this->container['evidence_statement']) && (mb_strlen($this->container['evidence_statement']) > 150)) {
            $invalidProperties[] = "invalid value for 'evidence_statement', the character length must be smaller than or equal to 150.";
        }

        if (!is_null($this->container['image_url']) && (mb_strlen($this->container['image_url']) > 255)) {
            $invalidProperties[] = "invalid value for 'image_url', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['image_url']) && (mb_strlen($this->container['image_url']) < 5)) {
            $invalidProperties[] = "invalid value for 'image_url', the character length must be bigger than or equal to 5.";
        }

        if (!is_null($this->container['issuer_name']) && (mb_strlen($this->container['issuer_name']) > 150)) {
            $invalidProperties[] = "invalid value for 'issuer_name', the character length must be smaller than or equal to 150.";
        }

        if (!is_null($this->container['issuer_origin_url']) && (mb_strlen($this->container['issuer_origin_url']) > 255)) {
            $invalidProperties[] = "invalid value for 'issuer_origin_url', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['issuer_origin_url']) && (mb_strlen($this->container['issuer_origin_url']) < 5)) {
            $invalidProperties[] = "invalid value for 'issuer_origin_url', the character length must be bigger than or equal to 5.";
        }

        if (!is_null($this->container['recognition_description']) && (mb_strlen($this->container['recognition_description']) > 80)) {
            $invalidProperties[] = "invalid value for 'recognition_description', the character length must be smaller than or equal to 80.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets recognition_type_descriptor
     *
     * @return string
     */
    public function getRecognitionTypeDescriptor()
    {
        return $this->container['recognition_type_descriptor'];
    }

    /**
     * Sets recognition_type_descriptor
     *
     * @param string $recognition_type_descriptor The nature of recognition given to the individual for accomplishments in a co-curricular, or extra-curricular activity.
     *
     * @return self
     */
    public function setRecognitionTypeDescriptor($recognition_type_descriptor)
    {
        if (is_null($recognition_type_descriptor)) {
            throw new \InvalidArgumentException('non-nullable recognition_type_descriptor cannot be null');
        }
        if ((mb_strlen($recognition_type_descriptor) > 306)) {
            throw new \InvalidArgumentException('invalid length for $recognition_type_descriptor when calling EdFiStudentAcademicRecordRecognition., must be smaller than or equal to 306.');
        }

        $this->container['recognition_type_descriptor'] = $recognition_type_descriptor;

        return $this;
    }

    /**
     * Gets achievement_category_descriptor
     *
     * @return string|null
     */
    public function getAchievementCategoryDescriptor()
    {
        return $this->container['achievement_category_descriptor'];
    }

    /**
     * Sets achievement_category_descriptor
     *
     * @param string|null $achievement_category_descriptor The category of achievement attributed to the individual.
     *
     * @return self
     */
    public function setAchievementCategoryDescriptor($achievement_category_descriptor)
    {
        if (is_null($achievement_category_descriptor)) {
            array_push($this->openAPINullablesSetToNull, 'achievement_category_descriptor');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('achievement_category_descriptor', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($achievement_category_descriptor) && (mb_strlen($achievement_category_descriptor) > 306)) {
            throw new \InvalidArgumentException('invalid length for $achievement_category_descriptor when calling EdFiStudentAcademicRecordRecognition., must be smaller than or equal to 306.');
        }

        $this->container['achievement_category_descriptor'] = $achievement_category_descriptor;

        return $this;
    }

    /**
     * Gets achievement_category_system
     *
     * @return string|null
     */
    public function getAchievementCategorySystem()
    {
        return $this->container['achievement_category_system'];
    }

    /**
     * Sets achievement_category_system
     *
     * @param string|null $achievement_category_system The system that defines the categories by which an achievement is attributed to the individual.
     *
     * @return self
     */
    public function setAchievementCategorySystem($achievement_category_system)
    {
        if (is_null($achievement_category_system)) {
            array_push($this->openAPINullablesSetToNull, 'achievement_category_system');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('achievement_category_system', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($achievement_category_system) && (mb_strlen($achievement_category_system) > 60)) {
            throw new \InvalidArgumentException('invalid length for $achievement_category_system when calling EdFiStudentAcademicRecordRecognition., must be smaller than or equal to 60.');
        }

        $this->container['achievement_category_system'] = $achievement_category_system;

        return $this;
    }

    /**
     * Gets achievement_title
     *
     * @return string|null
     */
    public function getAchievementTitle()
    {
        return $this->container['achievement_title'];
    }

    /**
     * Sets achievement_title
     *
     * @param string|null $achievement_title The title assigned to the achievement.
     *
     * @return self
     */
    public function setAchievementTitle($achievement_title)
    {
        if (is_null($achievement_title)) {
            array_push($this->openAPINullablesSetToNull, 'achievement_title');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('achievement_title', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($achievement_title) && (mb_strlen($achievement_title) > 60)) {
            throw new \InvalidArgumentException('invalid length for $achievement_title when calling EdFiStudentAcademicRecordRecognition., must be smaller than or equal to 60.');
        }

        $this->container['achievement_title'] = $achievement_title;

        return $this;
    }

    /**
     * Gets criteria
     *
     * @return string|null
     */
    public function getCriteria()
    {
        return $this->container['criteria'];
    }

    /**
     * Sets criteria
     *
     * @param string|null $criteria The criteria for competency-based completion of the achievement/award.
     *
     * @return self
     */
    public function setCriteria($criteria)
    {
        if (is_null($criteria)) {
            array_push($this->openAPINullablesSetToNull, 'criteria');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('criteria', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($criteria) && (mb_strlen($criteria) > 150)) {
            throw new \InvalidArgumentException('invalid length for $criteria when calling EdFiStudentAcademicRecordRecognition., must be smaller than or equal to 150.');
        }

        $this->container['criteria'] = $criteria;

        return $this;
    }

    /**
     * Gets criteria_url
     *
     * @return string|null
     */
    public function getCriteriaUrl()
    {
        return $this->container['criteria_url'];
    }

    /**
     * Sets criteria_url
     *
     * @param string|null $criteria_url The Uniform Resource Locator (URL) for the unique address of a web page describing the competency-based completion criteria for the achievement/award.
     *
     * @return self
     */
    public function setCriteriaUrl($criteria_url)
    {
        if (is_null($criteria_url)) {
            array_push($this->openAPINullablesSetToNull, 'criteria_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('criteria_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($criteria_url) && (mb_strlen($criteria_url) > 255)) {
            throw new \InvalidArgumentException('invalid length for $criteria_url when calling EdFiStudentAcademicRecordRecognition., must be smaller than or equal to 255.');
        }
        if (!is_null($criteria_url) && (mb_strlen($criteria_url) < 5)) {
            throw new \InvalidArgumentException('invalid length for $criteria_url when calling EdFiStudentAcademicRecordRecognition., must be bigger than or equal to 5.');
        }

        $this->container['criteria_url'] = $criteria_url;

        return $this;
    }

    /**
     * Gets evidence_statement
     *
     * @return string|null
     */
    public function getEvidenceStatement()
    {
        return $this->container['evidence_statement'];
    }

    /**
     * Sets evidence_statement
     *
     * @param string|null $evidence_statement A statement or reference describing the evidence that the individual met the criteria for attainment of the achievement/award.
     *
     * @return self
     */
    public function setEvidenceStatement($evidence_statement)
    {
        if (is_null($evidence_statement)) {
            array_push($this->openAPINullablesSetToNull, 'evidence_statement');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('evidence_statement', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($evidence_statement) && (mb_strlen($evidence_statement) > 150)) {
            throw new \InvalidArgumentException('invalid length for $evidence_statement when calling EdFiStudentAcademicRecordRecognition., must be smaller than or equal to 150.');
        }

        $this->container['evidence_statement'] = $evidence_statement;

        return $this;
    }

    /**
     * Gets image_url
     *
     * @return string|null
     */
    public function getImageUrl()
    {
        return $this->container['image_url'];
    }

    /**
     * Sets image_url
     *
     * @param string|null $image_url The Uniform Resource Locator (URL) for the unique address of an image representing an award or badge associated with the achievement/award.
     *
     * @return self
     */
    public function setImageUrl($image_url)
    {
        if (is_null($image_url)) {
            array_push($this->openAPINullablesSetToNull, 'image_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('image_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($image_url) && (mb_strlen($image_url) > 255)) {
            throw new \InvalidArgumentException('invalid length for $image_url when calling EdFiStudentAcademicRecordRecognition., must be smaller than or equal to 255.');
        }
        if (!is_null($image_url) && (mb_strlen($image_url) < 5)) {
            throw new \InvalidArgumentException('invalid length for $image_url when calling EdFiStudentAcademicRecordRecognition., must be bigger than or equal to 5.');
        }

        $this->container['image_url'] = $image_url;

        return $this;
    }

    /**
     * Gets issuer_name
     *
     * @return string|null
     */
    public function getIssuerName()
    {
        return $this->container['issuer_name'];
    }

    /**
     * Sets issuer_name
     *
     * @param string|null $issuer_name The name of the agent, entity, or institution issuing the element.
     *
     * @return self
     */
    public function setIssuerName($issuer_name)
    {
        if (is_null($issuer_name)) {
            array_push($this->openAPINullablesSetToNull, 'issuer_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('issuer_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($issuer_name) && (mb_strlen($issuer_name) > 150)) {
            throw new \InvalidArgumentException('invalid length for $issuer_name when calling EdFiStudentAcademicRecordRecognition., must be smaller than or equal to 150.');
        }

        $this->container['issuer_name'] = $issuer_name;

        return $this;
    }

    /**
     * Gets issuer_origin_url
     *
     * @return string|null
     */
    public function getIssuerOriginUrl()
    {
        return $this->container['issuer_origin_url'];
    }

    /**
     * Sets issuer_origin_url
     *
     * @param string|null $issuer_origin_url The Uniform Resource Locator (URL) from which the award was issued.
     *
     * @return self
     */
    public function setIssuerOriginUrl($issuer_origin_url)
    {
        if (is_null($issuer_origin_url)) {
            array_push($this->openAPINullablesSetToNull, 'issuer_origin_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('issuer_origin_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($issuer_origin_url) && (mb_strlen($issuer_origin_url) > 255)) {
            throw new \InvalidArgumentException('invalid length for $issuer_origin_url when calling EdFiStudentAcademicRecordRecognition., must be smaller than or equal to 255.');
        }
        if (!is_null($issuer_origin_url) && (mb_strlen($issuer_origin_url) < 5)) {
            throw new \InvalidArgumentException('invalid length for $issuer_origin_url when calling EdFiStudentAcademicRecordRecognition., must be bigger than or equal to 5.');
        }

        $this->container['issuer_origin_url'] = $issuer_origin_url;

        return $this;
    }

    /**
     * Gets recognition_award_date
     *
     * @return \DateTime|null
     */
    public function getRecognitionAwardDate()
    {
        return $this->container['recognition_award_date'];
    }

    /**
     * Sets recognition_award_date
     *
     * @param \DateTime|null $recognition_award_date The date the recognition was awarded or earned.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.
     *
     * @return self
     */
    public function setRecognitionAwardDate($recognition_award_date)
    {
        if (is_null($recognition_award_date)) {
            array_push($this->openAPINullablesSetToNull, 'recognition_award_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('recognition_award_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['recognition_award_date'] = $recognition_award_date;

        return $this;
    }

    /**
     * Gets recognition_award_expires_date
     *
     * @return \DateTime|null
     */
    public function getRecognitionAwardExpiresDate()
    {
        return $this->container['recognition_award_expires_date'];
    }

    /**
     * Sets recognition_award_expires_date
     *
     * @param \DateTime|null $recognition_award_expires_date Date on which the recognition expires.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.
     *
     * @return self
     */
    public function setRecognitionAwardExpiresDate($recognition_award_expires_date)
    {
        if (is_null($recognition_award_expires_date)) {
            array_push($this->openAPINullablesSetToNull, 'recognition_award_expires_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('recognition_award_expires_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['recognition_award_expires_date'] = $recognition_award_expires_date;

        return $this;
    }

    /**
     * Gets recognition_description
     *
     * @return string|null
     */
    public function getRecognitionDescription()
    {
        return $this->container['recognition_description'];
    }

    /**
     * Sets recognition_description
     *
     * @param string|null $recognition_description A description of the type of recognition earned by or awarded to the individual.
     *
     * @return self
     */
    public function setRecognitionDescription($recognition_description)
    {
        if (is_null($recognition_description)) {
            array_push($this->openAPINullablesSetToNull, 'recognition_description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('recognition_description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($recognition_description) && (mb_strlen($recognition_description) > 80)) {
            throw new \InvalidArgumentException('invalid length for $recognition_description when calling EdFiStudentAcademicRecordRecognition., must be smaller than or equal to 80.');
        }

        $this->container['recognition_description'] = $recognition_description;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


