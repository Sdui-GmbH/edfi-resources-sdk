<?php
/**
 * EdFiStudentSchoolAssociation
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Resources
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Resources\Model;

use \ArrayAccess;
use \Resources\ObjectSerializer;

/**
 * EdFiStudentSchoolAssociation Class Doc Comment
 *
 * @category Class
 * @package  Resources
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EdFiStudentSchoolAssociation implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'edFi_studentSchoolAssociation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'entry_date' => '\DateTime',
        'calendar_reference' => '\Resources\Model\EdFiCalendarReference',
        'class_of_school_year_type_reference' => '\Resources\Model\EdFiSchoolYearTypeReference',
        'graduation_plan_reference' => '\Resources\Model\EdFiGraduationPlanReference',
        'next_year_school_reference' => '\Resources\Model\EdFiSchoolReference',
        'school_reference' => '\Resources\Model\EdFiSchoolReference',
        'school_year_type_reference' => '\Resources\Model\EdFiSchoolYearTypeReference',
        'student_reference' => '\Resources\Model\EdFiStudentReference',
        'alternative_graduation_plans' => '\Resources\Model\EdFiStudentSchoolAssociationAlternativeGraduationPlan[]',
        'education_plans' => '\Resources\Model\EdFiStudentSchoolAssociationEducationPlan[]',
        'employed_while_enrolled' => 'bool',
        'enrollment_type_descriptor' => 'string',
        'entry_grade_level_descriptor' => 'string',
        'entry_grade_level_reason_descriptor' => 'string',
        'entry_type_descriptor' => 'string',
        'exit_withdraw_date' => '\DateTime',
        'exit_withdraw_type_descriptor' => 'string',
        'full_time_equivalency' => 'float',
        'next_year_grade_level_descriptor' => 'string',
        'primary_school' => 'bool',
        'repeat_grade_indicator' => 'bool',
        'residency_status_descriptor' => 'string',
        'school_choice' => 'bool',
        'school_choice_basis_descriptor' => 'string',
        'school_choice_transfer' => 'bool',
        'term_completion_indicator' => 'bool',
        '_etag' => 'string',
        '_last_modified_date' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'entry_date' => 'date',
        'calendar_reference' => null,
        'class_of_school_year_type_reference' => null,
        'graduation_plan_reference' => null,
        'next_year_school_reference' => null,
        'school_reference' => null,
        'school_year_type_reference' => null,
        'student_reference' => null,
        'alternative_graduation_plans' => null,
        'education_plans' => null,
        'employed_while_enrolled' => null,
        'enrollment_type_descriptor' => null,
        'entry_grade_level_descriptor' => null,
        'entry_grade_level_reason_descriptor' => null,
        'entry_type_descriptor' => null,
        'exit_withdraw_date' => 'date',
        'exit_withdraw_type_descriptor' => null,
        'full_time_equivalency' => 'double',
        'next_year_grade_level_descriptor' => null,
        'primary_school' => null,
        'repeat_grade_indicator' => null,
        'residency_status_descriptor' => null,
        'school_choice' => null,
        'school_choice_basis_descriptor' => null,
        'school_choice_transfer' => null,
        'term_completion_indicator' => null,
        '_etag' => null,
        '_last_modified_date' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'entry_date' => false,
        'calendar_reference' => false,
        'class_of_school_year_type_reference' => false,
        'graduation_plan_reference' => false,
        'next_year_school_reference' => false,
        'school_reference' => false,
        'school_year_type_reference' => false,
        'student_reference' => false,
        'alternative_graduation_plans' => false,
        'education_plans' => false,
        'employed_while_enrolled' => true,
        'enrollment_type_descriptor' => true,
        'entry_grade_level_descriptor' => false,
        'entry_grade_level_reason_descriptor' => true,
        'entry_type_descriptor' => true,
        'exit_withdraw_date' => true,
        'exit_withdraw_type_descriptor' => true,
        'full_time_equivalency' => true,
        'next_year_grade_level_descriptor' => true,
        'primary_school' => true,
        'repeat_grade_indicator' => true,
        'residency_status_descriptor' => true,
        'school_choice' => true,
        'school_choice_basis_descriptor' => true,
        'school_choice_transfer' => true,
        'term_completion_indicator' => true,
        '_etag' => false,
        '_last_modified_date' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'entry_date' => 'entryDate',
        'calendar_reference' => 'calendarReference',
        'class_of_school_year_type_reference' => 'classOfSchoolYearTypeReference',
        'graduation_plan_reference' => 'graduationPlanReference',
        'next_year_school_reference' => 'nextYearSchoolReference',
        'school_reference' => 'schoolReference',
        'school_year_type_reference' => 'schoolYearTypeReference',
        'student_reference' => 'studentReference',
        'alternative_graduation_plans' => 'alternativeGraduationPlans',
        'education_plans' => 'educationPlans',
        'employed_while_enrolled' => 'employedWhileEnrolled',
        'enrollment_type_descriptor' => 'enrollmentTypeDescriptor',
        'entry_grade_level_descriptor' => 'entryGradeLevelDescriptor',
        'entry_grade_level_reason_descriptor' => 'entryGradeLevelReasonDescriptor',
        'entry_type_descriptor' => 'entryTypeDescriptor',
        'exit_withdraw_date' => 'exitWithdrawDate',
        'exit_withdraw_type_descriptor' => 'exitWithdrawTypeDescriptor',
        'full_time_equivalency' => 'fullTimeEquivalency',
        'next_year_grade_level_descriptor' => 'nextYearGradeLevelDescriptor',
        'primary_school' => 'primarySchool',
        'repeat_grade_indicator' => 'repeatGradeIndicator',
        'residency_status_descriptor' => 'residencyStatusDescriptor',
        'school_choice' => 'schoolChoice',
        'school_choice_basis_descriptor' => 'schoolChoiceBasisDescriptor',
        'school_choice_transfer' => 'schoolChoiceTransfer',
        'term_completion_indicator' => 'termCompletionIndicator',
        '_etag' => '_etag',
        '_last_modified_date' => '_lastModifiedDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'entry_date' => 'setEntryDate',
        'calendar_reference' => 'setCalendarReference',
        'class_of_school_year_type_reference' => 'setClassOfSchoolYearTypeReference',
        'graduation_plan_reference' => 'setGraduationPlanReference',
        'next_year_school_reference' => 'setNextYearSchoolReference',
        'school_reference' => 'setSchoolReference',
        'school_year_type_reference' => 'setSchoolYearTypeReference',
        'student_reference' => 'setStudentReference',
        'alternative_graduation_plans' => 'setAlternativeGraduationPlans',
        'education_plans' => 'setEducationPlans',
        'employed_while_enrolled' => 'setEmployedWhileEnrolled',
        'enrollment_type_descriptor' => 'setEnrollmentTypeDescriptor',
        'entry_grade_level_descriptor' => 'setEntryGradeLevelDescriptor',
        'entry_grade_level_reason_descriptor' => 'setEntryGradeLevelReasonDescriptor',
        'entry_type_descriptor' => 'setEntryTypeDescriptor',
        'exit_withdraw_date' => 'setExitWithdrawDate',
        'exit_withdraw_type_descriptor' => 'setExitWithdrawTypeDescriptor',
        'full_time_equivalency' => 'setFullTimeEquivalency',
        'next_year_grade_level_descriptor' => 'setNextYearGradeLevelDescriptor',
        'primary_school' => 'setPrimarySchool',
        'repeat_grade_indicator' => 'setRepeatGradeIndicator',
        'residency_status_descriptor' => 'setResidencyStatusDescriptor',
        'school_choice' => 'setSchoolChoice',
        'school_choice_basis_descriptor' => 'setSchoolChoiceBasisDescriptor',
        'school_choice_transfer' => 'setSchoolChoiceTransfer',
        'term_completion_indicator' => 'setTermCompletionIndicator',
        '_etag' => 'setEtag',
        '_last_modified_date' => 'setLastModifiedDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'entry_date' => 'getEntryDate',
        'calendar_reference' => 'getCalendarReference',
        'class_of_school_year_type_reference' => 'getClassOfSchoolYearTypeReference',
        'graduation_plan_reference' => 'getGraduationPlanReference',
        'next_year_school_reference' => 'getNextYearSchoolReference',
        'school_reference' => 'getSchoolReference',
        'school_year_type_reference' => 'getSchoolYearTypeReference',
        'student_reference' => 'getStudentReference',
        'alternative_graduation_plans' => 'getAlternativeGraduationPlans',
        'education_plans' => 'getEducationPlans',
        'employed_while_enrolled' => 'getEmployedWhileEnrolled',
        'enrollment_type_descriptor' => 'getEnrollmentTypeDescriptor',
        'entry_grade_level_descriptor' => 'getEntryGradeLevelDescriptor',
        'entry_grade_level_reason_descriptor' => 'getEntryGradeLevelReasonDescriptor',
        'entry_type_descriptor' => 'getEntryTypeDescriptor',
        'exit_withdraw_date' => 'getExitWithdrawDate',
        'exit_withdraw_type_descriptor' => 'getExitWithdrawTypeDescriptor',
        'full_time_equivalency' => 'getFullTimeEquivalency',
        'next_year_grade_level_descriptor' => 'getNextYearGradeLevelDescriptor',
        'primary_school' => 'getPrimarySchool',
        'repeat_grade_indicator' => 'getRepeatGradeIndicator',
        'residency_status_descriptor' => 'getResidencyStatusDescriptor',
        'school_choice' => 'getSchoolChoice',
        'school_choice_basis_descriptor' => 'getSchoolChoiceBasisDescriptor',
        'school_choice_transfer' => 'getSchoolChoiceTransfer',
        'term_completion_indicator' => 'getTermCompletionIndicator',
        '_etag' => 'getEtag',
        '_last_modified_date' => 'getLastModifiedDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('entry_date', $data ?? [], null);
        $this->setIfExists('calendar_reference', $data ?? [], null);
        $this->setIfExists('class_of_school_year_type_reference', $data ?? [], null);
        $this->setIfExists('graduation_plan_reference', $data ?? [], null);
        $this->setIfExists('next_year_school_reference', $data ?? [], null);
        $this->setIfExists('school_reference', $data ?? [], null);
        $this->setIfExists('school_year_type_reference', $data ?? [], null);
        $this->setIfExists('student_reference', $data ?? [], null);
        $this->setIfExists('alternative_graduation_plans', $data ?? [], null);
        $this->setIfExists('education_plans', $data ?? [], null);
        $this->setIfExists('employed_while_enrolled', $data ?? [], null);
        $this->setIfExists('enrollment_type_descriptor', $data ?? [], null);
        $this->setIfExists('entry_grade_level_descriptor', $data ?? [], null);
        $this->setIfExists('entry_grade_level_reason_descriptor', $data ?? [], null);
        $this->setIfExists('entry_type_descriptor', $data ?? [], null);
        $this->setIfExists('exit_withdraw_date', $data ?? [], null);
        $this->setIfExists('exit_withdraw_type_descriptor', $data ?? [], null);
        $this->setIfExists('full_time_equivalency', $data ?? [], null);
        $this->setIfExists('next_year_grade_level_descriptor', $data ?? [], null);
        $this->setIfExists('primary_school', $data ?? [], null);
        $this->setIfExists('repeat_grade_indicator', $data ?? [], null);
        $this->setIfExists('residency_status_descriptor', $data ?? [], null);
        $this->setIfExists('school_choice', $data ?? [], null);
        $this->setIfExists('school_choice_basis_descriptor', $data ?? [], null);
        $this->setIfExists('school_choice_transfer', $data ?? [], null);
        $this->setIfExists('term_completion_indicator', $data ?? [], null);
        $this->setIfExists('_etag', $data ?? [], null);
        $this->setIfExists('_last_modified_date', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['entry_date'] === null) {
            $invalidProperties[] = "'entry_date' can't be null";
        }
        if ($this->container['school_reference'] === null) {
            $invalidProperties[] = "'school_reference' can't be null";
        }
        if ($this->container['student_reference'] === null) {
            $invalidProperties[] = "'student_reference' can't be null";
        }
        if (!is_null($this->container['enrollment_type_descriptor']) && (mb_strlen($this->container['enrollment_type_descriptor']) > 306)) {
            $invalidProperties[] = "invalid value for 'enrollment_type_descriptor', the character length must be smaller than or equal to 306.";
        }

        if ($this->container['entry_grade_level_descriptor'] === null) {
            $invalidProperties[] = "'entry_grade_level_descriptor' can't be null";
        }
        if ((mb_strlen($this->container['entry_grade_level_descriptor']) > 306)) {
            $invalidProperties[] = "invalid value for 'entry_grade_level_descriptor', the character length must be smaller than or equal to 306.";
        }

        if (!is_null($this->container['entry_grade_level_reason_descriptor']) && (mb_strlen($this->container['entry_grade_level_reason_descriptor']) > 306)) {
            $invalidProperties[] = "invalid value for 'entry_grade_level_reason_descriptor', the character length must be smaller than or equal to 306.";
        }

        if (!is_null($this->container['entry_type_descriptor']) && (mb_strlen($this->container['entry_type_descriptor']) > 306)) {
            $invalidProperties[] = "invalid value for 'entry_type_descriptor', the character length must be smaller than or equal to 306.";
        }

        if (!is_null($this->container['exit_withdraw_type_descriptor']) && (mb_strlen($this->container['exit_withdraw_type_descriptor']) > 306)) {
            $invalidProperties[] = "invalid value for 'exit_withdraw_type_descriptor', the character length must be smaller than or equal to 306.";
        }

        if (!is_null($this->container['full_time_equivalency']) && ($this->container['full_time_equivalency'] > 9.9999)) {
            $invalidProperties[] = "invalid value for 'full_time_equivalency', must be smaller than or equal to 9.9999.";
        }

        if (!is_null($this->container['full_time_equivalency']) && ($this->container['full_time_equivalency'] < 0.0)) {
            $invalidProperties[] = "invalid value for 'full_time_equivalency', must be bigger than or equal to 0.0.";
        }

        if (!is_null($this->container['next_year_grade_level_descriptor']) && (mb_strlen($this->container['next_year_grade_level_descriptor']) > 306)) {
            $invalidProperties[] = "invalid value for 'next_year_grade_level_descriptor', the character length must be smaller than or equal to 306.";
        }

        if (!is_null($this->container['residency_status_descriptor']) && (mb_strlen($this->container['residency_status_descriptor']) > 306)) {
            $invalidProperties[] = "invalid value for 'residency_status_descriptor', the character length must be smaller than or equal to 306.";
        }

        if (!is_null($this->container['school_choice_basis_descriptor']) && (mb_strlen($this->container['school_choice_basis_descriptor']) > 306)) {
            $invalidProperties[] = "invalid value for 'school_choice_basis_descriptor', the character length must be smaller than or equal to 306.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id 
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets entry_date
     *
     * @return \DateTime
     */
    public function getEntryDate()
    {
        return $this->container['entry_date'];
    }

    /**
     * Sets entry_date
     *
     * @param \DateTime $entry_date The month, day, and year on which an individual enters and begins to receive instructional services in a school for each school year. The EntryDate value should be the date the student enrolled, or when the student's enrollment materially changed, such as with a grade promotion.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.
     *
     * @return self
     */
    public function setEntryDate($entry_date)
    {
        if (is_null($entry_date)) {
            throw new \InvalidArgumentException('non-nullable entry_date cannot be null');
        }
        $this->container['entry_date'] = $entry_date;

        return $this;
    }

    /**
     * Gets calendar_reference
     *
     * @return \Resources\Model\EdFiCalendarReference|null
     */
    public function getCalendarReference()
    {
        return $this->container['calendar_reference'];
    }

    /**
     * Sets calendar_reference
     *
     * @param \Resources\Model\EdFiCalendarReference|null $calendar_reference calendar_reference
     *
     * @return self
     */
    public function setCalendarReference($calendar_reference)
    {
        if (is_null($calendar_reference)) {
            throw new \InvalidArgumentException('non-nullable calendar_reference cannot be null');
        }
        $this->container['calendar_reference'] = $calendar_reference;

        return $this;
    }

    /**
     * Gets class_of_school_year_type_reference
     *
     * @return \Resources\Model\EdFiSchoolYearTypeReference|null
     */
    public function getClassOfSchoolYearTypeReference()
    {
        return $this->container['class_of_school_year_type_reference'];
    }

    /**
     * Sets class_of_school_year_type_reference
     *
     * @param \Resources\Model\EdFiSchoolYearTypeReference|null $class_of_school_year_type_reference class_of_school_year_type_reference
     *
     * @return self
     */
    public function setClassOfSchoolYearTypeReference($class_of_school_year_type_reference)
    {
        if (is_null($class_of_school_year_type_reference)) {
            throw new \InvalidArgumentException('non-nullable class_of_school_year_type_reference cannot be null');
        }
        $this->container['class_of_school_year_type_reference'] = $class_of_school_year_type_reference;

        return $this;
    }

    /**
     * Gets graduation_plan_reference
     *
     * @return \Resources\Model\EdFiGraduationPlanReference|null
     */
    public function getGraduationPlanReference()
    {
        return $this->container['graduation_plan_reference'];
    }

    /**
     * Sets graduation_plan_reference
     *
     * @param \Resources\Model\EdFiGraduationPlanReference|null $graduation_plan_reference graduation_plan_reference
     *
     * @return self
     */
    public function setGraduationPlanReference($graduation_plan_reference)
    {
        if (is_null($graduation_plan_reference)) {
            throw new \InvalidArgumentException('non-nullable graduation_plan_reference cannot be null');
        }
        $this->container['graduation_plan_reference'] = $graduation_plan_reference;

        return $this;
    }

    /**
     * Gets next_year_school_reference
     *
     * @return \Resources\Model\EdFiSchoolReference|null
     */
    public function getNextYearSchoolReference()
    {
        return $this->container['next_year_school_reference'];
    }

    /**
     * Sets next_year_school_reference
     *
     * @param \Resources\Model\EdFiSchoolReference|null $next_year_school_reference next_year_school_reference
     *
     * @return self
     */
    public function setNextYearSchoolReference($next_year_school_reference)
    {
        if (is_null($next_year_school_reference)) {
            throw new \InvalidArgumentException('non-nullable next_year_school_reference cannot be null');
        }
        $this->container['next_year_school_reference'] = $next_year_school_reference;

        return $this;
    }

    /**
     * Gets school_reference
     *
     * @return \Resources\Model\EdFiSchoolReference
     */
    public function getSchoolReference()
    {
        return $this->container['school_reference'];
    }

    /**
     * Sets school_reference
     *
     * @param \Resources\Model\EdFiSchoolReference $school_reference school_reference
     *
     * @return self
     */
    public function setSchoolReference($school_reference)
    {
        if (is_null($school_reference)) {
            throw new \InvalidArgumentException('non-nullable school_reference cannot be null');
        }
        $this->container['school_reference'] = $school_reference;

        return $this;
    }

    /**
     * Gets school_year_type_reference
     *
     * @return \Resources\Model\EdFiSchoolYearTypeReference|null
     */
    public function getSchoolYearTypeReference()
    {
        return $this->container['school_year_type_reference'];
    }

    /**
     * Sets school_year_type_reference
     *
     * @param \Resources\Model\EdFiSchoolYearTypeReference|null $school_year_type_reference school_year_type_reference
     *
     * @return self
     */
    public function setSchoolYearTypeReference($school_year_type_reference)
    {
        if (is_null($school_year_type_reference)) {
            throw new \InvalidArgumentException('non-nullable school_year_type_reference cannot be null');
        }
        $this->container['school_year_type_reference'] = $school_year_type_reference;

        return $this;
    }

    /**
     * Gets student_reference
     *
     * @return \Resources\Model\EdFiStudentReference
     */
    public function getStudentReference()
    {
        return $this->container['student_reference'];
    }

    /**
     * Sets student_reference
     *
     * @param \Resources\Model\EdFiStudentReference $student_reference student_reference
     *
     * @return self
     */
    public function setStudentReference($student_reference)
    {
        if (is_null($student_reference)) {
            throw new \InvalidArgumentException('non-nullable student_reference cannot be null');
        }
        $this->container['student_reference'] = $student_reference;

        return $this;
    }

    /**
     * Gets alternative_graduation_plans
     *
     * @return \Resources\Model\EdFiStudentSchoolAssociationAlternativeGraduationPlan[]|null
     */
    public function getAlternativeGraduationPlans()
    {
        return $this->container['alternative_graduation_plans'];
    }

    /**
     * Sets alternative_graduation_plans
     *
     * @param \Resources\Model\EdFiStudentSchoolAssociationAlternativeGraduationPlan[]|null $alternative_graduation_plans An unordered collection of studentSchoolAssociationAlternativeGraduationPlans. The secondary graduation plan or plans associated with the student enrolled in the school.
     *
     * @return self
     */
    public function setAlternativeGraduationPlans($alternative_graduation_plans)
    {
        if (is_null($alternative_graduation_plans)) {
            throw new \InvalidArgumentException('non-nullable alternative_graduation_plans cannot be null');
        }
        $this->container['alternative_graduation_plans'] = $alternative_graduation_plans;

        return $this;
    }

    /**
     * Gets education_plans
     *
     * @return \Resources\Model\EdFiStudentSchoolAssociationEducationPlan[]|null
     */
    public function getEducationPlans()
    {
        return $this->container['education_plans'];
    }

    /**
     * Sets education_plans
     *
     * @param \Resources\Model\EdFiStudentSchoolAssociationEducationPlan[]|null $education_plans An unordered collection of studentSchoolAssociationEducationPlans. The type of education plan(s) the student is following, if appropriate.
     *
     * @return self
     */
    public function setEducationPlans($education_plans)
    {
        if (is_null($education_plans)) {
            throw new \InvalidArgumentException('non-nullable education_plans cannot be null');
        }
        $this->container['education_plans'] = $education_plans;

        return $this;
    }

    /**
     * Gets employed_while_enrolled
     *
     * @return bool|null
     */
    public function getEmployedWhileEnrolled()
    {
        return $this->container['employed_while_enrolled'];
    }

    /**
     * Sets employed_while_enrolled
     *
     * @param bool|null $employed_while_enrolled An individual who is a paid employee or works in his or her own business, profession, or farm and at the same time is enrolled in secondary, postsecondary, or adult education.
     *
     * @return self
     */
    public function setEmployedWhileEnrolled($employed_while_enrolled)
    {
        if (is_null($employed_while_enrolled)) {
            array_push($this->openAPINullablesSetToNull, 'employed_while_enrolled');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('employed_while_enrolled', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['employed_while_enrolled'] = $employed_while_enrolled;

        return $this;
    }

    /**
     * Gets enrollment_type_descriptor
     *
     * @return string|null
     */
    public function getEnrollmentTypeDescriptor()
    {
        return $this->container['enrollment_type_descriptor'];
    }

    /**
     * Sets enrollment_type_descriptor
     *
     * @param string|null $enrollment_type_descriptor The type of enrollment reflected by the StudentSchoolAssociation.
     *
     * @return self
     */
    public function setEnrollmentTypeDescriptor($enrollment_type_descriptor)
    {
        if (is_null($enrollment_type_descriptor)) {
            array_push($this->openAPINullablesSetToNull, 'enrollment_type_descriptor');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('enrollment_type_descriptor', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($enrollment_type_descriptor) && (mb_strlen($enrollment_type_descriptor) > 306)) {
            throw new \InvalidArgumentException('invalid length for $enrollment_type_descriptor when calling EdFiStudentSchoolAssociation., must be smaller than or equal to 306.');
        }

        $this->container['enrollment_type_descriptor'] = $enrollment_type_descriptor;

        return $this;
    }

    /**
     * Gets entry_grade_level_descriptor
     *
     * @return string
     */
    public function getEntryGradeLevelDescriptor()
    {
        return $this->container['entry_grade_level_descriptor'];
    }

    /**
     * Sets entry_grade_level_descriptor
     *
     * @param string $entry_grade_level_descriptor The grade level or primary instructional level at which a student enters and receives services in a school or an educational institution during a given academic session.
     *
     * @return self
     */
    public function setEntryGradeLevelDescriptor($entry_grade_level_descriptor)
    {
        if (is_null($entry_grade_level_descriptor)) {
            throw new \InvalidArgumentException('non-nullable entry_grade_level_descriptor cannot be null');
        }
        if ((mb_strlen($entry_grade_level_descriptor) > 306)) {
            throw new \InvalidArgumentException('invalid length for $entry_grade_level_descriptor when calling EdFiStudentSchoolAssociation., must be smaller than or equal to 306.');
        }

        $this->container['entry_grade_level_descriptor'] = $entry_grade_level_descriptor;

        return $this;
    }

    /**
     * Gets entry_grade_level_reason_descriptor
     *
     * @return string|null
     */
    public function getEntryGradeLevelReasonDescriptor()
    {
        return $this->container['entry_grade_level_reason_descriptor'];
    }

    /**
     * Sets entry_grade_level_reason_descriptor
     *
     * @param string|null $entry_grade_level_reason_descriptor The primary reason as to why a staff member determined that a student should be promoted or not (or be demoted) at the end of a given school term.
     *
     * @return self
     */
    public function setEntryGradeLevelReasonDescriptor($entry_grade_level_reason_descriptor)
    {
        if (is_null($entry_grade_level_reason_descriptor)) {
            array_push($this->openAPINullablesSetToNull, 'entry_grade_level_reason_descriptor');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('entry_grade_level_reason_descriptor', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($entry_grade_level_reason_descriptor) && (mb_strlen($entry_grade_level_reason_descriptor) > 306)) {
            throw new \InvalidArgumentException('invalid length for $entry_grade_level_reason_descriptor when calling EdFiStudentSchoolAssociation., must be smaller than or equal to 306.');
        }

        $this->container['entry_grade_level_reason_descriptor'] = $entry_grade_level_reason_descriptor;

        return $this;
    }

    /**
     * Gets entry_type_descriptor
     *
     * @return string|null
     */
    public function getEntryTypeDescriptor()
    {
        return $this->container['entry_type_descriptor'];
    }

    /**
     * Sets entry_type_descriptor
     *
     * @param string|null $entry_type_descriptor The process by which a student enters a school during a given academic session.
     *
     * @return self
     */
    public function setEntryTypeDescriptor($entry_type_descriptor)
    {
        if (is_null($entry_type_descriptor)) {
            array_push($this->openAPINullablesSetToNull, 'entry_type_descriptor');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('entry_type_descriptor', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($entry_type_descriptor) && (mb_strlen($entry_type_descriptor) > 306)) {
            throw new \InvalidArgumentException('invalid length for $entry_type_descriptor when calling EdFiStudentSchoolAssociation., must be smaller than or equal to 306.');
        }

        $this->container['entry_type_descriptor'] = $entry_type_descriptor;

        return $this;
    }

    /**
     * Gets exit_withdraw_date
     *
     * @return \DateTime|null
     */
    public function getExitWithdrawDate()
    {
        return $this->container['exit_withdraw_date'];
    }

    /**
     * Sets exit_withdraw_date
     *
     * @param \DateTime|null $exit_withdraw_date The recorded exit or withdraw date for the student.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.
     *
     * @return self
     */
    public function setExitWithdrawDate($exit_withdraw_date)
    {
        if (is_null($exit_withdraw_date)) {
            array_push($this->openAPINullablesSetToNull, 'exit_withdraw_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('exit_withdraw_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['exit_withdraw_date'] = $exit_withdraw_date;

        return $this;
    }

    /**
     * Gets exit_withdraw_type_descriptor
     *
     * @return string|null
     */
    public function getExitWithdrawTypeDescriptor()
    {
        return $this->container['exit_withdraw_type_descriptor'];
    }

    /**
     * Sets exit_withdraw_type_descriptor
     *
     * @param string|null $exit_withdraw_type_descriptor The circumstances under which the student exited from membership in an educational institution.
     *
     * @return self
     */
    public function setExitWithdrawTypeDescriptor($exit_withdraw_type_descriptor)
    {
        if (is_null($exit_withdraw_type_descriptor)) {
            array_push($this->openAPINullablesSetToNull, 'exit_withdraw_type_descriptor');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('exit_withdraw_type_descriptor', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($exit_withdraw_type_descriptor) && (mb_strlen($exit_withdraw_type_descriptor) > 306)) {
            throw new \InvalidArgumentException('invalid length for $exit_withdraw_type_descriptor when calling EdFiStudentSchoolAssociation., must be smaller than or equal to 306.');
        }

        $this->container['exit_withdraw_type_descriptor'] = $exit_withdraw_type_descriptor;

        return $this;
    }

    /**
     * Gets full_time_equivalency
     *
     * @return float|null
     */
    public function getFullTimeEquivalency()
    {
        return $this->container['full_time_equivalency'];
    }

    /**
     * Sets full_time_equivalency
     *
     * @param float|null $full_time_equivalency The full-time equivalent ratio for the student s assignment to a school for services or instruction. For example, a full-time student would have an FTE value of 1 while a half-time student would have an FTE value of 0.5.
     *
     * @return self
     */
    public function setFullTimeEquivalency($full_time_equivalency)
    {
        if (is_null($full_time_equivalency)) {
            array_push($this->openAPINullablesSetToNull, 'full_time_equivalency');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('full_time_equivalency', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($full_time_equivalency) && ($full_time_equivalency > 9.9999)) {
            throw new \InvalidArgumentException('invalid value for $full_time_equivalency when calling EdFiStudentSchoolAssociation., must be smaller than or equal to 9.9999.');
        }
        if (!is_null($full_time_equivalency) && ($full_time_equivalency < 0.0)) {
            throw new \InvalidArgumentException('invalid value for $full_time_equivalency when calling EdFiStudentSchoolAssociation., must be bigger than or equal to 0.0.');
        }

        $this->container['full_time_equivalency'] = $full_time_equivalency;

        return $this;
    }

    /**
     * Gets next_year_grade_level_descriptor
     *
     * @return string|null
     */
    public function getNextYearGradeLevelDescriptor()
    {
        return $this->container['next_year_grade_level_descriptor'];
    }

    /**
     * Sets next_year_grade_level_descriptor
     *
     * @param string|null $next_year_grade_level_descriptor The anticipated grade level for the student for the next school year.
     *
     * @return self
     */
    public function setNextYearGradeLevelDescriptor($next_year_grade_level_descriptor)
    {
        if (is_null($next_year_grade_level_descriptor)) {
            array_push($this->openAPINullablesSetToNull, 'next_year_grade_level_descriptor');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('next_year_grade_level_descriptor', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($next_year_grade_level_descriptor) && (mb_strlen($next_year_grade_level_descriptor) > 306)) {
            throw new \InvalidArgumentException('invalid length for $next_year_grade_level_descriptor when calling EdFiStudentSchoolAssociation., must be smaller than or equal to 306.');
        }

        $this->container['next_year_grade_level_descriptor'] = $next_year_grade_level_descriptor;

        return $this;
    }

    /**
     * Gets primary_school
     *
     * @return bool|null
     */
    public function getPrimarySchool()
    {
        return $this->container['primary_school'];
    }

    /**
     * Sets primary_school
     *
     * @param bool|null $primary_school Indicates if a given enrollment record should be considered the primary record for a student.
     *
     * @return self
     */
    public function setPrimarySchool($primary_school)
    {
        if (is_null($primary_school)) {
            array_push($this->openAPINullablesSetToNull, 'primary_school');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('primary_school', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['primary_school'] = $primary_school;

        return $this;
    }

    /**
     * Gets repeat_grade_indicator
     *
     * @return bool|null
     */
    public function getRepeatGradeIndicator()
    {
        return $this->container['repeat_grade_indicator'];
    }

    /**
     * Sets repeat_grade_indicator
     *
     * @param bool|null $repeat_grade_indicator An indicator of whether the student is enrolling to repeat a grade level, either by failure or an agreement to hold the student back.
     *
     * @return self
     */
    public function setRepeatGradeIndicator($repeat_grade_indicator)
    {
        if (is_null($repeat_grade_indicator)) {
            array_push($this->openAPINullablesSetToNull, 'repeat_grade_indicator');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('repeat_grade_indicator', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['repeat_grade_indicator'] = $repeat_grade_indicator;

        return $this;
    }

    /**
     * Gets residency_status_descriptor
     *
     * @return string|null
     */
    public function getResidencyStatusDescriptor()
    {
        return $this->container['residency_status_descriptor'];
    }

    /**
     * Sets residency_status_descriptor
     *
     * @param string|null $residency_status_descriptor An indication of the location of a persons legal residence relative to (within or outside of) the boundaries of the public school attended and its administrative unit.
     *
     * @return self
     */
    public function setResidencyStatusDescriptor($residency_status_descriptor)
    {
        if (is_null($residency_status_descriptor)) {
            array_push($this->openAPINullablesSetToNull, 'residency_status_descriptor');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('residency_status_descriptor', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($residency_status_descriptor) && (mb_strlen($residency_status_descriptor) > 306)) {
            throw new \InvalidArgumentException('invalid length for $residency_status_descriptor when calling EdFiStudentSchoolAssociation., must be smaller than or equal to 306.');
        }

        $this->container['residency_status_descriptor'] = $residency_status_descriptor;

        return $this;
    }

    /**
     * Gets school_choice
     *
     * @return bool|null
     */
    public function getSchoolChoice()
    {
        return $this->container['school_choice'];
    }

    /**
     * Sets school_choice
     *
     * @param bool|null $school_choice An indication of whether the student enrolled in this school under the provisions for public school choice
     *
     * @return self
     */
    public function setSchoolChoice($school_choice)
    {
        if (is_null($school_choice)) {
            array_push($this->openAPINullablesSetToNull, 'school_choice');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('school_choice', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['school_choice'] = $school_choice;

        return $this;
    }

    /**
     * Gets school_choice_basis_descriptor
     *
     * @return string|null
     */
    public function getSchoolChoiceBasisDescriptor()
    {
        return $this->container['school_choice_basis_descriptor'];
    }

    /**
     * Sets school_choice_basis_descriptor
     *
     * @param string|null $school_choice_basis_descriptor The legal basis for the school choice enrollment according to local, state or federal policy or regulation. (The descriptor provides the list of available bases specific to the state
     *
     * @return self
     */
    public function setSchoolChoiceBasisDescriptor($school_choice_basis_descriptor)
    {
        if (is_null($school_choice_basis_descriptor)) {
            array_push($this->openAPINullablesSetToNull, 'school_choice_basis_descriptor');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('school_choice_basis_descriptor', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($school_choice_basis_descriptor) && (mb_strlen($school_choice_basis_descriptor) > 306)) {
            throw new \InvalidArgumentException('invalid length for $school_choice_basis_descriptor when calling EdFiStudentSchoolAssociation., must be smaller than or equal to 306.');
        }

        $this->container['school_choice_basis_descriptor'] = $school_choice_basis_descriptor;

        return $this;
    }

    /**
     * Gets school_choice_transfer
     *
     * @return bool|null
     */
    public function getSchoolChoiceTransfer()
    {
        return $this->container['school_choice_transfer'];
    }

    /**
     * Sets school_choice_transfer
     *
     * @param bool|null $school_choice_transfer An indication of whether students transferred in or out of the school did so during the school year under the provisions for public school choice in accordance with Title I, Part A, Section 1116.
     *
     * @return self
     */
    public function setSchoolChoiceTransfer($school_choice_transfer)
    {
        if (is_null($school_choice_transfer)) {
            array_push($this->openAPINullablesSetToNull, 'school_choice_transfer');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('school_choice_transfer', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['school_choice_transfer'] = $school_choice_transfer;

        return $this;
    }

    /**
     * Gets term_completion_indicator
     *
     * @return bool|null
     */
    public function getTermCompletionIndicator()
    {
        return $this->container['term_completion_indicator'];
    }

    /**
     * Sets term_completion_indicator
     *
     * @param bool|null $term_completion_indicator Idicates whether or not a student completed the most recent school term.
     *
     * @return self
     */
    public function setTermCompletionIndicator($term_completion_indicator)
    {
        if (is_null($term_completion_indicator)) {
            array_push($this->openAPINullablesSetToNull, 'term_completion_indicator');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('term_completion_indicator', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['term_completion_indicator'] = $term_completion_indicator;

        return $this;
    }

    /**
     * Gets _etag
     *
     * @return string|null
     */
    public function getEtag()
    {
        return $this->container['_etag'];
    }

    /**
     * Sets _etag
     *
     * @param string|null $_etag A unique system-generated value that identifies the version of the resource.
     *
     * @return self
     */
    public function setEtag($_etag)
    {
        if (is_null($_etag)) {
            throw new \InvalidArgumentException('non-nullable _etag cannot be null');
        }
        $this->container['_etag'] = $_etag;

        return $this;
    }

    /**
     * Gets _last_modified_date
     *
     * @return \DateTime|null
     */
    public function getLastModifiedDate()
    {
        return $this->container['_last_modified_date'];
    }

    /**
     * Sets _last_modified_date
     *
     * @param \DateTime|null $_last_modified_date The date and time the resource was last modified.
     *
     * @return self
     */
    public function setLastModifiedDate($_last_modified_date)
    {
        if (is_null($_last_modified_date)) {
            throw new \InvalidArgumentException('non-nullable _last_modified_date cannot be null');
        }
        $this->container['_last_modified_date'] = $_last_modified_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


