<?php
/**
 * EdFiAssessmentItem
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * EdFiAssessmentItem Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EdFiAssessmentItem implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'edFi_assessmentItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'identification_code' => 'string',
        'assessment_reference' => '\OpenAPI\Client\Model\EdFiAssessmentReference',
        'assessment_item_category_descriptor' => 'string',
        'assessment_item_uri' => 'string',
        'expected_time_assessed' => 'string',
        'item_text' => 'string',
        'learning_standards' => '\OpenAPI\Client\Model\EdFiAssessmentItemLearningStandard[]',
        'max_raw_score' => 'float',
        'nomenclature' => 'string',
        'possible_responses' => '\OpenAPI\Client\Model\EdFiAssessmentItemPossibleResponse[]',
        '_etag' => 'string',
        '_last_modified_date' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'identification_code' => null,
        'assessment_reference' => null,
        'assessment_item_category_descriptor' => null,
        'assessment_item_uri' => null,
        'expected_time_assessed' => null,
        'item_text' => null,
        'learning_standards' => null,
        'max_raw_score' => 'double',
        'nomenclature' => null,
        'possible_responses' => null,
        '_etag' => null,
        '_last_modified_date' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'identification_code' => false,
        'assessment_reference' => false,
        'assessment_item_category_descriptor' => true,
        'assessment_item_uri' => true,
        'expected_time_assessed' => true,
        'item_text' => true,
        'learning_standards' => false,
        'max_raw_score' => true,
        'nomenclature' => true,
        'possible_responses' => false,
        '_etag' => false,
        '_last_modified_date' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'identification_code' => 'identificationCode',
        'assessment_reference' => 'assessmentReference',
        'assessment_item_category_descriptor' => 'assessmentItemCategoryDescriptor',
        'assessment_item_uri' => 'assessmentItemURI',
        'expected_time_assessed' => 'expectedTimeAssessed',
        'item_text' => 'itemText',
        'learning_standards' => 'learningStandards',
        'max_raw_score' => 'maxRawScore',
        'nomenclature' => 'nomenclature',
        'possible_responses' => 'possibleResponses',
        '_etag' => '_etag',
        '_last_modified_date' => '_lastModifiedDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'identification_code' => 'setIdentificationCode',
        'assessment_reference' => 'setAssessmentReference',
        'assessment_item_category_descriptor' => 'setAssessmentItemCategoryDescriptor',
        'assessment_item_uri' => 'setAssessmentItemUri',
        'expected_time_assessed' => 'setExpectedTimeAssessed',
        'item_text' => 'setItemText',
        'learning_standards' => 'setLearningStandards',
        'max_raw_score' => 'setMaxRawScore',
        'nomenclature' => 'setNomenclature',
        'possible_responses' => 'setPossibleResponses',
        '_etag' => 'setEtag',
        '_last_modified_date' => 'setLastModifiedDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'identification_code' => 'getIdentificationCode',
        'assessment_reference' => 'getAssessmentReference',
        'assessment_item_category_descriptor' => 'getAssessmentItemCategoryDescriptor',
        'assessment_item_uri' => 'getAssessmentItemUri',
        'expected_time_assessed' => 'getExpectedTimeAssessed',
        'item_text' => 'getItemText',
        'learning_standards' => 'getLearningStandards',
        'max_raw_score' => 'getMaxRawScore',
        'nomenclature' => 'getNomenclature',
        'possible_responses' => 'getPossibleResponses',
        '_etag' => 'getEtag',
        '_last_modified_date' => 'getLastModifiedDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('identification_code', $data ?? [], null);
        $this->setIfExists('assessment_reference', $data ?? [], null);
        $this->setIfExists('assessment_item_category_descriptor', $data ?? [], null);
        $this->setIfExists('assessment_item_uri', $data ?? [], null);
        $this->setIfExists('expected_time_assessed', $data ?? [], null);
        $this->setIfExists('item_text', $data ?? [], null);
        $this->setIfExists('learning_standards', $data ?? [], null);
        $this->setIfExists('max_raw_score', $data ?? [], null);
        $this->setIfExists('nomenclature', $data ?? [], null);
        $this->setIfExists('possible_responses', $data ?? [], null);
        $this->setIfExists('_etag', $data ?? [], null);
        $this->setIfExists('_last_modified_date', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['identification_code'] === null) {
            $invalidProperties[] = "'identification_code' can't be null";
        }
        if ((mb_strlen($this->container['identification_code']) > 60)) {
            $invalidProperties[] = "invalid value for 'identification_code', the character length must be smaller than or equal to 60.";
        }

        if ((mb_strlen($this->container['identification_code']) < 1)) {
            $invalidProperties[] = "invalid value for 'identification_code', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['assessment_reference'] === null) {
            $invalidProperties[] = "'assessment_reference' can't be null";
        }
        if (!is_null($this->container['assessment_item_category_descriptor']) && (mb_strlen($this->container['assessment_item_category_descriptor']) > 306)) {
            $invalidProperties[] = "invalid value for 'assessment_item_category_descriptor', the character length must be smaller than or equal to 306.";
        }

        if (!is_null($this->container['assessment_item_uri']) && (mb_strlen($this->container['assessment_item_uri']) > 255)) {
            $invalidProperties[] = "invalid value for 'assessment_item_uri', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['assessment_item_uri']) && (mb_strlen($this->container['assessment_item_uri']) < 5)) {
            $invalidProperties[] = "invalid value for 'assessment_item_uri', the character length must be bigger than or equal to 5.";
        }

        if (!is_null($this->container['expected_time_assessed']) && (mb_strlen($this->container['expected_time_assessed']) > 30)) {
            $invalidProperties[] = "invalid value for 'expected_time_assessed', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['item_text']) && (mb_strlen($this->container['item_text']) > 1024)) {
            $invalidProperties[] = "invalid value for 'item_text', the character length must be smaller than or equal to 1024.";
        }

        if (!is_null($this->container['item_text']) && (mb_strlen($this->container['item_text']) < 1)) {
            $invalidProperties[] = "invalid value for 'item_text', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['nomenclature']) && (mb_strlen($this->container['nomenclature']) > 100)) {
            $invalidProperties[] = "invalid value for 'nomenclature', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['nomenclature']) && (mb_strlen($this->container['nomenclature']) < 1)) {
            $invalidProperties[] = "invalid value for 'nomenclature', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id 
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets identification_code
     *
     * @return string
     */
    public function getIdentificationCode()
    {
        return $this->container['identification_code'];
    }

    /**
     * Sets identification_code
     *
     * @param string $identification_code A unique number or alphanumeric code assigned to a space, room, site, building, individual, organization, program, or institution by a school, school system, state, or other agency or entity.
     *
     * @return self
     */
    public function setIdentificationCode($identification_code)
    {
        if (is_null($identification_code)) {
            throw new \InvalidArgumentException('non-nullable identification_code cannot be null');
        }
        if ((mb_strlen($identification_code) > 60)) {
            throw new \InvalidArgumentException('invalid length for $identification_code when calling EdFiAssessmentItem., must be smaller than or equal to 60.');
        }
        if ((mb_strlen($identification_code) < 1)) {
            throw new \InvalidArgumentException('invalid length for $identification_code when calling EdFiAssessmentItem., must be bigger than or equal to 1.');
        }

        $this->container['identification_code'] = $identification_code;

        return $this;
    }

    /**
     * Gets assessment_reference
     *
     * @return \OpenAPI\Client\Model\EdFiAssessmentReference
     */
    public function getAssessmentReference()
    {
        return $this->container['assessment_reference'];
    }

    /**
     * Sets assessment_reference
     *
     * @param \OpenAPI\Client\Model\EdFiAssessmentReference $assessment_reference assessment_reference
     *
     * @return self
     */
    public function setAssessmentReference($assessment_reference)
    {
        if (is_null($assessment_reference)) {
            throw new \InvalidArgumentException('non-nullable assessment_reference cannot be null');
        }
        $this->container['assessment_reference'] = $assessment_reference;

        return $this;
    }

    /**
     * Gets assessment_item_category_descriptor
     *
     * @return string|null
     */
    public function getAssessmentItemCategoryDescriptor()
    {
        return $this->container['assessment_item_category_descriptor'];
    }

    /**
     * Sets assessment_item_category_descriptor
     *
     * @param string|null $assessment_item_category_descriptor Category or type of the assessment item.
     *
     * @return self
     */
    public function setAssessmentItemCategoryDescriptor($assessment_item_category_descriptor)
    {
        if (is_null($assessment_item_category_descriptor)) {
            array_push($this->openAPINullablesSetToNull, 'assessment_item_category_descriptor');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('assessment_item_category_descriptor', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($assessment_item_category_descriptor) && (mb_strlen($assessment_item_category_descriptor) > 306)) {
            throw new \InvalidArgumentException('invalid length for $assessment_item_category_descriptor when calling EdFiAssessmentItem., must be smaller than or equal to 306.');
        }

        $this->container['assessment_item_category_descriptor'] = $assessment_item_category_descriptor;

        return $this;
    }

    /**
     * Gets assessment_item_uri
     *
     * @return string|null
     */
    public function getAssessmentItemUri()
    {
        return $this->container['assessment_item_uri'];
    }

    /**
     * Sets assessment_item_uri
     *
     * @param string|null $assessment_item_uri The URI (typical a URL) pointing to the entry in an assessment item bank, which describes this content item.
     *
     * @return self
     */
    public function setAssessmentItemUri($assessment_item_uri)
    {
        if (is_null($assessment_item_uri)) {
            array_push($this->openAPINullablesSetToNull, 'assessment_item_uri');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('assessment_item_uri', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($assessment_item_uri) && (mb_strlen($assessment_item_uri) > 255)) {
            throw new \InvalidArgumentException('invalid length for $assessment_item_uri when calling EdFiAssessmentItem., must be smaller than or equal to 255.');
        }
        if (!is_null($assessment_item_uri) && (mb_strlen($assessment_item_uri) < 5)) {
            throw new \InvalidArgumentException('invalid length for $assessment_item_uri when calling EdFiAssessmentItem., must be bigger than or equal to 5.');
        }

        $this->container['assessment_item_uri'] = $assessment_item_uri;

        return $this;
    }

    /**
     * Gets expected_time_assessed
     *
     * @return string|null
     */
    public function getExpectedTimeAssessed()
    {
        return $this->container['expected_time_assessed'];
    }

    /**
     * Sets expected_time_assessed
     *
     * @param string|null $expected_time_assessed The duration of time allotted for the assessment item.
     *
     * @return self
     */
    public function setExpectedTimeAssessed($expected_time_assessed)
    {
        if (is_null($expected_time_assessed)) {
            array_push($this->openAPINullablesSetToNull, 'expected_time_assessed');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('expected_time_assessed', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($expected_time_assessed) && (mb_strlen($expected_time_assessed) > 30)) {
            throw new \InvalidArgumentException('invalid length for $expected_time_assessed when calling EdFiAssessmentItem., must be smaller than or equal to 30.');
        }

        $this->container['expected_time_assessed'] = $expected_time_assessed;

        return $this;
    }

    /**
     * Gets item_text
     *
     * @return string|null
     */
    public function getItemText()
    {
        return $this->container['item_text'];
    }

    /**
     * Sets item_text
     *
     * @param string|null $item_text The text of the item.
     *
     * @return self
     */
    public function setItemText($item_text)
    {
        if (is_null($item_text)) {
            array_push($this->openAPINullablesSetToNull, 'item_text');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('item_text', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($item_text) && (mb_strlen($item_text) > 1024)) {
            throw new \InvalidArgumentException('invalid length for $item_text when calling EdFiAssessmentItem., must be smaller than or equal to 1024.');
        }
        if (!is_null($item_text) && (mb_strlen($item_text) < 1)) {
            throw new \InvalidArgumentException('invalid length for $item_text when calling EdFiAssessmentItem., must be bigger than or equal to 1.');
        }

        $this->container['item_text'] = $item_text;

        return $this;
    }

    /**
     * Gets learning_standards
     *
     * @return \OpenAPI\Client\Model\EdFiAssessmentItemLearningStandard[]|null
     */
    public function getLearningStandards()
    {
        return $this->container['learning_standards'];
    }

    /**
     * Sets learning_standards
     *
     * @param \OpenAPI\Client\Model\EdFiAssessmentItemLearningStandard[]|null $learning_standards An unordered collection of assessmentItemLearningStandards. Learning standard tested by this item.
     *
     * @return self
     */
    public function setLearningStandards($learning_standards)
    {
        if (is_null($learning_standards)) {
            throw new \InvalidArgumentException('non-nullable learning_standards cannot be null');
        }
        $this->container['learning_standards'] = $learning_standards;

        return $this;
    }

    /**
     * Gets max_raw_score
     *
     * @return float|null
     */
    public function getMaxRawScore()
    {
        return $this->container['max_raw_score'];
    }

    /**
     * Sets max_raw_score
     *
     * @param float|null $max_raw_score The maximum raw score achievable across all assessment items that are correct and scored at the maximum.
     *
     * @return self
     */
    public function setMaxRawScore($max_raw_score)
    {
        if (is_null($max_raw_score)) {
            array_push($this->openAPINullablesSetToNull, 'max_raw_score');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_raw_score', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_raw_score'] = $max_raw_score;

        return $this;
    }

    /**
     * Gets nomenclature
     *
     * @return string|null
     */
    public function getNomenclature()
    {
        return $this->container['nomenclature'];
    }

    /**
     * Sets nomenclature
     *
     * @param string|null $nomenclature Reflects the specific nomenclature used for assessment item.
     *
     * @return self
     */
    public function setNomenclature($nomenclature)
    {
        if (is_null($nomenclature)) {
            array_push($this->openAPINullablesSetToNull, 'nomenclature');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('nomenclature', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($nomenclature) && (mb_strlen($nomenclature) > 100)) {
            throw new \InvalidArgumentException('invalid length for $nomenclature when calling EdFiAssessmentItem., must be smaller than or equal to 100.');
        }
        if (!is_null($nomenclature) && (mb_strlen($nomenclature) < 1)) {
            throw new \InvalidArgumentException('invalid length for $nomenclature when calling EdFiAssessmentItem., must be bigger than or equal to 1.');
        }

        $this->container['nomenclature'] = $nomenclature;

        return $this;
    }

    /**
     * Gets possible_responses
     *
     * @return \OpenAPI\Client\Model\EdFiAssessmentItemPossibleResponse[]|null
     */
    public function getPossibleResponses()
    {
        return $this->container['possible_responses'];
    }

    /**
     * Sets possible_responses
     *
     * @param \OpenAPI\Client\Model\EdFiAssessmentItemPossibleResponse[]|null $possible_responses An unordered collection of assessmentItemPossibleResponses. A possible response to an assessment item.
     *
     * @return self
     */
    public function setPossibleResponses($possible_responses)
    {
        if (is_null($possible_responses)) {
            throw new \InvalidArgumentException('non-nullable possible_responses cannot be null');
        }
        $this->container['possible_responses'] = $possible_responses;

        return $this;
    }

    /**
     * Gets _etag
     *
     * @return string|null
     */
    public function getEtag()
    {
        return $this->container['_etag'];
    }

    /**
     * Sets _etag
     *
     * @param string|null $_etag A unique system-generated value that identifies the version of the resource.
     *
     * @return self
     */
    public function setEtag($_etag)
    {
        if (is_null($_etag)) {
            throw new \InvalidArgumentException('non-nullable _etag cannot be null');
        }
        $this->container['_etag'] = $_etag;

        return $this;
    }

    /**
     * Gets _last_modified_date
     *
     * @return \DateTime|null
     */
    public function getLastModifiedDate()
    {
        return $this->container['_last_modified_date'];
    }

    /**
     * Sets _last_modified_date
     *
     * @param \DateTime|null $_last_modified_date The date and time the resource was last modified.
     *
     * @return self
     */
    public function setLastModifiedDate($_last_modified_date)
    {
        if (is_null($_last_modified_date)) {
            throw new \InvalidArgumentException('non-nullable _last_modified_date cannot be null');
        }
        $this->container['_last_modified_date'] = $_last_modified_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


