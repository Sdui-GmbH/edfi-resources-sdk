<?php
/**
 * EdFiCourseOffering
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Resources
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Resources\Model;

use \ArrayAccess;
use \Resources\ObjectSerializer;

/**
 * EdFiCourseOffering Class Doc Comment
 *
 * @category Class
 * @package  Resources
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EdFiCourseOffering implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'edFi_courseOffering';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'local_course_code' => 'string',
        'course_reference' => '\Resources\Model\EdFiCourseReference',
        'school_reference' => '\Resources\Model\EdFiSchoolReference',
        'session_reference' => '\Resources\Model\EdFiSessionReference',
        'course_level_characteristics' => '\Resources\Model\EdFiCourseOfferingCourseLevelCharacteristic[]',
        'curriculum_useds' => '\Resources\Model\EdFiCourseOfferingCurriculumUsed[]',
        'instructional_time_planned' => 'int',
        'local_course_title' => 'string',
        'offered_grade_levels' => '\Resources\Model\EdFiCourseOfferingOfferedGradeLevel[]',
        '_etag' => 'string',
        '_last_modified_date' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'local_course_code' => null,
        'course_reference' => null,
        'school_reference' => null,
        'session_reference' => null,
        'course_level_characteristics' => null,
        'curriculum_useds' => null,
        'instructional_time_planned' => 'int32',
        'local_course_title' => null,
        'offered_grade_levels' => null,
        '_etag' => null,
        '_last_modified_date' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'local_course_code' => false,
        'course_reference' => false,
        'school_reference' => false,
        'session_reference' => false,
        'course_level_characteristics' => false,
        'curriculum_useds' => false,
        'instructional_time_planned' => true,
        'local_course_title' => true,
        'offered_grade_levels' => false,
        '_etag' => false,
        '_last_modified_date' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'local_course_code' => 'localCourseCode',
        'course_reference' => 'courseReference',
        'school_reference' => 'schoolReference',
        'session_reference' => 'sessionReference',
        'course_level_characteristics' => 'courseLevelCharacteristics',
        'curriculum_useds' => 'curriculumUseds',
        'instructional_time_planned' => 'instructionalTimePlanned',
        'local_course_title' => 'localCourseTitle',
        'offered_grade_levels' => 'offeredGradeLevels',
        '_etag' => '_etag',
        '_last_modified_date' => '_lastModifiedDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'local_course_code' => 'setLocalCourseCode',
        'course_reference' => 'setCourseReference',
        'school_reference' => 'setSchoolReference',
        'session_reference' => 'setSessionReference',
        'course_level_characteristics' => 'setCourseLevelCharacteristics',
        'curriculum_useds' => 'setCurriculumUseds',
        'instructional_time_planned' => 'setInstructionalTimePlanned',
        'local_course_title' => 'setLocalCourseTitle',
        'offered_grade_levels' => 'setOfferedGradeLevels',
        '_etag' => 'setEtag',
        '_last_modified_date' => 'setLastModifiedDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'local_course_code' => 'getLocalCourseCode',
        'course_reference' => 'getCourseReference',
        'school_reference' => 'getSchoolReference',
        'session_reference' => 'getSessionReference',
        'course_level_characteristics' => 'getCourseLevelCharacteristics',
        'curriculum_useds' => 'getCurriculumUseds',
        'instructional_time_planned' => 'getInstructionalTimePlanned',
        'local_course_title' => 'getLocalCourseTitle',
        'offered_grade_levels' => 'getOfferedGradeLevels',
        '_etag' => 'getEtag',
        '_last_modified_date' => 'getLastModifiedDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('local_course_code', $data ?? [], null);
        $this->setIfExists('course_reference', $data ?? [], null);
        $this->setIfExists('school_reference', $data ?? [], null);
        $this->setIfExists('session_reference', $data ?? [], null);
        $this->setIfExists('course_level_characteristics', $data ?? [], null);
        $this->setIfExists('curriculum_useds', $data ?? [], null);
        $this->setIfExists('instructional_time_planned', $data ?? [], null);
        $this->setIfExists('local_course_title', $data ?? [], null);
        $this->setIfExists('offered_grade_levels', $data ?? [], null);
        $this->setIfExists('_etag', $data ?? [], null);
        $this->setIfExists('_last_modified_date', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['local_course_code'] === null) {
            $invalidProperties[] = "'local_course_code' can't be null";
        }
        if ((mb_strlen($this->container['local_course_code']) > 60)) {
            $invalidProperties[] = "invalid value for 'local_course_code', the character length must be smaller than or equal to 60.";
        }

        if ($this->container['course_reference'] === null) {
            $invalidProperties[] = "'course_reference' can't be null";
        }
        if ($this->container['school_reference'] === null) {
            $invalidProperties[] = "'school_reference' can't be null";
        }
        if ($this->container['session_reference'] === null) {
            $invalidProperties[] = "'session_reference' can't be null";
        }
        if (!is_null($this->container['instructional_time_planned']) && ($this->container['instructional_time_planned'] < 1)) {
            $invalidProperties[] = "invalid value for 'instructional_time_planned', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['local_course_title']) && (mb_strlen($this->container['local_course_title']) > 60)) {
            $invalidProperties[] = "invalid value for 'local_course_title', the character length must be smaller than or equal to 60.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id 
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets local_course_code
     *
     * @return string
     */
    public function getLocalCourseCode()
    {
        return $this->container['local_course_code'];
    }

    /**
     * Sets local_course_code
     *
     * @param string $local_course_code The local code assigned by the School that identifies the course offering provided for the instruction of students.
     *
     * @return self
     */
    public function setLocalCourseCode($local_course_code)
    {
        if (is_null($local_course_code)) {
            throw new \InvalidArgumentException('non-nullable local_course_code cannot be null');
        }
        if ((mb_strlen($local_course_code) > 60)) {
            throw new \InvalidArgumentException('invalid length for $local_course_code when calling EdFiCourseOffering., must be smaller than or equal to 60.');
        }

        $this->container['local_course_code'] = $local_course_code;

        return $this;
    }

    /**
     * Gets course_reference
     *
     * @return \Resources\Model\EdFiCourseReference
     */
    public function getCourseReference()
    {
        return $this->container['course_reference'];
    }

    /**
     * Sets course_reference
     *
     * @param \Resources\Model\EdFiCourseReference $course_reference course_reference
     *
     * @return self
     */
    public function setCourseReference($course_reference)
    {
        if (is_null($course_reference)) {
            throw new \InvalidArgumentException('non-nullable course_reference cannot be null');
        }
        $this->container['course_reference'] = $course_reference;

        return $this;
    }

    /**
     * Gets school_reference
     *
     * @return \Resources\Model\EdFiSchoolReference
     */
    public function getSchoolReference()
    {
        return $this->container['school_reference'];
    }

    /**
     * Sets school_reference
     *
     * @param \Resources\Model\EdFiSchoolReference $school_reference school_reference
     *
     * @return self
     */
    public function setSchoolReference($school_reference)
    {
        if (is_null($school_reference)) {
            throw new \InvalidArgumentException('non-nullable school_reference cannot be null');
        }
        $this->container['school_reference'] = $school_reference;

        return $this;
    }

    /**
     * Gets session_reference
     *
     * @return \Resources\Model\EdFiSessionReference
     */
    public function getSessionReference()
    {
        return $this->container['session_reference'];
    }

    /**
     * Sets session_reference
     *
     * @param \Resources\Model\EdFiSessionReference $session_reference session_reference
     *
     * @return self
     */
    public function setSessionReference($session_reference)
    {
        if (is_null($session_reference)) {
            throw new \InvalidArgumentException('non-nullable session_reference cannot be null');
        }
        $this->container['session_reference'] = $session_reference;

        return $this;
    }

    /**
     * Gets course_level_characteristics
     *
     * @return \Resources\Model\EdFiCourseOfferingCourseLevelCharacteristic[]|null
     */
    public function getCourseLevelCharacteristics()
    {
        return $this->container['course_level_characteristics'];
    }

    /**
     * Sets course_level_characteristics
     *
     * @param \Resources\Model\EdFiCourseOfferingCourseLevelCharacteristic[]|null $course_level_characteristics An unordered collection of courseOfferingCourseLevelCharacteristics. The type of specific program or designation with which the course offering is associated (e.g., AP, IB, Dual Credit, CTE). This collection should only be populated if it differs from the course level characteristics identified at the course level.
     *
     * @return self
     */
    public function setCourseLevelCharacteristics($course_level_characteristics)
    {
        if (is_null($course_level_characteristics)) {
            throw new \InvalidArgumentException('non-nullable course_level_characteristics cannot be null');
        }
        $this->container['course_level_characteristics'] = $course_level_characteristics;

        return $this;
    }

    /**
     * Gets curriculum_useds
     *
     * @return \Resources\Model\EdFiCourseOfferingCurriculumUsed[]|null
     */
    public function getCurriculumUseds()
    {
        return $this->container['curriculum_useds'];
    }

    /**
     * Sets curriculum_useds
     *
     * @param \Resources\Model\EdFiCourseOfferingCurriculumUsed[]|null $curriculum_useds An unordered collection of courseOfferingCurriculumUseds. The type of curriculum used in an early learning classroom or group.
     *
     * @return self
     */
    public function setCurriculumUseds($curriculum_useds)
    {
        if (is_null($curriculum_useds)) {
            throw new \InvalidArgumentException('non-nullable curriculum_useds cannot be null');
        }
        $this->container['curriculum_useds'] = $curriculum_useds;

        return $this;
    }

    /**
     * Gets instructional_time_planned
     *
     * @return int|null
     */
    public function getInstructionalTimePlanned()
    {
        return $this->container['instructional_time_planned'];
    }

    /**
     * Sets instructional_time_planned
     *
     * @param int|null $instructional_time_planned The planned total number of clock minutes of instruction for this course offering. Generally, this should be at least as many minutes as is required for completion by the related state- or district-defined course.
     *
     * @return self
     */
    public function setInstructionalTimePlanned($instructional_time_planned)
    {
        if (is_null($instructional_time_planned)) {
            array_push($this->openAPINullablesSetToNull, 'instructional_time_planned');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('instructional_time_planned', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($instructional_time_planned) && ($instructional_time_planned < 1)) {
            throw new \InvalidArgumentException('invalid value for $instructional_time_planned when calling EdFiCourseOffering., must be bigger than or equal to 1.');
        }

        $this->container['instructional_time_planned'] = $instructional_time_planned;

        return $this;
    }

    /**
     * Gets local_course_title
     *
     * @return string|null
     */
    public function getLocalCourseTitle()
    {
        return $this->container['local_course_title'];
    }

    /**
     * Sets local_course_title
     *
     * @param string|null $local_course_title The descriptive name given to a course of study offered in the school, if different from the course title.
     *
     * @return self
     */
    public function setLocalCourseTitle($local_course_title)
    {
        if (is_null($local_course_title)) {
            array_push($this->openAPINullablesSetToNull, 'local_course_title');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('local_course_title', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($local_course_title) && (mb_strlen($local_course_title) > 60)) {
            throw new \InvalidArgumentException('invalid length for $local_course_title when calling EdFiCourseOffering., must be smaller than or equal to 60.');
        }

        $this->container['local_course_title'] = $local_course_title;

        return $this;
    }

    /**
     * Gets offered_grade_levels
     *
     * @return \Resources\Model\EdFiCourseOfferingOfferedGradeLevel[]|null
     */
    public function getOfferedGradeLevels()
    {
        return $this->container['offered_grade_levels'];
    }

    /**
     * Sets offered_grade_levels
     *
     * @param \Resources\Model\EdFiCourseOfferingOfferedGradeLevel[]|null $offered_grade_levels An unordered collection of courseOfferingOfferedGradeLevels. The grade levels in which the course is offered. This collection should only be populated if it differs from the offered grade levels identified at the course level.
     *
     * @return self
     */
    public function setOfferedGradeLevels($offered_grade_levels)
    {
        if (is_null($offered_grade_levels)) {
            throw new \InvalidArgumentException('non-nullable offered_grade_levels cannot be null');
        }
        $this->container['offered_grade_levels'] = $offered_grade_levels;

        return $this;
    }

    /**
     * Gets _etag
     *
     * @return string|null
     */
    public function getEtag()
    {
        return $this->container['_etag'];
    }

    /**
     * Sets _etag
     *
     * @param string|null $_etag A unique system-generated value that identifies the version of the resource.
     *
     * @return self
     */
    public function setEtag($_etag)
    {
        if (is_null($_etag)) {
            throw new \InvalidArgumentException('non-nullable _etag cannot be null');
        }
        $this->container['_etag'] = $_etag;

        return $this;
    }

    /**
     * Gets _last_modified_date
     *
     * @return \DateTime|null
     */
    public function getLastModifiedDate()
    {
        return $this->container['_last_modified_date'];
    }

    /**
     * Sets _last_modified_date
     *
     * @param \DateTime|null $_last_modified_date The date and time the resource was last modified.
     *
     * @return self
     */
    public function setLastModifiedDate($_last_modified_date)
    {
        if (is_null($_last_modified_date)) {
            throw new \InvalidArgumentException('non-nullable _last_modified_date cannot be null');
        }
        $this->container['_last_modified_date'] = $_last_modified_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


