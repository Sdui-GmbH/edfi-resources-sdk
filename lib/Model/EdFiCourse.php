<?php
/**
 * EdFiCourse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * EdFiCourse Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EdFiCourse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'edFi_course';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'course_code' => 'string',
        'identification_codes' => '\OpenAPI\Client\Model\EdFiCourseIdentificationCode[]',
        'education_organization_reference' => '\OpenAPI\Client\Model\EdFiEducationOrganizationReference',
        'academic_subjects' => '\OpenAPI\Client\Model\EdFiCourseAcademicSubject[]',
        'career_pathway_descriptor' => 'string',
        'competency_levels' => '\OpenAPI\Client\Model\EdFiCourseCompetencyLevel[]',
        'course_defined_by_descriptor' => 'string',
        'course_description' => 'string',
        'course_gpa_applicability_descriptor' => 'string',
        'course_title' => 'string',
        'date_course_adopted' => '\DateTime',
        'high_school_course_requirement' => 'bool',
        'learning_standards' => '\OpenAPI\Client\Model\EdFiCourseLearningStandard[]',
        'level_characteristics' => '\OpenAPI\Client\Model\EdFiCourseLevelCharacteristic[]',
        'max_completions_for_credit' => 'int',
        'maximum_available_credit_conversion' => 'float',
        'maximum_available_credits' => 'float',
        'maximum_available_credit_type_descriptor' => 'string',
        'minimum_available_credit_conversion' => 'float',
        'minimum_available_credits' => 'float',
        'minimum_available_credit_type_descriptor' => 'string',
        'number_of_parts' => 'int',
        'offered_grade_levels' => '\OpenAPI\Client\Model\EdFiCourseOfferedGradeLevel[]',
        'time_required_for_completion' => 'int',
        '_etag' => 'string',
        '_last_modified_date' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'course_code' => null,
        'identification_codes' => null,
        'education_organization_reference' => null,
        'academic_subjects' => null,
        'career_pathway_descriptor' => null,
        'competency_levels' => null,
        'course_defined_by_descriptor' => null,
        'course_description' => null,
        'course_gpa_applicability_descriptor' => null,
        'course_title' => null,
        'date_course_adopted' => 'date',
        'high_school_course_requirement' => null,
        'learning_standards' => null,
        'level_characteristics' => null,
        'max_completions_for_credit' => 'int32',
        'maximum_available_credit_conversion' => 'double',
        'maximum_available_credits' => 'double',
        'maximum_available_credit_type_descriptor' => null,
        'minimum_available_credit_conversion' => 'double',
        'minimum_available_credits' => 'double',
        'minimum_available_credit_type_descriptor' => null,
        'number_of_parts' => 'int32',
        'offered_grade_levels' => null,
        'time_required_for_completion' => 'int32',
        '_etag' => null,
        '_last_modified_date' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'course_code' => false,
        'identification_codes' => false,
        'education_organization_reference' => false,
        'academic_subjects' => false,
        'career_pathway_descriptor' => true,
        'competency_levels' => false,
        'course_defined_by_descriptor' => true,
        'course_description' => true,
        'course_gpa_applicability_descriptor' => true,
        'course_title' => false,
        'date_course_adopted' => true,
        'high_school_course_requirement' => true,
        'learning_standards' => false,
        'level_characteristics' => false,
        'max_completions_for_credit' => true,
        'maximum_available_credit_conversion' => true,
        'maximum_available_credits' => true,
        'maximum_available_credit_type_descriptor' => true,
        'minimum_available_credit_conversion' => true,
        'minimum_available_credits' => true,
        'minimum_available_credit_type_descriptor' => true,
        'number_of_parts' => false,
        'offered_grade_levels' => false,
        'time_required_for_completion' => true,
        '_etag' => false,
        '_last_modified_date' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'course_code' => 'courseCode',
        'identification_codes' => 'identificationCodes',
        'education_organization_reference' => 'educationOrganizationReference',
        'academic_subjects' => 'academicSubjects',
        'career_pathway_descriptor' => 'careerPathwayDescriptor',
        'competency_levels' => 'competencyLevels',
        'course_defined_by_descriptor' => 'courseDefinedByDescriptor',
        'course_description' => 'courseDescription',
        'course_gpa_applicability_descriptor' => 'courseGPAApplicabilityDescriptor',
        'course_title' => 'courseTitle',
        'date_course_adopted' => 'dateCourseAdopted',
        'high_school_course_requirement' => 'highSchoolCourseRequirement',
        'learning_standards' => 'learningStandards',
        'level_characteristics' => 'levelCharacteristics',
        'max_completions_for_credit' => 'maxCompletionsForCredit',
        'maximum_available_credit_conversion' => 'maximumAvailableCreditConversion',
        'maximum_available_credits' => 'maximumAvailableCredits',
        'maximum_available_credit_type_descriptor' => 'maximumAvailableCreditTypeDescriptor',
        'minimum_available_credit_conversion' => 'minimumAvailableCreditConversion',
        'minimum_available_credits' => 'minimumAvailableCredits',
        'minimum_available_credit_type_descriptor' => 'minimumAvailableCreditTypeDescriptor',
        'number_of_parts' => 'numberOfParts',
        'offered_grade_levels' => 'offeredGradeLevels',
        'time_required_for_completion' => 'timeRequiredForCompletion',
        '_etag' => '_etag',
        '_last_modified_date' => '_lastModifiedDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'course_code' => 'setCourseCode',
        'identification_codes' => 'setIdentificationCodes',
        'education_organization_reference' => 'setEducationOrganizationReference',
        'academic_subjects' => 'setAcademicSubjects',
        'career_pathway_descriptor' => 'setCareerPathwayDescriptor',
        'competency_levels' => 'setCompetencyLevels',
        'course_defined_by_descriptor' => 'setCourseDefinedByDescriptor',
        'course_description' => 'setCourseDescription',
        'course_gpa_applicability_descriptor' => 'setCourseGpaApplicabilityDescriptor',
        'course_title' => 'setCourseTitle',
        'date_course_adopted' => 'setDateCourseAdopted',
        'high_school_course_requirement' => 'setHighSchoolCourseRequirement',
        'learning_standards' => 'setLearningStandards',
        'level_characteristics' => 'setLevelCharacteristics',
        'max_completions_for_credit' => 'setMaxCompletionsForCredit',
        'maximum_available_credit_conversion' => 'setMaximumAvailableCreditConversion',
        'maximum_available_credits' => 'setMaximumAvailableCredits',
        'maximum_available_credit_type_descriptor' => 'setMaximumAvailableCreditTypeDescriptor',
        'minimum_available_credit_conversion' => 'setMinimumAvailableCreditConversion',
        'minimum_available_credits' => 'setMinimumAvailableCredits',
        'minimum_available_credit_type_descriptor' => 'setMinimumAvailableCreditTypeDescriptor',
        'number_of_parts' => 'setNumberOfParts',
        'offered_grade_levels' => 'setOfferedGradeLevels',
        'time_required_for_completion' => 'setTimeRequiredForCompletion',
        '_etag' => 'setEtag',
        '_last_modified_date' => 'setLastModifiedDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'course_code' => 'getCourseCode',
        'identification_codes' => 'getIdentificationCodes',
        'education_organization_reference' => 'getEducationOrganizationReference',
        'academic_subjects' => 'getAcademicSubjects',
        'career_pathway_descriptor' => 'getCareerPathwayDescriptor',
        'competency_levels' => 'getCompetencyLevels',
        'course_defined_by_descriptor' => 'getCourseDefinedByDescriptor',
        'course_description' => 'getCourseDescription',
        'course_gpa_applicability_descriptor' => 'getCourseGpaApplicabilityDescriptor',
        'course_title' => 'getCourseTitle',
        'date_course_adopted' => 'getDateCourseAdopted',
        'high_school_course_requirement' => 'getHighSchoolCourseRequirement',
        'learning_standards' => 'getLearningStandards',
        'level_characteristics' => 'getLevelCharacteristics',
        'max_completions_for_credit' => 'getMaxCompletionsForCredit',
        'maximum_available_credit_conversion' => 'getMaximumAvailableCreditConversion',
        'maximum_available_credits' => 'getMaximumAvailableCredits',
        'maximum_available_credit_type_descriptor' => 'getMaximumAvailableCreditTypeDescriptor',
        'minimum_available_credit_conversion' => 'getMinimumAvailableCreditConversion',
        'minimum_available_credits' => 'getMinimumAvailableCredits',
        'minimum_available_credit_type_descriptor' => 'getMinimumAvailableCreditTypeDescriptor',
        'number_of_parts' => 'getNumberOfParts',
        'offered_grade_levels' => 'getOfferedGradeLevels',
        'time_required_for_completion' => 'getTimeRequiredForCompletion',
        '_etag' => 'getEtag',
        '_last_modified_date' => 'getLastModifiedDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('course_code', $data ?? [], null);
        $this->setIfExists('identification_codes', $data ?? [], null);
        $this->setIfExists('education_organization_reference', $data ?? [], null);
        $this->setIfExists('academic_subjects', $data ?? [], null);
        $this->setIfExists('career_pathway_descriptor', $data ?? [], null);
        $this->setIfExists('competency_levels', $data ?? [], null);
        $this->setIfExists('course_defined_by_descriptor', $data ?? [], null);
        $this->setIfExists('course_description', $data ?? [], null);
        $this->setIfExists('course_gpa_applicability_descriptor', $data ?? [], null);
        $this->setIfExists('course_title', $data ?? [], null);
        $this->setIfExists('date_course_adopted', $data ?? [], null);
        $this->setIfExists('high_school_course_requirement', $data ?? [], null);
        $this->setIfExists('learning_standards', $data ?? [], null);
        $this->setIfExists('level_characteristics', $data ?? [], null);
        $this->setIfExists('max_completions_for_credit', $data ?? [], null);
        $this->setIfExists('maximum_available_credit_conversion', $data ?? [], null);
        $this->setIfExists('maximum_available_credits', $data ?? [], null);
        $this->setIfExists('maximum_available_credit_type_descriptor', $data ?? [], null);
        $this->setIfExists('minimum_available_credit_conversion', $data ?? [], null);
        $this->setIfExists('minimum_available_credits', $data ?? [], null);
        $this->setIfExists('minimum_available_credit_type_descriptor', $data ?? [], null);
        $this->setIfExists('number_of_parts', $data ?? [], null);
        $this->setIfExists('offered_grade_levels', $data ?? [], null);
        $this->setIfExists('time_required_for_completion', $data ?? [], null);
        $this->setIfExists('_etag', $data ?? [], null);
        $this->setIfExists('_last_modified_date', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['course_code'] === null) {
            $invalidProperties[] = "'course_code' can't be null";
        }
        if ((mb_strlen($this->container['course_code']) > 60)) {
            $invalidProperties[] = "invalid value for 'course_code', the character length must be smaller than or equal to 60.";
        }

        if ((mb_strlen($this->container['course_code']) < 1)) {
            $invalidProperties[] = "invalid value for 'course_code', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['identification_codes'] === null) {
            $invalidProperties[] = "'identification_codes' can't be null";
        }
        if ($this->container['education_organization_reference'] === null) {
            $invalidProperties[] = "'education_organization_reference' can't be null";
        }
        if (!is_null($this->container['career_pathway_descriptor']) && (mb_strlen($this->container['career_pathway_descriptor']) > 306)) {
            $invalidProperties[] = "invalid value for 'career_pathway_descriptor', the character length must be smaller than or equal to 306.";
        }

        if (!is_null($this->container['course_defined_by_descriptor']) && (mb_strlen($this->container['course_defined_by_descriptor']) > 306)) {
            $invalidProperties[] = "invalid value for 'course_defined_by_descriptor', the character length must be smaller than or equal to 306.";
        }

        if (!is_null($this->container['course_description']) && (mb_strlen($this->container['course_description']) > 1024)) {
            $invalidProperties[] = "invalid value for 'course_description', the character length must be smaller than or equal to 1024.";
        }

        if (!is_null($this->container['course_description']) && (mb_strlen($this->container['course_description']) < 1)) {
            $invalidProperties[] = "invalid value for 'course_description', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['course_gpa_applicability_descriptor']) && (mb_strlen($this->container['course_gpa_applicability_descriptor']) > 306)) {
            $invalidProperties[] = "invalid value for 'course_gpa_applicability_descriptor', the character length must be smaller than or equal to 306.";
        }

        if ($this->container['course_title'] === null) {
            $invalidProperties[] = "'course_title' can't be null";
        }
        if ((mb_strlen($this->container['course_title']) > 60)) {
            $invalidProperties[] = "invalid value for 'course_title', the character length must be smaller than or equal to 60.";
        }

        if ((mb_strlen($this->container['course_title']) < 1)) {
            $invalidProperties[] = "invalid value for 'course_title', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['max_completions_for_credit']) && ($this->container['max_completions_for_credit'] < 1)) {
            $invalidProperties[] = "invalid value for 'max_completions_for_credit', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['maximum_available_credits']) && ($this->container['maximum_available_credits'] < 0.0)) {
            $invalidProperties[] = "invalid value for 'maximum_available_credits', must be bigger than or equal to 0.0.";
        }

        if (!is_null($this->container['maximum_available_credit_type_descriptor']) && (mb_strlen($this->container['maximum_available_credit_type_descriptor']) > 306)) {
            $invalidProperties[] = "invalid value for 'maximum_available_credit_type_descriptor', the character length must be smaller than or equal to 306.";
        }

        if (!is_null($this->container['minimum_available_credits']) && ($this->container['minimum_available_credits'] < 0.0)) {
            $invalidProperties[] = "invalid value for 'minimum_available_credits', must be bigger than or equal to 0.0.";
        }

        if (!is_null($this->container['minimum_available_credit_type_descriptor']) && (mb_strlen($this->container['minimum_available_credit_type_descriptor']) > 306)) {
            $invalidProperties[] = "invalid value for 'minimum_available_credit_type_descriptor', the character length must be smaller than or equal to 306.";
        }

        if ($this->container['number_of_parts'] === null) {
            $invalidProperties[] = "'number_of_parts' can't be null";
        }
        if (($this->container['number_of_parts'] > 8)) {
            $invalidProperties[] = "invalid value for 'number_of_parts', must be smaller than or equal to 8.";
        }

        if (($this->container['number_of_parts'] < 1)) {
            $invalidProperties[] = "invalid value for 'number_of_parts', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['time_required_for_completion']) && ($this->container['time_required_for_completion'] < 1)) {
            $invalidProperties[] = "invalid value for 'time_required_for_completion', must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id 
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets course_code
     *
     * @return string
     */
    public function getCourseCode()
    {
        return $this->container['course_code'];
    }

    /**
     * Sets course_code
     *
     * @param string $course_code A unique alphanumeric code assigned to a course.
     *
     * @return self
     */
    public function setCourseCode($course_code)
    {
        if (is_null($course_code)) {
            throw new \InvalidArgumentException('non-nullable course_code cannot be null');
        }
        if ((mb_strlen($course_code) > 60)) {
            throw new \InvalidArgumentException('invalid length for $course_code when calling EdFiCourse., must be smaller than or equal to 60.');
        }
        if ((mb_strlen($course_code) < 1)) {
            throw new \InvalidArgumentException('invalid length for $course_code when calling EdFiCourse., must be bigger than or equal to 1.');
        }

        $this->container['course_code'] = $course_code;

        return $this;
    }

    /**
     * Gets identification_codes
     *
     * @return \OpenAPI\Client\Model\EdFiCourseIdentificationCode[]
     */
    public function getIdentificationCodes()
    {
        return $this->container['identification_codes'];
    }

    /**
     * Sets identification_codes
     *
     * @param \OpenAPI\Client\Model\EdFiCourseIdentificationCode[] $identification_codes An unordered collection of courseIdentificationCodes. The code that identifies the organization of subject matter and related learning experiences provided for the instruction of students.
     *
     * @return self
     */
    public function setIdentificationCodes($identification_codes)
    {
        if (is_null($identification_codes)) {
            throw new \InvalidArgumentException('non-nullable identification_codes cannot be null');
        }
        $this->container['identification_codes'] = $identification_codes;

        return $this;
    }

    /**
     * Gets education_organization_reference
     *
     * @return \OpenAPI\Client\Model\EdFiEducationOrganizationReference
     */
    public function getEducationOrganizationReference()
    {
        return $this->container['education_organization_reference'];
    }

    /**
     * Sets education_organization_reference
     *
     * @param \OpenAPI\Client\Model\EdFiEducationOrganizationReference $education_organization_reference education_organization_reference
     *
     * @return self
     */
    public function setEducationOrganizationReference($education_organization_reference)
    {
        if (is_null($education_organization_reference)) {
            throw new \InvalidArgumentException('non-nullable education_organization_reference cannot be null');
        }
        $this->container['education_organization_reference'] = $education_organization_reference;

        return $this;
    }

    /**
     * Gets academic_subjects
     *
     * @return \OpenAPI\Client\Model\EdFiCourseAcademicSubject[]|null
     */
    public function getAcademicSubjects()
    {
        return $this->container['academic_subjects'];
    }

    /**
     * Sets academic_subjects
     *
     * @param \OpenAPI\Client\Model\EdFiCourseAcademicSubject[]|null $academic_subjects An unordered collection of courseAcademicSubjects. The intended major subject/s area of the course.
     *
     * @return self
     */
    public function setAcademicSubjects($academic_subjects)
    {
        if (is_null($academic_subjects)) {
            throw new \InvalidArgumentException('non-nullable academic_subjects cannot be null');
        }
        $this->container['academic_subjects'] = $academic_subjects;

        return $this;
    }

    /**
     * Gets career_pathway_descriptor
     *
     * @return string|null
     */
    public function getCareerPathwayDescriptor()
    {
        return $this->container['career_pathway_descriptor'];
    }

    /**
     * Sets career_pathway_descriptor
     *
     * @param string|null $career_pathway_descriptor Indicates the career cluster or pathway the course is associated with as part of a CTE curriculum.
     *
     * @return self
     */
    public function setCareerPathwayDescriptor($career_pathway_descriptor)
    {
        if (is_null($career_pathway_descriptor)) {
            array_push($this->openAPINullablesSetToNull, 'career_pathway_descriptor');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('career_pathway_descriptor', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($career_pathway_descriptor) && (mb_strlen($career_pathway_descriptor) > 306)) {
            throw new \InvalidArgumentException('invalid length for $career_pathway_descriptor when calling EdFiCourse., must be smaller than or equal to 306.');
        }

        $this->container['career_pathway_descriptor'] = $career_pathway_descriptor;

        return $this;
    }

    /**
     * Gets competency_levels
     *
     * @return \OpenAPI\Client\Model\EdFiCourseCompetencyLevel[]|null
     */
    public function getCompetencyLevels()
    {
        return $this->container['competency_levels'];
    }

    /**
     * Sets competency_levels
     *
     * @param \OpenAPI\Client\Model\EdFiCourseCompetencyLevel[]|null $competency_levels An unordered collection of courseCompetencyLevels. The competency levels defined to rate the student for the course.
     *
     * @return self
     */
    public function setCompetencyLevels($competency_levels)
    {
        if (is_null($competency_levels)) {
            throw new \InvalidArgumentException('non-nullable competency_levels cannot be null');
        }
        $this->container['competency_levels'] = $competency_levels;

        return $this;
    }

    /**
     * Gets course_defined_by_descriptor
     *
     * @return string|null
     */
    public function getCourseDefinedByDescriptor()
    {
        return $this->container['course_defined_by_descriptor'];
    }

    /**
     * Sets course_defined_by_descriptor
     *
     * @param string|null $course_defined_by_descriptor Specifies whether the course was defined by the SEA, LEA, School, or national organization.
     *
     * @return self
     */
    public function setCourseDefinedByDescriptor($course_defined_by_descriptor)
    {
        if (is_null($course_defined_by_descriptor)) {
            array_push($this->openAPINullablesSetToNull, 'course_defined_by_descriptor');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('course_defined_by_descriptor', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($course_defined_by_descriptor) && (mb_strlen($course_defined_by_descriptor) > 306)) {
            throw new \InvalidArgumentException('invalid length for $course_defined_by_descriptor when calling EdFiCourse., must be smaller than or equal to 306.');
        }

        $this->container['course_defined_by_descriptor'] = $course_defined_by_descriptor;

        return $this;
    }

    /**
     * Gets course_description
     *
     * @return string|null
     */
    public function getCourseDescription()
    {
        return $this->container['course_description'];
    }

    /**
     * Sets course_description
     *
     * @param string|null $course_description A description of the content standards and goals covered in the course. Reference may be made to state or national content standards.
     *
     * @return self
     */
    public function setCourseDescription($course_description)
    {
        if (is_null($course_description)) {
            array_push($this->openAPINullablesSetToNull, 'course_description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('course_description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($course_description) && (mb_strlen($course_description) > 1024)) {
            throw new \InvalidArgumentException('invalid length for $course_description when calling EdFiCourse., must be smaller than or equal to 1024.');
        }
        if (!is_null($course_description) && (mb_strlen($course_description) < 1)) {
            throw new \InvalidArgumentException('invalid length for $course_description when calling EdFiCourse., must be bigger than or equal to 1.');
        }

        $this->container['course_description'] = $course_description;

        return $this;
    }

    /**
     * Gets course_gpa_applicability_descriptor
     *
     * @return string|null
     */
    public function getCourseGpaApplicabilityDescriptor()
    {
        return $this->container['course_gpa_applicability_descriptor'];
    }

    /**
     * Sets course_gpa_applicability_descriptor
     *
     * @param string|null $course_gpa_applicability_descriptor An indicator of whether or not the course being described is included in the computation of the student's grade point average, and if so, if it is weighted differently from regular courses.
     *
     * @return self
     */
    public function setCourseGpaApplicabilityDescriptor($course_gpa_applicability_descriptor)
    {
        if (is_null($course_gpa_applicability_descriptor)) {
            array_push($this->openAPINullablesSetToNull, 'course_gpa_applicability_descriptor');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('course_gpa_applicability_descriptor', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($course_gpa_applicability_descriptor) && (mb_strlen($course_gpa_applicability_descriptor) > 306)) {
            throw new \InvalidArgumentException('invalid length for $course_gpa_applicability_descriptor when calling EdFiCourse., must be smaller than or equal to 306.');
        }

        $this->container['course_gpa_applicability_descriptor'] = $course_gpa_applicability_descriptor;

        return $this;
    }

    /**
     * Gets course_title
     *
     * @return string
     */
    public function getCourseTitle()
    {
        return $this->container['course_title'];
    }

    /**
     * Sets course_title
     *
     * @param string $course_title The descriptive name given to a course of study offered in a school or other institution or organization. In departmentalized classes at the elementary, secondary, and postsecondary levels (and for staff development activities), this refers to the name by which a course is identified (e.g., American History, English III). For elementary and other non-departmentalized classes, it refers to any portion of the instruction for which a grade or report is assigned (e.g., reading, composition, spelling, and language arts).
     *
     * @return self
     */
    public function setCourseTitle($course_title)
    {
        if (is_null($course_title)) {
            throw new \InvalidArgumentException('non-nullable course_title cannot be null');
        }
        if ((mb_strlen($course_title) > 60)) {
            throw new \InvalidArgumentException('invalid length for $course_title when calling EdFiCourse., must be smaller than or equal to 60.');
        }
        if ((mb_strlen($course_title) < 1)) {
            throw new \InvalidArgumentException('invalid length for $course_title when calling EdFiCourse., must be bigger than or equal to 1.');
        }

        $this->container['course_title'] = $course_title;

        return $this;
    }

    /**
     * Gets date_course_adopted
     *
     * @return \DateTime|null
     */
    public function getDateCourseAdopted()
    {
        return $this->container['date_course_adopted'];
    }

    /**
     * Sets date_course_adopted
     *
     * @param \DateTime|null $date_course_adopted Date the course was adopted by the education agency.
     *
     * @return self
     */
    public function setDateCourseAdopted($date_course_adopted)
    {
        if (is_null($date_course_adopted)) {
            array_push($this->openAPINullablesSetToNull, 'date_course_adopted');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('date_course_adopted', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['date_course_adopted'] = $date_course_adopted;

        return $this;
    }

    /**
     * Gets high_school_course_requirement
     *
     * @return bool|null
     */
    public function getHighSchoolCourseRequirement()
    {
        return $this->container['high_school_course_requirement'];
    }

    /**
     * Sets high_school_course_requirement
     *
     * @param bool|null $high_school_course_requirement An indication that this course may satisfy high school graduation requirements in the course's subject area.
     *
     * @return self
     */
    public function setHighSchoolCourseRequirement($high_school_course_requirement)
    {
        if (is_null($high_school_course_requirement)) {
            array_push($this->openAPINullablesSetToNull, 'high_school_course_requirement');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('high_school_course_requirement', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['high_school_course_requirement'] = $high_school_course_requirement;

        return $this;
    }

    /**
     * Gets learning_standards
     *
     * @return \OpenAPI\Client\Model\EdFiCourseLearningStandard[]|null
     */
    public function getLearningStandards()
    {
        return $this->container['learning_standards'];
    }

    /**
     * Sets learning_standards
     *
     * @param \OpenAPI\Client\Model\EdFiCourseLearningStandard[]|null $learning_standards An unordered collection of courseLearningStandards. Learning standard(s) to be taught by the course.
     *
     * @return self
     */
    public function setLearningStandards($learning_standards)
    {
        if (is_null($learning_standards)) {
            throw new \InvalidArgumentException('non-nullable learning_standards cannot be null');
        }
        $this->container['learning_standards'] = $learning_standards;

        return $this;
    }

    /**
     * Gets level_characteristics
     *
     * @return \OpenAPI\Client\Model\EdFiCourseLevelCharacteristic[]|null
     */
    public function getLevelCharacteristics()
    {
        return $this->container['level_characteristics'];
    }

    /**
     * Sets level_characteristics
     *
     * @param \OpenAPI\Client\Model\EdFiCourseLevelCharacteristic[]|null $level_characteristics An unordered collection of courseLevelCharacteristics. The type of specific program or designation with which the course is associated (e.g., AP, IB, Dual Credit, CTE).
     *
     * @return self
     */
    public function setLevelCharacteristics($level_characteristics)
    {
        if (is_null($level_characteristics)) {
            throw new \InvalidArgumentException('non-nullable level_characteristics cannot be null');
        }
        $this->container['level_characteristics'] = $level_characteristics;

        return $this;
    }

    /**
     * Gets max_completions_for_credit
     *
     * @return int|null
     */
    public function getMaxCompletionsForCredit()
    {
        return $this->container['max_completions_for_credit'];
    }

    /**
     * Sets max_completions_for_credit
     *
     * @param int|null $max_completions_for_credit Designates how many times the course may be taken with credit received by the student.
     *
     * @return self
     */
    public function setMaxCompletionsForCredit($max_completions_for_credit)
    {
        if (is_null($max_completions_for_credit)) {
            array_push($this->openAPINullablesSetToNull, 'max_completions_for_credit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_completions_for_credit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($max_completions_for_credit) && ($max_completions_for_credit < 1)) {
            throw new \InvalidArgumentException('invalid value for $max_completions_for_credit when calling EdFiCourse., must be bigger than or equal to 1.');
        }

        $this->container['max_completions_for_credit'] = $max_completions_for_credit;

        return $this;
    }

    /**
     * Gets maximum_available_credit_conversion
     *
     * @return float|null
     */
    public function getMaximumAvailableCreditConversion()
    {
        return $this->container['maximum_available_credit_conversion'];
    }

    /**
     * Sets maximum_available_credit_conversion
     *
     * @param float|null $maximum_available_credit_conversion Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.
     *
     * @return self
     */
    public function setMaximumAvailableCreditConversion($maximum_available_credit_conversion)
    {
        if (is_null($maximum_available_credit_conversion)) {
            array_push($this->openAPINullablesSetToNull, 'maximum_available_credit_conversion');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('maximum_available_credit_conversion', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['maximum_available_credit_conversion'] = $maximum_available_credit_conversion;

        return $this;
    }

    /**
     * Gets maximum_available_credits
     *
     * @return float|null
     */
    public function getMaximumAvailableCredits()
    {
        return $this->container['maximum_available_credits'];
    }

    /**
     * Sets maximum_available_credits
     *
     * @param float|null $maximum_available_credits The value of credits or units of value awarded for the completion of a course.
     *
     * @return self
     */
    public function setMaximumAvailableCredits($maximum_available_credits)
    {
        if (is_null($maximum_available_credits)) {
            array_push($this->openAPINullablesSetToNull, 'maximum_available_credits');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('maximum_available_credits', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($maximum_available_credits) && ($maximum_available_credits < 0.0)) {
            throw new \InvalidArgumentException('invalid value for $maximum_available_credits when calling EdFiCourse., must be bigger than or equal to 0.0.');
        }

        $this->container['maximum_available_credits'] = $maximum_available_credits;

        return $this;
    }

    /**
     * Gets maximum_available_credit_type_descriptor
     *
     * @return string|null
     */
    public function getMaximumAvailableCreditTypeDescriptor()
    {
        return $this->container['maximum_available_credit_type_descriptor'];
    }

    /**
     * Sets maximum_available_credit_type_descriptor
     *
     * @param string|null $maximum_available_credit_type_descriptor The type of credits or units of value awarded for the completion of a course.
     *
     * @return self
     */
    public function setMaximumAvailableCreditTypeDescriptor($maximum_available_credit_type_descriptor)
    {
        if (is_null($maximum_available_credit_type_descriptor)) {
            array_push($this->openAPINullablesSetToNull, 'maximum_available_credit_type_descriptor');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('maximum_available_credit_type_descriptor', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($maximum_available_credit_type_descriptor) && (mb_strlen($maximum_available_credit_type_descriptor) > 306)) {
            throw new \InvalidArgumentException('invalid length for $maximum_available_credit_type_descriptor when calling EdFiCourse., must be smaller than or equal to 306.');
        }

        $this->container['maximum_available_credit_type_descriptor'] = $maximum_available_credit_type_descriptor;

        return $this;
    }

    /**
     * Gets minimum_available_credit_conversion
     *
     * @return float|null
     */
    public function getMinimumAvailableCreditConversion()
    {
        return $this->container['minimum_available_credit_conversion'];
    }

    /**
     * Sets minimum_available_credit_conversion
     *
     * @param float|null $minimum_available_credit_conversion Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.
     *
     * @return self
     */
    public function setMinimumAvailableCreditConversion($minimum_available_credit_conversion)
    {
        if (is_null($minimum_available_credit_conversion)) {
            array_push($this->openAPINullablesSetToNull, 'minimum_available_credit_conversion');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('minimum_available_credit_conversion', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['minimum_available_credit_conversion'] = $minimum_available_credit_conversion;

        return $this;
    }

    /**
     * Gets minimum_available_credits
     *
     * @return float|null
     */
    public function getMinimumAvailableCredits()
    {
        return $this->container['minimum_available_credits'];
    }

    /**
     * Sets minimum_available_credits
     *
     * @param float|null $minimum_available_credits The value of credits or units of value awarded for the completion of a course.
     *
     * @return self
     */
    public function setMinimumAvailableCredits($minimum_available_credits)
    {
        if (is_null($minimum_available_credits)) {
            array_push($this->openAPINullablesSetToNull, 'minimum_available_credits');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('minimum_available_credits', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($minimum_available_credits) && ($minimum_available_credits < 0.0)) {
            throw new \InvalidArgumentException('invalid value for $minimum_available_credits when calling EdFiCourse., must be bigger than or equal to 0.0.');
        }

        $this->container['minimum_available_credits'] = $minimum_available_credits;

        return $this;
    }

    /**
     * Gets minimum_available_credit_type_descriptor
     *
     * @return string|null
     */
    public function getMinimumAvailableCreditTypeDescriptor()
    {
        return $this->container['minimum_available_credit_type_descriptor'];
    }

    /**
     * Sets minimum_available_credit_type_descriptor
     *
     * @param string|null $minimum_available_credit_type_descriptor The type of credits or units of value awarded for the completion of a course.
     *
     * @return self
     */
    public function setMinimumAvailableCreditTypeDescriptor($minimum_available_credit_type_descriptor)
    {
        if (is_null($minimum_available_credit_type_descriptor)) {
            array_push($this->openAPINullablesSetToNull, 'minimum_available_credit_type_descriptor');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('minimum_available_credit_type_descriptor', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($minimum_available_credit_type_descriptor) && (mb_strlen($minimum_available_credit_type_descriptor) > 306)) {
            throw new \InvalidArgumentException('invalid length for $minimum_available_credit_type_descriptor when calling EdFiCourse., must be smaller than or equal to 306.');
        }

        $this->container['minimum_available_credit_type_descriptor'] = $minimum_available_credit_type_descriptor;

        return $this;
    }

    /**
     * Gets number_of_parts
     *
     * @return int
     */
    public function getNumberOfParts()
    {
        return $this->container['number_of_parts'];
    }

    /**
     * Sets number_of_parts
     *
     * @param int $number_of_parts The number of parts identified for a course.
     *
     * @return self
     */
    public function setNumberOfParts($number_of_parts)
    {
        if (is_null($number_of_parts)) {
            throw new \InvalidArgumentException('non-nullable number_of_parts cannot be null');
        }

        if (($number_of_parts > 8)) {
            throw new \InvalidArgumentException('invalid value for $number_of_parts when calling EdFiCourse., must be smaller than or equal to 8.');
        }
        if (($number_of_parts < 1)) {
            throw new \InvalidArgumentException('invalid value for $number_of_parts when calling EdFiCourse., must be bigger than or equal to 1.');
        }

        $this->container['number_of_parts'] = $number_of_parts;

        return $this;
    }

    /**
     * Gets offered_grade_levels
     *
     * @return \OpenAPI\Client\Model\EdFiCourseOfferedGradeLevel[]|null
     */
    public function getOfferedGradeLevels()
    {
        return $this->container['offered_grade_levels'];
    }

    /**
     * Sets offered_grade_levels
     *
     * @param \OpenAPI\Client\Model\EdFiCourseOfferedGradeLevel[]|null $offered_grade_levels An unordered collection of courseOfferedGradeLevels. The grade levels in which the course is offered.
     *
     * @return self
     */
    public function setOfferedGradeLevels($offered_grade_levels)
    {
        if (is_null($offered_grade_levels)) {
            throw new \InvalidArgumentException('non-nullable offered_grade_levels cannot be null');
        }
        $this->container['offered_grade_levels'] = $offered_grade_levels;

        return $this;
    }

    /**
     * Gets time_required_for_completion
     *
     * @return int|null
     */
    public function getTimeRequiredForCompletion()
    {
        return $this->container['time_required_for_completion'];
    }

    /**
     * Sets time_required_for_completion
     *
     * @param int|null $time_required_for_completion The actual or estimated number of clock minutes required for class completion. This number is especially important for career and technical education classes and may represent (in minutes) the clock hour requirement of the class.
     *
     * @return self
     */
    public function setTimeRequiredForCompletion($time_required_for_completion)
    {
        if (is_null($time_required_for_completion)) {
            array_push($this->openAPINullablesSetToNull, 'time_required_for_completion');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('time_required_for_completion', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($time_required_for_completion) && ($time_required_for_completion < 1)) {
            throw new \InvalidArgumentException('invalid value for $time_required_for_completion when calling EdFiCourse., must be bigger than or equal to 1.');
        }

        $this->container['time_required_for_completion'] = $time_required_for_completion;

        return $this;
    }

    /**
     * Gets _etag
     *
     * @return string|null
     */
    public function getEtag()
    {
        return $this->container['_etag'];
    }

    /**
     * Sets _etag
     *
     * @param string|null $_etag A unique system-generated value that identifies the version of the resource.
     *
     * @return self
     */
    public function setEtag($_etag)
    {
        if (is_null($_etag)) {
            throw new \InvalidArgumentException('non-nullable _etag cannot be null');
        }
        $this->container['_etag'] = $_etag;

        return $this;
    }

    /**
     * Gets _last_modified_date
     *
     * @return \DateTime|null
     */
    public function getLastModifiedDate()
    {
        return $this->container['_last_modified_date'];
    }

    /**
     * Sets _last_modified_date
     *
     * @param \DateTime|null $_last_modified_date The date and time the resource was last modified.
     *
     * @return self
     */
    public function setLastModifiedDate($_last_modified_date)
    {
        if (is_null($_last_modified_date)) {
            throw new \InvalidArgumentException('non-nullable _last_modified_date cannot be null');
        }
        $this->container['_last_modified_date'] = $_last_modified_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


