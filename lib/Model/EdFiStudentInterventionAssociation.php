<?php
/**
 * EdFiStudentInterventionAssociation
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * EdFiStudentInterventionAssociation Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EdFiStudentInterventionAssociation implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'edFi_studentInterventionAssociation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'cohort_reference' => '\OpenAPI\Client\Model\EdFiCohortReference',
        'intervention_reference' => '\OpenAPI\Client\Model\EdFiInterventionReference',
        'student_reference' => '\OpenAPI\Client\Model\EdFiStudentReference',
        'diagnostic_statement' => 'string',
        'dosage' => 'int',
        'intervention_effectivenesses' => '\OpenAPI\Client\Model\EdFiStudentInterventionAssociationInterventionEffectiveness[]',
        '_etag' => 'string',
        '_last_modified_date' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'cohort_reference' => null,
        'intervention_reference' => null,
        'student_reference' => null,
        'diagnostic_statement' => null,
        'dosage' => 'int32',
        'intervention_effectivenesses' => null,
        '_etag' => null,
        '_last_modified_date' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'cohort_reference' => false,
        'intervention_reference' => false,
        'student_reference' => false,
        'diagnostic_statement' => true,
        'dosage' => true,
        'intervention_effectivenesses' => false,
        '_etag' => false,
        '_last_modified_date' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'cohort_reference' => 'cohortReference',
        'intervention_reference' => 'interventionReference',
        'student_reference' => 'studentReference',
        'diagnostic_statement' => 'diagnosticStatement',
        'dosage' => 'dosage',
        'intervention_effectivenesses' => 'interventionEffectivenesses',
        '_etag' => '_etag',
        '_last_modified_date' => '_lastModifiedDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'cohort_reference' => 'setCohortReference',
        'intervention_reference' => 'setInterventionReference',
        'student_reference' => 'setStudentReference',
        'diagnostic_statement' => 'setDiagnosticStatement',
        'dosage' => 'setDosage',
        'intervention_effectivenesses' => 'setInterventionEffectivenesses',
        '_etag' => 'setEtag',
        '_last_modified_date' => 'setLastModifiedDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'cohort_reference' => 'getCohortReference',
        'intervention_reference' => 'getInterventionReference',
        'student_reference' => 'getStudentReference',
        'diagnostic_statement' => 'getDiagnosticStatement',
        'dosage' => 'getDosage',
        'intervention_effectivenesses' => 'getInterventionEffectivenesses',
        '_etag' => 'getEtag',
        '_last_modified_date' => 'getLastModifiedDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('cohort_reference', $data ?? [], null);
        $this->setIfExists('intervention_reference', $data ?? [], null);
        $this->setIfExists('student_reference', $data ?? [], null);
        $this->setIfExists('diagnostic_statement', $data ?? [], null);
        $this->setIfExists('dosage', $data ?? [], null);
        $this->setIfExists('intervention_effectivenesses', $data ?? [], null);
        $this->setIfExists('_etag', $data ?? [], null);
        $this->setIfExists('_last_modified_date', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['intervention_reference'] === null) {
            $invalidProperties[] = "'intervention_reference' can't be null";
        }
        if ($this->container['student_reference'] === null) {
            $invalidProperties[] = "'student_reference' can't be null";
        }
        if (!is_null($this->container['diagnostic_statement']) && (mb_strlen($this->container['diagnostic_statement']) > 1024)) {
            $invalidProperties[] = "invalid value for 'diagnostic_statement', the character length must be smaller than or equal to 1024.";
        }

        if (!is_null($this->container['diagnostic_statement']) && (mb_strlen($this->container['diagnostic_statement']) < 1)) {
            $invalidProperties[] = "invalid value for 'diagnostic_statement', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id 
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets cohort_reference
     *
     * @return \OpenAPI\Client\Model\EdFiCohortReference|null
     */
    public function getCohortReference()
    {
        return $this->container['cohort_reference'];
    }

    /**
     * Sets cohort_reference
     *
     * @param \OpenAPI\Client\Model\EdFiCohortReference|null $cohort_reference cohort_reference
     *
     * @return self
     */
    public function setCohortReference($cohort_reference)
    {
        if (is_null($cohort_reference)) {
            throw new \InvalidArgumentException('non-nullable cohort_reference cannot be null');
        }
        $this->container['cohort_reference'] = $cohort_reference;

        return $this;
    }

    /**
     * Gets intervention_reference
     *
     * @return \OpenAPI\Client\Model\EdFiInterventionReference
     */
    public function getInterventionReference()
    {
        return $this->container['intervention_reference'];
    }

    /**
     * Sets intervention_reference
     *
     * @param \OpenAPI\Client\Model\EdFiInterventionReference $intervention_reference intervention_reference
     *
     * @return self
     */
    public function setInterventionReference($intervention_reference)
    {
        if (is_null($intervention_reference)) {
            throw new \InvalidArgumentException('non-nullable intervention_reference cannot be null');
        }
        $this->container['intervention_reference'] = $intervention_reference;

        return $this;
    }

    /**
     * Gets student_reference
     *
     * @return \OpenAPI\Client\Model\EdFiStudentReference
     */
    public function getStudentReference()
    {
        return $this->container['student_reference'];
    }

    /**
     * Sets student_reference
     *
     * @param \OpenAPI\Client\Model\EdFiStudentReference $student_reference student_reference
     *
     * @return self
     */
    public function setStudentReference($student_reference)
    {
        if (is_null($student_reference)) {
            throw new \InvalidArgumentException('non-nullable student_reference cannot be null');
        }
        $this->container['student_reference'] = $student_reference;

        return $this;
    }

    /**
     * Gets diagnostic_statement
     *
     * @return string|null
     */
    public function getDiagnosticStatement()
    {
        return $this->container['diagnostic_statement'];
    }

    /**
     * Sets diagnostic_statement
     *
     * @param string|null $diagnostic_statement A statement provided by the assigner that provides information regarding why the student was assigned to this intervention.
     *
     * @return self
     */
    public function setDiagnosticStatement($diagnostic_statement)
    {
        if (is_null($diagnostic_statement)) {
            array_push($this->openAPINullablesSetToNull, 'diagnostic_statement');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('diagnostic_statement', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($diagnostic_statement) && (mb_strlen($diagnostic_statement) > 1024)) {
            throw new \InvalidArgumentException('invalid length for $diagnostic_statement when calling EdFiStudentInterventionAssociation., must be smaller than or equal to 1024.');
        }
        if (!is_null($diagnostic_statement) && (mb_strlen($diagnostic_statement) < 1)) {
            throw new \InvalidArgumentException('invalid length for $diagnostic_statement when calling EdFiStudentInterventionAssociation., must be bigger than or equal to 1.');
        }

        $this->container['diagnostic_statement'] = $diagnostic_statement;

        return $this;
    }

    /**
     * Gets dosage
     *
     * @return int|null
     */
    public function getDosage()
    {
        return $this->container['dosage'];
    }

    /**
     * Sets dosage
     *
     * @param int|null $dosage The duration of time in minutes for which the student was assigned to participate in the intervention.
     *
     * @return self
     */
    public function setDosage($dosage)
    {
        if (is_null($dosage)) {
            array_push($this->openAPINullablesSetToNull, 'dosage');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('dosage', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['dosage'] = $dosage;

        return $this;
    }

    /**
     * Gets intervention_effectivenesses
     *
     * @return \OpenAPI\Client\Model\EdFiStudentInterventionAssociationInterventionEffectiveness[]|null
     */
    public function getInterventionEffectivenesses()
    {
        return $this->container['intervention_effectivenesses'];
    }

    /**
     * Sets intervention_effectivenesses
     *
     * @param \OpenAPI\Client\Model\EdFiStudentInterventionAssociationInterventionEffectiveness[]|null $intervention_effectivenesses An unordered collection of studentInterventionAssociationInterventionEffectivenesses. A measure of the effects of an intervention in each outcome domain. The rating of effectiveness takes into account four factors: the quality of the research on the intervention, the statistical significance of the research findings, the size of the differences between participants in the intervention and comparison groups and the consistency in results.
     *
     * @return self
     */
    public function setInterventionEffectivenesses($intervention_effectivenesses)
    {
        if (is_null($intervention_effectivenesses)) {
            throw new \InvalidArgumentException('non-nullable intervention_effectivenesses cannot be null');
        }
        $this->container['intervention_effectivenesses'] = $intervention_effectivenesses;

        return $this;
    }

    /**
     * Gets _etag
     *
     * @return string|null
     */
    public function getEtag()
    {
        return $this->container['_etag'];
    }

    /**
     * Sets _etag
     *
     * @param string|null $_etag A unique system-generated value that identifies the version of the resource.
     *
     * @return self
     */
    public function setEtag($_etag)
    {
        if (is_null($_etag)) {
            throw new \InvalidArgumentException('non-nullable _etag cannot be null');
        }
        $this->container['_etag'] = $_etag;

        return $this;
    }

    /**
     * Gets _last_modified_date
     *
     * @return \DateTime|null
     */
    public function getLastModifiedDate()
    {
        return $this->container['_last_modified_date'];
    }

    /**
     * Sets _last_modified_date
     *
     * @param \DateTime|null $_last_modified_date The date and time the resource was last modified.
     *
     * @return self
     */
    public function setLastModifiedDate($_last_modified_date)
    {
        if (is_null($_last_modified_date)) {
            throw new \InvalidArgumentException('non-nullable _last_modified_date cannot be null');
        }
        $this->container['_last_modified_date'] = $_last_modified_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


